antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1",[0,20.102,1,7.299,2,15.14]],["name/1",[3,2.076]],["text/1",[0,4.341,1,1.444,2,2.394,4,7.518,5,5.808,6,5.088,7,7.267,8,3.775,9,7.518,10,7.518,11,3.294,12,2.242,13,5.588,14,7.518,15,2.165,16,5.088,17,5.808,18,7.518,19,5.088,20,7.518,21,5.808,22,2.022,23,7.518,24,7.518,25,7.518,26,3.978,27,2.786,28,7.518,29,7.518,30,7.518,31,7.518,32,5.808,33,7.518,34,3.055,35,7.518,36,3.738]],["component/1",[37,0.539]],["title/2",[38,15.571]],["name/2",[3,2.076]],["text/2",[1,1.457,12,2.83,39,3.264]],["component/2",[37,0.539]],["title/3",[40,15.571]],["name/3",[3,2.076]],["text/3",[41,4.817,42,6.382,43,5.373,44,2.36]],["component/3",[37,0.539]],["title/4",[39,24.736]],["name/4",[3,2.076]],["text/4",[0,4.489,11,3.407,12,2.417,13,6.024,39,2.789,45,3.83,46,6.261,47,2.93,48,3.326,49,3.74,50,3.427,51,3.697,52,1.952,53,3.114,54,3.006,55,3.326,56,4.987,57,4.987,58,6.261,59,4.326,60,3.262,61,3.655,62,3.697,63,3.575,64,3.393,65,4.987,66,4.987]],["component/4",[37,0.539]],["title/5",[12,21.441]],["name/5",[3,2.076]],["text/5",[1,1.226,8,2.152,11,3.279,12,3.42,22,2.445,27,1.733,36,2.909,45,2.765,48,3.276,52,1.923,53,3.751,54,3.79,55,2.401,67,2.526,68,4.521,69,4.521,70,3.961,71,3.6,72,4.521,73,3.961,74,3.961,75,2.799,76,3.334,77,3.6,78,2.333,79,3.522,80,4.55,81,2.799,82,4.521,83,2.333,84,7.542,85,7.542,86,2.936,87,3.766,88,1.721,89,4.912,90,4.521,91,3.447,92,3.679,93,7.021,94,3.679,95,1.673,96,4.521,97,2.639,98,3.961,99,3.123,100,4.521,101,3.961,102,2.45,103,3.961,104,6.168,105,3.961,106,2.543,107,4.521,108,4.521,109,3.961,110,2.669,111,3.961,112,1.044,113,2.765,114,4.521]],["component/5",[37,0.539]],["title/6",[1,11.038]],["name/6",[3,2.076]],["text/6",[0,3.598,1,1.698,8,2.365,11,3.255,27,2.52,36,3.197,47,2.325,48,4.163,50,2.72,55,2.639,61,2.9,67,2.777,75,4.07,78,3.392,83,2.564,87,2.665,88,1.891,91,2.777,95,1.839,97,2.9,112,1.148,113,3.039,115,3.957,116,4.353,117,3.241,118,4.969,119,4.969,120,4.353,121,3.433,122,4.969,123,4.969,124,3.286,125,4.541,126,2.968,127,2.968,128,3.957,129,2.614,130,2.933,131,3.665,132,1.707,133,1.742,134,2.345,135,4.969,136,3.665,137,4.353,138,3.957,139,4.969,140,4.247,141,4.969,142,4.969,143,4.969,144,4.353,145,4.969,146,4.969,147,4.969,148,3.665,149,4.969,150,4.969,151,4.969,152,4.969,153,2.494]],["component/6",[37,0.539]],["title/7-1",[2,18.227,154,33.2]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["title/7",[41,36.726]],["name/7",[3,2.076]],["text/7",[0,4.064,1,1.195,2,3.061,8,2.861,11,3.084,15,2.767,27,2.846,41,3.975,87,3.225,112,1.389,113,3.677,155,6.042,156,5.903,157,2.963,158,5.418,159,4.599,160,6.284,161,6.284,162,4.032,163,6.284,164,5.418,165,6.284,166,6.284,167,3.818,168,6.284,169,5.418,170,6.284,171,3.975,172,4.064]],["component/7",[37,0.539]],["title/8-1",[2,18.227,154,33.2]],["name/8-1",[]],["text/8-1",[]],["component/8-1",[]],["title/8",[42,48.652]],["name/8",[3,2.076]],["text/8",[0,4.14,2,3.118,3,3.082,8,2.949,11,3.142,15,2.819,42,5.429,45,3.79,53,3.082,112,1.432,113,3.79,155,6.156,156,5.966,157,3.054,158,5.585,172,4.14,173,6.478,174,1.748,175,5.585,176,3.027,177,6.478,178,2.574,179,6.478,180,6.478]],["component/8",[37,0.539]],["title/9-1",[2,18.227,154,33.2]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9",[43,40.961]],["name/9",[3,2.076]],["text/9",[0,4.206,1,1.264,2,3.168,8,3.027,11,3.192,27,2.438,52,1.983,106,2.622,112,1.469,113,3.89,132,2.185,156,5.392,157,3.135,172,4.206,176,3.107,181,8.034,182,6.65,183,6.65,184,6.65,185,6.65,186,4.776,187,4.776]],["component/9",[37,0.539]],["title/10-1",[2,18.227,154,33.2]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10",[44,17.992]],["name/10",[3,2.076]],["text/10",[0,4.341,2,2.996,8,2.764,11,3.294,34,3.055,39,2.587,53,2.889,54,2.788,60,3.026,66,6.316,110,3.429,112,1.342,113,3.552,117,3.788,121,4.013,156,5.565,157,2.863,167,3.689,172,3.978,176,3.55,188,6.072,189,4.727,190,6.55,191,1.599,192,6.072,193,3.429,194,4.361,195,6.072,196,6.072,197,4.837,198,4.361,199,6.072,200,6.072]],["component/10",[37,0.539]],["title/11-1",[2,18.227,154,33.2]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11",[41,36.726]],["name/11",[3,2.076]],["text/11",[0,4.064,1,1.195,2,3.061,8,2.861,11,3.084,15,2.767,27,2.846,41,3.975,87,3.225,112,1.389,113,3.677,155,6.042,156,5.903,157,2.963,158,5.418,159,4.599,160,6.284,161,6.284,162,4.032,163,6.284,164,5.418,165,6.284,166,6.284,167,3.818,168,6.284,169,5.418,170,6.284,171,3.975,172,4.064]],["component/11",[37,0.539]],["title/12-1",[2,18.227,154,33.2]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["title/12",[42,48.652]],["name/12",[3,2.076]],["text/12",[0,4.14,2,3.118,3,3.082,8,2.949,11,3.142,15,2.819,42,5.429,45,3.79,53,3.082,112,1.432,113,3.79,155,6.156,156,5.966,157,3.054,158,5.585,172,4.14,173,6.478,174,1.748,175,5.585,176,3.027,177,6.478,178,2.574,179,6.478,180,6.478]],["component/12",[37,0.539]],["title/13-1",[2,18.227,154,33.2]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["title/13",[43,40.961]],["name/13",[3,2.076]],["text/13",[0,4.206,1,1.264,2,3.168,8,3.027,11,3.192,27,2.438,52,1.983,106,2.622,112,1.469,113,3.89,132,2.185,156,5.392,157,3.135,172,4.206,176,3.107,181,8.034,182,6.65,183,6.65,184,6.65,185,6.65,186,4.776,187,4.776]],["component/13",[37,0.539]],["title/14-1",[2,18.227,154,33.2]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14",[44,17.992]],["name/14",[3,2.076]],["text/14",[0,4.341,2,2.996,8,2.764,11,3.294,34,3.055,39,2.587,53,2.889,54,2.788,60,3.026,66,6.316,110,3.429,112,1.342,113,3.552,117,3.788,121,4.013,156,5.565,157,2.863,167,3.689,172,3.978,176,3.55,188,6.072,189,4.727,190,6.55,191,1.599,192,6.072,193,3.429,194,4.361,195,6.072,196,6.072,197,4.837,198,4.361,199,6.072,200,6.072]],["component/14",[37,0.539]],["title/15-1",[201,14.919]],["name/15-1",[]],["text/15-1",[]],["component/15-1",[]],["title/15-2",[112,10.214,202,12.473]],["name/15-2",[]],["text/15-2",[]],["component/15-2",[]],["title/15",[39,16.358,54,17.63,203,25.77]],["name/15",[39,1.291,203,2.033]],["text/15",[0,2.007,1,1.366,2,1.512,8,1.745,12,1.416,22,1.853,26,2.007,38,1.028,39,3.712,40,1.028,44,1.188,48,2.827,52,2.449,54,3.3,55,1.948,59,3.677,64,1.987,76,2.705,78,1.892,83,1.892,88,2.899,95,1.357,102,1.987,126,3.179,157,1.807,172,2.913,174,1.502,189,2.984,190,3.305,191,2.349,203,4.397,204,3.833,205,3.833,206,2.46,207,2.007,208,4.144,209,2.46,210,3.833,211,2.984,212,4.797,213,3.833,214,3.833,215,3.305,216,1.582,217,3.833,218,2.573,219,3.833,220,3.979,221,5.564,222,5.564,223,2.297,224,3.3,225,5.564,226,5.162,227,5.564,228,5.564,229,1.539,230,3.997,231,5.564,232,3.38,233,4.797,234,3.52,235,4.332,236,6.55,237,1.115,238,1.618,239,1.702,240,1.659,241,1.173,242,1.268,243,1.416,244,1.457,245,1.416,246,1.457,247,3.833,248,2.117,249,3.833,250,2.984,251,2.984,252,3.305,253,3.305,254,2.573,255,3.305,256,2.46,257,2.753,258,3.833,259,3.833,260,2.216,261,2.573,262,2.425,263,1.034,264,1.034,265,1.227]],["component/15",[37,0.539]],["title/16-1",[201,14.919]],["name/16-1",[]],["text/16-1",[]],["component/16-1",[]],["title/16-2",[112,10.214,202,12.473]],["name/16-2",[]],["text/16-2",[]],["component/16-2",[]],["title/16",[39,16.358,79,20.968,266,24.286]],["name/16",[39,0.988,79,1.267,266,1.467]],["text/16",[1,1.474,2,1.265,6,2.688,11,1.275,12,2.177,22,1.624,38,0.86,39,3.778,40,0.86,44,0.994,48,2.995,49,1.833,51,1.812,52,2.439,53,1.526,54,2.238,56,2.444,59,4.681,61,2.722,62,1.812,64,3.671,75,1.9,79,4.073,83,2.91,86,2.219,87,1.646,88,2.822,102,1.663,105,2.688,120,2.688,125,2.12,126,3.762,153,1.54,157,1.512,174,1.591,191,2.385,193,1.448,208,5.277,216,2.012,224,3.425,229,1.348,237,0.933,238,1.417,239,1.491,240,1.454,241,1.491,242,1.061,243,1.185,252,5.083,261,3.272,263,0.866,264,0.866,265,1.027,266,4.48,267,3.208,268,3.208,269,4.202,270,2.304,271,3.208,272,3.208,273,1.924,274,3.208,275,5.083,276,2.304,277,2.766,278,3.208,279,2.497,280,2.766,281,2.766,282,3.208,283,3.208,284,3.208,285,3.208,286,1.854,287,7.082,288,1.833,289,3.208,290,2.304,291,5.806,292,5.896,293,3.208,294,2.766,295,3.208,296,3.208,297,4.202,298,2.766,299,2.818,300,3.795,301,4.202,302,4.875,303,4.819,304,3.208,305,4.875,306,2.766,307,1.752,308,3.208,309,2.153,310,3.208,311,2.029,312,3.208,313,2.304,314,2.153]],["component/16",[37,0.539]],["title/17-1",[201,14.919]],["name/17-1",[]],["text/17-1",[]],["component/17-1",[]],["title/17-2",[112,10.214,202,12.473]],["name/17-2",[]],["text/17-2",[]],["component/17-2",[]],["title/17",[39,19.693,261,31.024]],["name/17",[39,1.291,261,2.033]],["text/17",[1,1.523,8,1.689,11,1.474,12,1.37,19,3.109,22,1.81,38,0.609,39,3.655,40,0.609,44,0.704,48,2.761,51,3.068,52,2.513,53,1.765,54,1.042,59,5.098,60,1.849,64,1.923,67,1.214,78,1.121,79,3.865,83,1.121,86,3.511,87,1.165,88,2.961,115,1.729,126,4.043,153,1.781,171,2.347,174,1.616,191,2.48,193,1.025,207,1.189,208,5.544,216,0.937,224,2.952,229,1.026,237,0.66,238,1.58,239,1.662,240,1.403,241,1.439,242,1.228,243,1.37,244,1.41,245,1.37,246,0.863,253,1.957,256,1.457,257,5.84,261,4.75,262,1.436,263,0.613,264,0.613,265,0.727,266,2.976,275,3.199,286,1.312,291,5.281,297,6.101,300,5.005,301,4.684,303,2.715,313,1.631,314,1.524,315,3.199,316,2.27,317,2.27,318,1.631,319,2.27,320,1.957,321,1.957,322,1.957,323,3.199,324,1.957,325,1.957,326,5.434,327,5.434,328,5.434,329,2.225,330,3.71,331,4.056,332,5.434,333,3.199,334,3.663,335,2.38,336,5.99,337,5.434,338,3.71,339,2.955,340,5.434,341,3.199,342,2.665,343,5.99,344,0.916,345,0.937,346,0.967,347,0.967,348,2.27,349,2.27,350,2.27,351,2.27,352,1.957,353,2.27,354,2.27,355,2.27,356,2.27,357,1.767]],["component/17",[37,0.539]],["title/18-1",[201,14.919]],["name/18-1",[]],["text/18-1",[]],["component/18-1",[]],["title/18-2",[112,10.214,202,12.473]],["name/18-2",[]],["text/18-2",[]],["component/18-2",[]],["title/18",[39,19.693,208,29.238]],["name/18",[39,1.291,208,1.916]],["text/18",[1,0.399,2,1.37,8,0.954,11,1.768,12,0.774,15,1.239,19,1.757,21,2.005,22,1.724,26,1.098,27,0.769,36,1.29,38,0.562,39,3.392,40,0.562,44,0.65,47,0.938,48,1.065,52,1.711,53,2.117,54,0.963,56,1.597,59,2.296,60,1.045,64,3.206,67,2.379,74,1.757,77,1.597,78,3.712,79,1.145,83,1.715,86,0.954,87,1.783,88,1.62,89,2.647,95,0.742,102,1.086,124,2.198,125,1.385,126,1.198,138,1.597,153,1.006,174,0.938,176,2.419,191,2.584,193,0.946,203,1.407,207,1.819,208,4.757,212,1.807,216,1.434,224,3.529,229,0.961,237,0.61,262,1.326,263,0.938,264,0.566,265,0.671,266,2.198,269,1.807,286,1.212,298,4.463,299,4.603,300,2.705,315,1.807,320,1.807,321,1.807,322,1.807,323,2.995,331,1.807,333,4.463,335,2.229,341,2.995,357,1.632,358,1.632,359,2.096,360,1.807,361,2.096,362,1.632,363,1.807,364,1.407,365,1.632,366,2.096,367,5.176,368,1.715,369,4.527,370,3.475,371,3.969,372,2.334,373,4.463,374,5.176,375,2.768,376,3.475,377,3.475,378,6.187,379,2.995,380,2.995,381,3.475,382,6.187,383,3.475,384,1.783,385,3.475,386,3.475,387,3.475,388,3.475,389,3.475,390,5.176,391,5.176,392,2.496,393,2.198,394,3.475,395,3.475,396,6.187,397,3.475,398,3.475,399,3.475,400,3.475,401,3.475,402,3.475,403,3.475,404,1.326,405,1.632,406,2.096,407,2.096,408,1.807,409,1.326,410,1.807,411,4.45,412,3.475,413,2.096,414,1.506,415,1.807,416,2.995,417,2.096,418,1.257,419,1.632,420,1.632,421,2.096,422,2.096,423,1.632,424,2.096,425,1.807,426,1.632,427,2.096,428,1.807,429,1.807,430,2.096,431,1.145,432,2.096]],["component/18",[37,0.539]],["title/19-1",[201,14.919]],["name/19-1",[]],["text/19-1",[]],["component/19-1",[]],["title/19-2",[112,10.214,202,12.473]],["name/19-2",[]],["text/19-2",[]],["component/19-2",[]],["title/19",[39,16.358,54,17.63,203,25.77]],["name/19",[39,1.291,203,2.033]],["text/19",[0,2.007,1,1.366,2,1.512,8,1.745,12,1.416,22,1.853,26,2.007,38,1.028,39,3.712,40,1.028,44,1.188,48,2.827,52,2.449,54,3.3,55,1.948,59,3.677,64,1.987,76,2.705,78,1.892,83,1.892,88,2.899,95,1.357,102,1.987,126,3.179,157,1.807,172,2.913,174,1.502,189,2.984,190,3.305,191,2.349,203,4.397,204,3.833,205,3.833,206,2.46,207,2.007,208,4.144,209,2.46,210,3.833,211,2.984,212,4.797,213,3.833,214,3.833,215,3.305,216,1.582,217,3.833,218,2.573,219,3.833,220,3.979,221,5.564,222,5.564,223,2.297,224,3.3,225,5.564,226,5.162,227,5.564,228,5.564,229,1.539,230,3.997,231,5.564,232,3.38,233,4.797,234,3.52,235,4.332,236,6.55,237,1.115,238,1.618,239,1.702,240,1.659,241,1.173,242,1.268,243,1.416,244,1.457,245,1.416,246,1.457,247,3.833,248,2.117,249,3.833,250,2.984,251,2.984,252,3.305,253,3.305,254,2.573,255,3.305,256,2.46,257,2.753,258,3.833,259,3.833,260,2.216,261,2.573,262,2.425,263,1.034,264,1.034,265,1.227]],["component/19",[37,0.539]],["title/20-1",[201,14.919]],["name/20-1",[]],["text/20-1",[]],["component/20-1",[]],["title/20-2",[112,10.214,202,12.473]],["name/20-2",[]],["text/20-2",[]],["component/20-2",[]],["title/20",[39,16.358,79,20.968,266,24.286]],["name/20",[39,0.988,79,1.267,266,1.467]],["text/20",[1,1.474,2,1.265,6,2.688,11,1.275,12,2.177,22,1.624,38,0.86,39,3.778,40,0.86,44,0.994,48,2.995,49,1.833,51,1.812,52,2.439,53,1.526,54,2.238,56,2.444,59,4.681,61,2.722,62,1.812,64,3.671,75,1.9,79,4.073,83,2.91,86,2.219,87,1.646,88,2.822,102,1.663,105,2.688,120,2.688,125,2.12,126,3.762,153,1.54,157,1.512,174,1.591,191,2.385,193,1.448,208,5.277,216,2.012,224,3.425,229,1.348,237,0.933,238,1.417,239,1.491,240,1.454,241,1.491,242,1.061,243,1.185,252,5.083,261,3.272,263,0.866,264,0.866,265,1.027,266,4.48,267,3.208,268,3.208,269,4.202,270,2.304,271,3.208,272,3.208,273,1.924,274,3.208,275,5.083,276,2.304,277,2.766,278,3.208,279,2.497,280,2.766,281,2.766,282,3.208,283,3.208,284,3.208,285,3.208,286,1.854,287,7.082,288,1.833,289,3.208,290,2.304,291,5.806,292,5.896,293,3.208,294,2.766,295,3.208,296,3.208,297,4.202,298,2.766,299,2.818,300,3.795,301,4.202,302,4.875,303,4.819,304,3.208,305,4.875,306,2.766,307,1.752,308,3.208,309,2.153,310,3.208,311,2.029,312,3.208,313,2.304,314,2.153]],["component/20",[37,0.539]],["title/21-1",[201,14.919]],["name/21-1",[]],["text/21-1",[]],["component/21-1",[]],["title/21-2",[112,10.214,202,12.473]],["name/21-2",[]],["text/21-2",[]],["component/21-2",[]],["title/21",[39,19.693,261,31.024]],["name/21",[39,1.291,261,2.033]],["text/21",[1,1.523,8,1.689,11,1.474,12,1.37,19,3.109,22,1.81,38,0.609,39,3.655,40,0.609,44,0.704,48,2.761,51,3.068,52,2.513,53,1.765,54,1.042,59,5.098,60,1.849,64,1.923,67,1.214,78,1.121,79,3.865,83,1.121,86,3.511,87,1.165,88,2.961,115,1.729,126,4.043,153,1.781,171,2.347,174,1.616,191,2.48,193,1.025,207,1.189,208,5.544,216,0.937,224,2.952,229,1.026,237,0.66,238,1.58,239,1.662,240,1.403,241,1.439,242,1.228,243,1.37,244,1.41,245,1.37,246,0.863,253,1.957,256,1.457,257,5.84,261,4.75,262,1.436,263,0.613,264,0.613,265,0.727,266,2.976,275,3.199,286,1.312,291,5.281,297,6.101,300,5.005,301,4.684,303,2.715,313,1.631,314,1.524,315,3.199,316,2.27,317,2.27,318,1.631,319,2.27,320,1.957,321,1.957,322,1.957,323,3.199,324,1.957,325,1.957,326,5.434,327,5.434,328,5.434,329,2.225,330,3.71,331,4.056,332,5.434,333,3.199,334,3.663,335,2.38,336,5.99,337,5.434,338,3.71,339,2.955,340,5.434,341,3.199,342,2.665,343,5.99,344,0.916,345,0.937,346,0.967,347,0.967,348,2.27,349,2.27,350,2.27,351,2.27,352,1.957,353,2.27,354,2.27,355,2.27,356,2.27,357,1.767]],["component/21",[37,0.539]],["title/22-1",[201,14.919]],["name/22-1",[]],["text/22-1",[]],["component/22-1",[]],["title/22-2",[112,10.214,202,12.473]],["name/22-2",[]],["text/22-2",[]],["component/22-2",[]],["title/22",[39,19.693,208,29.238]],["name/22",[39,1.291,208,1.916]],["text/22",[1,0.399,2,1.37,8,0.954,11,1.768,12,0.774,15,1.239,19,1.757,21,2.005,22,1.724,26,1.098,27,0.769,36,1.29,38,0.562,39,3.392,40,0.562,44,0.65,47,0.938,48,1.065,52,1.711,53,2.117,54,0.963,56,1.597,59,2.296,60,1.045,64,3.206,67,2.379,74,1.757,77,1.597,78,3.712,79,1.145,83,1.715,86,0.954,87,1.783,88,1.62,89,2.647,95,0.742,102,1.086,124,2.198,125,1.385,126,1.198,138,1.597,153,1.006,174,0.938,176,2.419,191,2.584,193,0.946,203,1.407,207,1.819,208,4.757,212,1.807,216,1.434,224,3.529,229,0.961,237,0.61,262,1.326,263,0.938,264,0.566,265,0.671,266,2.198,269,1.807,286,1.212,298,4.463,299,4.603,300,2.705,315,1.807,320,1.807,321,1.807,322,1.807,323,2.995,331,1.807,333,4.463,335,2.229,341,2.995,357,1.632,358,1.632,359,2.096,360,1.807,361,2.096,362,1.632,363,1.807,364,1.407,365,1.632,366,2.096,367,5.176,368,1.715,369,4.527,370,3.475,371,3.969,372,2.334,373,4.463,374,5.176,375,2.768,376,3.475,377,3.475,378,6.187,379,2.995,380,2.995,381,3.475,382,6.187,383,3.475,384,1.783,385,3.475,386,3.475,387,3.475,388,3.475,389,3.475,390,5.176,391,5.176,392,2.496,393,2.198,394,3.475,395,3.475,396,6.187,397,3.475,398,3.475,399,3.475,400,3.475,401,3.475,402,3.475,403,3.475,404,1.326,405,1.632,406,2.096,407,2.096,408,1.807,409,1.326,410,1.807,411,4.45,412,3.475,413,2.096,414,1.506,415,1.807,416,2.995,417,2.096,418,1.257,419,1.632,420,1.632,421,2.096,422,2.096,423,1.632,424,2.096,425,1.807,426,1.632,427,2.096,428,1.807,429,1.807,430,2.096,431,1.145,432,2.096]],["component/22",[37,0.539]],["title/23-1",[2,18.227,154,33.2]],["name/23-1",[]],["text/23-1",[]],["component/23-1",[]],["title/23",[41,36.726]],["name/23",[3,2.076]],["text/23",[0,4.064,1,1.195,2,3.061,8,2.861,11,3.084,15,2.767,27,2.846,41,3.975,87,3.225,112,1.389,113,3.677,155,6.042,156,5.903,157,2.963,158,5.418,159,4.599,160,6.284,161,6.284,162,4.032,163,6.284,164,5.418,165,6.284,166,6.284,167,3.818,168,6.284,169,5.418,170,6.284,171,3.975,172,4.064]],["component/23",[37,0.539]],["title/24-1",[201,14.919]],["name/24-1",[]],["text/24-1",[]],["component/24-1",[]],["title/24-2",[112,10.214,202,12.473]],["name/24-2",[]],["text/24-2",[]],["component/24-2",[]],["title/24",[1,7.299,12,14.179,52,11.45]],["name/24",[1,0.441,52,0.692,433,1.848]],["text/24",[1,1.476,2,1.159,12,2.659,15,1.625,22,0.979,26,1.538,36,1.809,38,0.788,40,0.788,41,1.859,49,1.679,50,2.386,52,2.623,63,1.605,86,3.42,88,1.07,92,4.345,95,2.227,124,1.859,132,0.966,134,2.057,157,1.385,167,1.785,174,0.793,191,2.335,197,4.446,209,2.924,216,1.881,224,3.566,229,1.26,237,0.854,238,1.325,239,0.899,240,0.876,241,0.899,242,0.972,243,1.085,244,1.117,245,1.085,246,1.117,248,1.622,260,1.698,263,0.793,264,0.793,265,0.941,286,1.698,299,3.227,303,5.962,344,1.185,345,1.213,346,1.252,347,1.252,368,3.104,375,4.446,384,1.508,434,1.398,435,2.613,436,1.622,437,1.293,438,2.15,439,1.719,440,2.613,441,2.613,442,2.613,443,2.34,444,2.34,445,6.404,446,2.613,447,4.964,448,3.807,449,6.404,450,4.052,451,4.052,452,4.052,453,3.362,454,4.052,455,5.592,456,2.249,457,4.052,458,6.905,459,5.592,460,6.404,461,4.052,462,4.052,463,4.052,464,4.052,465,4.052,466,4.052,467,4.964,468,4.052,469,1.293,470,1.293,471,1.293,472,1.222,473,1.385,474,1.437,475,1.698,476,1.698,477,1.698,478,1.785,479,1.885,480,2.004,481,1.885,482,1.785,483,2.613,484,2.34,485,2.613,486,2.613,487,4.052,488,2.613,489,2.613,490,2.613,491,2.613,492,2.613,493,4.052,494,4.052,495,4.052,496,2.613,497,2.613,498,2.613,499,2.613,500,2.613,501,2.613,502,2.15,503,2.34,504,2.613,505,2.34]],["component/24",[37,0.539]],["title/25-1",[2,18.227,154,33.2]],["name/25-1",[]],["text/25-1",[]],["component/25-1",[]],["title/25",[42,48.652]],["name/25",[3,2.076]],["text/25",[0,4.14,2,3.118,3,3.082,8,2.949,11,3.142,15,2.819,42,5.429,45,3.79,53,3.082,112,1.432,113,3.79,155,6.156,156,5.966,157,3.054,158,5.585,172,4.14,173,6.478,174,1.748,175,5.585,176,3.027,177,6.478,178,2.574,179,6.478,180,6.478]],["component/25",[37,0.539]],["title/26-1",[2,18.227,154,33.2]],["name/26-1",[]],["text/26-1",[]],["component/26-1",[]],["title/26",[43,40.961]],["name/26",[3,2.076]],["text/26",[0,4.206,1,1.264,2,3.168,8,3.027,11,3.192,27,2.438,52,1.983,106,2.622,112,1.469,113,3.89,132,2.185,156,5.392,157,3.135,172,4.206,176,3.107,181,8.034,182,6.65,183,6.65,184,6.65,185,6.65,186,4.776,187,4.776]],["component/26",[37,0.539]],["title/27-1",[201,14.919]],["name/27-1",[]],["text/27-1",[]],["component/27-1",[]],["title/27-2",[112,10.214,202,12.473]],["name/27-2",[]],["text/27-2",[]],["component/27-2",[]],["title/27",[136,27.088,506,27.578,507,25.77]],["name/27",[136,1.636,506,1.666,507,1.557]],["text/27",[1,0.96,11,1.336,12,2.804,15,2.163,34,2.541,38,0.902,40,0.902,44,1.042,48,1.708,49,1.921,54,1.544,57,4.621,64,1.743,95,2.148,99,4.457,102,2.618,125,2.222,130,1.899,140,1.743,153,1.614,174,0.907,191,2.537,211,2.617,215,2.899,216,2.085,226,3.628,230,3.628,237,2.41,238,0.978,239,1.029,240,1.003,241,1.029,242,1.112,243,1.242,244,1.278,245,1.242,246,1.278,256,2.157,263,0.907,264,0.907,281,2.899,318,2.415,335,3.24,344,1.356,345,1.388,346,1.432,347,1.432,357,2.617,358,2.617,368,2.493,409,2.127,431,1.836,437,1.48,439,1.967,453,4.059,469,1.48,470,1.48,471,1.48,472,2.806,506,3.628,507,5.438,508,3.362,509,3.362,510,3.362,511,2.415,512,3.39,513,3.932,514,5.051,515,5.051,516,7.593,517,5.192,518,5.23,519,6.066,520,4.124,521,3.932,522,5.051,523,6.744,524,5.23,525,4.354,526,5.051,527,5.051,528,5.051,529,5.051,530,4.722,531,5.23,532,3.362,533,2.678,534,2.899,535,3.362,536,3.362,537,3.362]],["component/27",[37,0.539]],["title/28-1",[2,18.227,154,33.2]],["name/28-1",[]],["text/28-1",[]],["component/28-1",[]],["title/28",[44,17.992]],["name/28",[3,2.076]],["text/28",[0,4.341,2,2.996,8,2.764,11,3.294,34,3.055,39,2.587,53,2.889,54,2.788,60,3.026,66,6.316,110,3.429,112,1.342,113,3.552,117,3.788,121,4.013,156,5.565,157,2.863,167,3.689,172,3.978,176,3.55,188,6.072,189,4.727,190,6.55,191,1.599,192,6.072,193,3.429,194,4.361,195,6.072,196,6.072,197,4.837,198,4.361,199,6.072,200,6.072]],["component/28",[37,0.539]],["title/29-1",[201,14.919]],["name/29-1",[]],["text/29-1",[]],["component/29-1",[]],["title/29-2",[112,10.214,202,12.473]],["name/29-2",[]],["text/29-2",[]],["component/29-2",[]],["title/29",[12,12.125,106,12.948,176,15.343,538,22.394]],["name/29",[106,0.741,176,0.878,433,1.497,538,1.282]],["text/29",[1,0.444,3,1.805,12,2.807,22,0.777,27,0.856,38,0.626,40,0.626,44,0.723,45,1.365,52,1.131,78,1.152,91,2.028,99,3.65,106,3.271,109,4.018,132,1.247,162,2.434,174,0.63,176,3.921,191,2.593,223,1.566,224,2.99,230,2.725,237,0.678,238,0.678,239,0.714,240,0.696,241,0.714,242,0.772,243,0.862,244,0.887,245,0.862,246,0.887,248,1.288,255,3.271,263,0.63,264,0.63,265,0.747,334,2.954,344,0.941,345,0.963,346,0.994,347,0.994,368,1.873,369,4.447,373,3.271,434,1.11,436,1.288,437,1.027,453,2.952,469,1.027,470,1.027,471,1.027,472,0.971,473,1.1,474,1.141,475,1.349,476,1.349,477,1.349,478,1.418,479,1.497,480,1.591,481,1.497,482,1.418,521,4.299,538,2.588,539,3.444,540,2.305,541,2.333,542,3.707,543,2.333,544,2.588,545,6.077,546,7.933,547,6.512,548,3.794,549,5.614,550,7.152,551,3.794,552,6.512,553,7.152,554,5.523,555,5.523,556,5.523,557,5.523,558,7.152,559,4.761,560,5.523,561,5.523,562,4.795,563,2.954,564,3.271,565,3.271,566,3.271,567,4.761,568,3.794,569,3.794,570,3.794,571,3.794,572,1.816,573,1.676,574,1.816,575,1.816,576,2.333,577,2.333]],["component/29",[37,0.539]],["title/30-1",[201,14.919]],["name/30-1",[]],["text/30-1",[]],["component/30-1",[]],["title/30-2",[112,10.214,202,12.473]],["name/30-2",[]],["text/30-2",[]],["component/30-2",[]],["title/30",[1,8.788,578,30.547]],["name/30",[1,0.576,578,2.002]],["text/30",[1,1.691,12,1.835,15,1.003,34,2.5,37,0.328,38,0.438,40,0.438,44,0.506,47,2.43,50,1.473,52,1.832,75,1.667,79,1.537,86,1.281,88,1.809,94,1.272,95,1.56,112,0.622,126,1.608,127,3.102,129,1.865,132,1.633,133,1.243,159,2.059,162,2.378,174,1.909,191,2.515,206,1.048,220,2.677,223,1.162,224,2.023,229,2.045,232,4.983,237,0.475,238,1.281,239,1.134,240,1.105,241,1.134,242,0.54,243,0.603,244,0.621,245,0.603,246,1.07,256,1.048,263,0.441,264,0.441,335,1.048,339,1.301,344,0.659,368,1.389,369,1.195,371,1.805,372,1.662,384,1.444,434,2.096,439,2.169,453,1.504,456,1.389,472,1.171,533,5.313,538,1.114,540,1.71,544,1.919,578,4.408,579,1.195,580,1.453,581,4.4,582,1.919,583,1.919,584,1.627,585,1.919,586,3.51,587,1.919,588,4.19,589,2.502,590,2.502,591,3.005,592,7.294,593,5.263,594,7.294,595,2.502,596,3.51,597,4.383,598,2.502,599,3.918,600,2.502,601,2.502,602,3.224,603,2.502,604,4.633,605,2.502,606,2.502,607,3.51,608,2.502,609,2.502,610,3.51,611,3.51,612,2.502,613,2.502,614,6.441,615,3.51,616,3.224,617,2.242,618,2.502,619,4.829,620,3.299,621,3.918,622,3.732,623,3.918,624,3.224,625,3.918,626,3.51,627,2.502,628,2.502,629,3.296,630,2.502,631,3.296,632,1.453,633,2.502,634,2.502,635,2.502,636,2.502,637,2.502,638,2.331,639,1.919,640,2.502,641,2.059,642,1.453,643,1.453,644,1.453,645,1.453,646,1.195,647,1.301,648,1.453,649,1.453,650,1.453]],["component/30",[37,0.539]],["title/31-1",[201,14.919]],["name/31-1",[]],["text/31-1",[]],["component/31-1",[]],["title/31-2",[112,10.214,202,12.473]],["name/31-2",[]],["text/31-2",[]],["component/31-2",[]],["title/31",[136,27.088,506,27.578,507,25.77]],["name/31",[136,1.636,506,1.666,507,1.557]],["text/31",[1,0.96,11,1.336,12,2.804,15,2.163,34,2.541,38,0.902,40,0.902,44,1.042,48,1.708,49,1.921,54,1.544,57,4.621,64,1.743,95,2.148,99,4.457,102,2.618,125,2.222,130,1.899,140,1.743,153,1.614,174,0.907,191,2.537,211,2.617,215,2.899,216,2.085,226,3.628,230,3.628,237,2.41,238,0.978,239,1.029,240,1.003,241,1.029,242,1.112,243,1.242,244,1.278,245,1.242,246,1.278,256,2.157,263,0.907,264,0.907,281,2.899,318,2.415,335,3.24,344,1.356,345,1.388,346,1.432,347,1.432,357,2.617,358,2.617,368,2.493,409,2.127,431,1.836,437,1.48,439,1.967,453,4.059,469,1.48,470,1.48,471,1.48,472,2.806,506,3.628,507,5.438,508,3.362,509,3.362,510,3.362,511,2.415,512,3.39,513,3.932,514,5.051,515,5.051,516,7.593,517,5.192,518,5.23,519,6.066,520,4.124,521,3.932,522,5.051,523,6.744,524,5.23,525,4.354,526,5.051,527,5.051,528,5.051,529,5.051,530,4.722,531,5.23,532,3.362,533,2.678,534,2.899,535,3.362,536,3.362,537,3.362]],["component/31",[37,0.539]],["title/32-1",[201,14.919]],["name/32-1",[]],["text/32-1",[]],["component/32-1",[]],["title/32-2",[112,10.214,202,12.473]],["name/32-2",[]],["text/32-2",[]],["component/32-2",[]],["title/32",[12,12.125,106,12.948,176,15.343,538,22.394]],["name/32",[106,0.741,176,0.878,433,1.497,538,1.282]],["text/32",[1,0.444,3,1.805,12,2.807,22,0.777,27,0.856,38,0.626,40,0.626,44,0.723,45,1.365,52,1.131,78,1.152,91,2.028,99,3.65,106,3.271,109,4.018,132,1.247,162,2.434,174,0.63,176,3.921,191,2.593,223,1.566,224,2.99,230,2.725,237,0.678,238,0.678,239,0.714,240,0.696,241,0.714,242,0.772,243,0.862,244,0.887,245,0.862,246,0.887,248,1.288,255,3.271,263,0.63,264,0.63,265,0.747,334,2.954,344,0.941,345,0.963,346,0.994,347,0.994,368,1.873,369,4.447,373,3.271,434,1.11,436,1.288,437,1.027,453,2.952,469,1.027,470,1.027,471,1.027,472,0.971,473,1.1,474,1.141,475,1.349,476,1.349,477,1.349,478,1.418,479,1.497,480,1.591,481,1.497,482,1.418,521,4.299,538,2.588,539,3.444,540,2.305,541,2.333,542,3.707,543,2.333,544,2.588,545,6.077,546,7.933,547,6.512,548,3.794,549,5.614,550,7.152,551,3.794,552,6.512,553,7.152,554,5.523,555,5.523,556,5.523,557,5.523,558,7.152,559,4.761,560,5.523,561,5.523,562,4.795,563,2.954,564,3.271,565,3.271,566,3.271,567,4.761,568,3.794,569,3.794,570,3.794,571,3.794,572,1.816,573,1.676,574,1.816,575,1.816,576,2.333,577,2.333]],["component/32",[37,0.539]],["title/33-1",[201,14.919]],["name/33-1",[]],["text/33-1",[]],["component/33-1",[]],["title/33-2",[112,10.214,202,12.473]],["name/33-2",[]],["text/33-2",[]],["component/33-2",[]],["title/33",[1,7.299,12,14.179,52,11.45]],["name/33",[1,0.441,52,0.692,433,1.848]],["text/33",[1,1.476,2,1.159,12,2.659,15,1.625,22,0.979,26,1.538,36,1.809,38,0.788,40,0.788,41,1.859,49,1.679,50,2.386,52,2.623,63,1.605,86,3.42,88,1.07,92,4.345,95,2.227,124,1.859,132,0.966,134,2.057,157,1.385,167,1.785,174,0.793,191,2.335,197,4.446,209,2.924,216,1.881,224,3.566,229,1.26,237,0.854,238,1.325,239,0.899,240,0.876,241,0.899,242,0.972,243,1.085,244,1.117,245,1.085,246,1.117,248,1.622,260,1.698,263,0.793,264,0.793,265,0.941,286,1.698,299,3.227,303,5.962,344,1.185,345,1.213,346,1.252,347,1.252,368,3.104,375,4.446,384,1.508,434,1.398,435,2.613,436,1.622,437,1.293,438,2.15,439,1.719,440,2.613,441,2.613,442,2.613,443,2.34,444,2.34,445,6.404,446,2.613,447,4.964,448,3.807,449,6.404,450,4.052,451,4.052,452,4.052,453,3.362,454,4.052,455,5.592,456,2.249,457,4.052,458,6.905,459,5.592,460,6.404,461,4.052,462,4.052,463,4.052,464,4.052,465,4.052,466,4.052,467,4.964,468,4.052,469,1.293,470,1.293,471,1.293,472,1.222,473,1.385,474,1.437,475,1.698,476,1.698,477,1.698,478,1.785,479,1.885,480,2.004,481,1.885,482,1.785,483,2.613,484,2.34,485,2.613,486,2.613,487,4.052,488,2.613,489,2.613,490,2.613,491,2.613,492,2.613,493,4.052,494,4.052,495,4.052,496,2.613,497,2.613,498,2.613,499,2.613,500,2.613,501,2.613,502,2.15,503,2.34,504,2.613,505,2.34]],["component/33",[37,0.539]],["title/34-1",[201,14.919]],["name/34-1",[]],["text/34-1",[]],["component/34-1",[]],["title/34-2",[112,10.214,202,12.473]],["name/34-2",[]],["text/34-2",[]],["component/34-2",[]],["title/34",[1,8.788,578,30.547]],["name/34",[1,0.576,578,2.002]],["text/34",[1,1.691,12,1.835,15,1.003,34,2.5,37,0.328,38,0.438,40,0.438,44,0.506,47,2.43,50,1.473,52,1.832,75,1.667,79,1.537,86,1.281,88,1.809,94,1.272,95,1.56,112,0.622,126,1.608,127,3.102,129,1.865,132,1.633,133,1.243,159,2.059,162,2.378,174,1.909,191,2.515,206,1.048,220,2.677,223,1.162,224,2.023,229,2.045,232,4.983,237,0.475,238,1.281,239,1.134,240,1.105,241,1.134,242,0.54,243,0.603,244,0.621,245,0.603,246,1.07,256,1.048,263,0.441,264,0.441,335,1.048,339,1.301,344,0.659,368,1.389,369,1.195,371,1.805,372,1.662,384,1.444,434,2.096,439,2.169,453,1.504,456,1.389,472,1.171,533,5.313,538,1.114,540,1.71,544,1.919,578,4.408,579,1.195,580,1.453,581,4.4,582,1.919,583,1.919,584,1.627,585,1.919,586,3.51,587,1.919,588,4.19,589,2.502,590,2.502,591,3.005,592,7.294,593,5.263,594,7.294,595,2.502,596,3.51,597,4.383,598,2.502,599,3.918,600,2.502,601,2.502,602,3.224,603,2.502,604,4.633,605,2.502,606,2.502,607,3.51,608,2.502,609,2.502,610,3.51,611,3.51,612,2.502,613,2.502,614,6.441,615,3.51,616,3.224,617,2.242,618,2.502,619,4.829,620,3.299,621,3.918,622,3.732,623,3.918,624,3.224,625,3.918,626,3.51,627,2.502,628,2.502,629,3.296,630,2.502,631,3.296,632,1.453,633,2.502,634,2.502,635,2.502,636,2.502,637,2.502,638,2.331,639,1.919,640,2.502,641,2.059,642,1.453,643,1.453,644,1.453,645,1.453,646,1.195,647,1.301,648,1.453,649,1.453,650,1.453]],["component/34",[37,0.539]],["title/35-1",[201,14.919]],["name/35-1",[]],["text/35-1",[]],["component/35-1",[]],["title/35-2",[112,10.214,202,12.473]],["name/35-2",[]],["text/35-2",[]],["component/35-2",[]],["title/35",[178,18.364,651,27.722]],["name/35",[178,1.204,651,1.817]],["text/35",[1,1.473,2,1.874,11,0.915,15,1.954,22,1.825,27,1.377,38,0.618,40,0.618,41,1.457,50,1.206,60,3.668,61,2.096,62,1.301,67,2.93,81,5.007,86,1.049,88,2.357,91,1.231,95,2.137,97,2.096,110,3.095,121,1.522,124,3.006,129,4.106,132,2.598,133,2.289,140,1.194,148,1.625,153,1.106,157,1.086,162,1.478,172,2.87,174,1.013,178,3.324,191,1.797,207,1.206,216,0.951,223,1.962,229,1.516,237,0.67,238,1.092,239,0.705,240,0.687,241,0.705,242,0.762,262,1.457,263,0.622,264,0.622,265,0.737,306,3.237,309,1.546,371,4.566,372,3.19,380,1.986,429,1.986,431,1.258,456,1.853,513,1.793,520,3.963,542,2.52,579,1.686,581,4.707,583,2.561,584,4.114,585,5.021,587,5.021,638,4.004,641,2.748,651,5.2,652,1.793,653,1.793,654,2.303,655,2.697,656,2.303,657,2.923,658,2.303,659,1.382,660,2.303,661,1.986,662,5.481,663,7.361,664,3.755,665,2.923,666,3.237,667,3.755,668,3.755,669,4.752,670,4.752,671,4.752,672,4.752,673,4.752,674,4.752,675,4.752,676,3.414,677,3.755,678,3.755,679,1.793,680,1.793,681,3.679,682,2.303,683,2.303,684,1.986,685,2.303,686,4.097,687,2.303,688,2.145,689,1.655,690,3.755,691,2.303,692,2.303,693,2.303,694,2.303,695,2.303,696,2.303,697,2.303,698,2.303,699,1.546,700,2.303,701,2.303,702,2.303,703,2.303]],["component/35",[37,0.539]],["title/36-1",[2,18.227,154,33.2]],["name/36-1",[]],["text/36-1",[]],["component/36-1",[]],["title/36",[41,36.726]],["name/36",[3,2.076]],["text/36",[0,4.064,1,1.195,2,3.061,8,2.861,11,3.084,15,2.767,27,2.846,41,3.975,87,3.225,112,1.389,113,3.677,155,6.042,156,5.903,157,2.963,158,5.418,159,4.599,160,6.284,161,6.284,162,4.032,163,6.284,164,5.418,165,6.284,166,6.284,167,3.818,168,6.284,169,5.418,170,6.284,171,3.975,172,4.064]],["component/36",[37,0.539]],["title/37-1",[201,14.919]],["name/37-1",[]],["text/37-1",[]],["component/37-1",[]],["title/37-2",[112,10.214,202,12.473]],["name/37-2",[]],["text/37-2",[]],["component/37-2",[]],["title/37",[1,7.299,12,14.179,52,11.45]],["name/37",[1,0.441,52,0.692,433,1.848]],["text/37",[1,1.476,2,1.159,12,2.659,15,1.625,22,0.979,26,1.538,36,1.809,38,0.788,40,0.788,41,1.859,49,1.679,50,2.386,52,2.623,63,1.605,86,3.42,88,1.07,92,4.345,95,2.227,124,1.859,132,0.966,134,2.057,157,1.385,167,1.785,174,0.793,191,2.335,197,4.446,209,2.924,216,1.881,224,3.566,229,1.26,237,0.854,238,1.325,239,0.899,240,0.876,241,0.899,242,0.972,243,1.085,244,1.117,245,1.085,246,1.117,248,1.622,260,1.698,263,0.793,264,0.793,265,0.941,286,1.698,299,3.227,303,5.962,344,1.185,345,1.213,346,1.252,347,1.252,368,3.104,375,4.446,384,1.508,434,1.398,435,2.613,436,1.622,437,1.293,438,2.15,439,1.719,440,2.613,441,2.613,442,2.613,443,2.34,444,2.34,445,6.404,446,2.613,447,4.964,448,3.807,449,6.404,450,4.052,451,4.052,452,4.052,453,3.362,454,4.052,455,5.592,456,2.249,457,4.052,458,6.905,459,5.592,460,6.404,461,4.052,462,4.052,463,4.052,464,4.052,465,4.052,466,4.052,467,4.964,468,4.052,469,1.293,470,1.293,471,1.293,472,1.222,473,1.385,474,1.437,475,1.698,476,1.698,477,1.698,478,1.785,479,1.885,480,2.004,481,1.885,482,1.785,483,2.613,484,2.34,485,2.613,486,2.613,487,4.052,488,2.613,489,2.613,490,2.613,491,2.613,492,2.613,493,4.052,494,4.052,495,4.052,496,2.613,497,2.613,498,2.613,499,2.613,500,2.613,501,2.613,502,2.15,503,2.34,504,2.613,505,2.34]],["component/37",[37,0.539]],["title/38-1",[201,14.919]],["name/38-1",[]],["text/38-1",[]],["component/38-1",[]],["title/38-2",[112,10.214,202,12.473]],["name/38-2",[]],["text/38-2",[]],["component/38-2",[]],["title/38",[1,3.953,45,12.163,133,11.571,134,9.384,254,13.954,704,16.185,705,16.185]],["name/38",[133,0.63,134,0.848,254,1.261,705,1.463]],["text/38",[0,3.171,1,1.622,5,1.694,11,2.255,12,0.654,15,1.404,22,1.89,36,2.425,38,0.475,40,0.475,41,1.121,45,1.765,47,2.854,48,1.533,52,0.528,54,0.813,55,0.9,61,0.989,65,2.298,67,0.947,83,0.874,106,0.699,113,1.036,133,2.724,134,2.879,140,0.918,144,1.485,153,0.85,155,4.715,156,2.644,157,3.007,172,1.579,174,1.407,178,0.704,187,1.272,191,2.361,201,0.455,203,1.189,207,0.928,216,1.626,223,1.92,224,2.135,229,2.166,237,1.934,238,1.516,239,1.595,240,1.555,241,1.423,242,1.539,243,1.717,244,2.157,245,2.748,246,2.302,254,3.501,260,1.024,263,1.063,264,0.478,273,1.063,311,1.908,313,1.272,314,1.189,329,1.063,344,1.589,345,1.626,346,1.678,347,1.678,362,3.066,368,0.874,379,1.527,409,1.121,414,1.272,418,3.632,431,0.967,436,0.978,437,1.328,448,1.208,453,0.947,469,1.734,470,1.328,471,1.328,472,1.255,473,2.192,474,0.866,503,1.411,511,2.167,639,1.208,646,1.296,655,1.272,679,4.418,704,1.379,705,4.06,706,5.215,707,6.118,708,1.772,709,5.215,710,1.772,711,1.772,712,1.772,713,4.65,714,5.178,715,3.396,716,7.585,717,7.585,718,6.889,719,7.939,720,3.171,721,6.056,722,3.016,723,4.076,724,2.6,725,1.772,726,0.967,727,1.772,728,1.379,729,1.121,730,1.772,731,1.772,732,3.396,733,2.6,734,3.016,735,3.016,736,3.939,737,1.772,738,3.939,739,3.939,740,3.016,741,3.016,742,3.016,743,3.016,744,3.016,745,3.016,746,3.016,747,3.016,748,3.016,749,3.016,750,3.016,751,3.016,752,3.016,753,3.016,754,3.016,755,3.016,756,3.016,757,3.016,758,3.016,759,3.016,760,1.527,761,1.772,762,1.772,763,1.772,764,1.772,765,1.772,766,1.772,767,1.772,768,1.772,769,1.772,770,1.772,771,1.772,772,1.772,773,1.772,774,1.772,775,1.772,776,1.772,777,1.772,778,1.772,779,1.772,780,1.772]],["component/38",[37,0.539]],["title/39-1",[2,18.227,154,33.2]],["name/39-1",[]],["text/39-1",[]],["component/39-1",[]],["title/39",[42,48.652]],["name/39",[3,2.076]],["text/39",[0,4.14,2,3.118,3,3.082,8,2.949,11,3.142,15,2.819,42,5.429,45,3.79,53,3.082,112,1.432,113,3.79,155,6.156,156,5.966,157,3.054,158,5.585,172,4.14,173,6.478,174,1.748,175,5.585,176,3.027,177,6.478,178,2.574,179,6.478,180,6.478]],["component/39",[37,0.539]],["title/40-1",[2,18.227,154,33.2]],["name/40-1",[]],["text/40-1",[]],["component/40-1",[]],["title/40",[43,40.961]],["name/40",[3,2.076]],["text/40",[0,4.206,1,1.264,2,3.168,8,3.027,11,3.192,27,2.438,52,1.983,106,2.622,112,1.469,113,3.89,132,2.185,156,5.392,157,3.135,172,4.206,176,3.107,181,8.034,182,6.65,183,6.65,184,6.65,185,6.65,186,4.776,187,4.776]],["component/40",[37,0.539]],["title/41-1",[201,14.919]],["name/41-1",[]],["text/41-1",[]],["component/41-1",[]],["title/41-2",[112,10.214,202,12.473]],["name/41-2",[]],["text/41-2",[]],["component/41-2",[]],["title/41",[437,20.345,781,25.243]],["name/41",[437,1.333,781,1.654]],["text/41",[1,0.768,15,1.44,22,0.839,38,0.676,40,0.676,43,1.778,47,1.807,51,2.28,52,1.204,55,1.281,63,2.205,86,1.147,95,0.892,127,2.886,133,1.694,134,1.138,159,2.955,174,1.363,175,2.173,187,1.81,191,2.484,220,1.531,229,1.598,232,2.453,234,2.554,238,1.174,239,0.771,240,0.752,241,2.167,242,0.834,243,0.931,244,0.958,245,2.133,246,0.958,248,1.392,263,0.68,264,0.68,265,0.807,270,1.81,276,2.9,288,1.44,307,1.376,344,1.017,345,1.04,346,1.074,347,1.72,364,1.692,365,1.962,418,3.465,434,1.921,437,2.543,438,1.844,469,1.109,470,2.543,471,1.777,472,1.049,473,2.382,474,1.232,476,2.334,482,4.097,505,2.008,517,1.81,582,3.445,588,3.94,591,1.719,593,2.591,596,2.008,597,3.445,602,1.844,604,2.008,607,2.008,610,3.216,611,3.216,620,3.069,622,2.453,626,3.216,639,1.719,726,4.147,781,3.683,782,4.038,783,1.512,784,3.143,785,6.745,786,5.033,787,2.9,788,4.149,789,3.628,790,6.745,791,5.051,792,4.149,793,5.051,794,4.98,795,4.038,796,4.355,797,5.777,798,5.051,799,3.481,800,3.481,801,3.481,802,4.038,803,2.9,804,2.9,805,5.051,806,5.051,807,3.143,808,2.52,809,1.692,810,2.173,811,1.962,812,2.52,813,5.777,814,2.173,815,5.051,816,5.051,817,2.52,818,1.962,819,2.52,820,2.52,821,5.051,822,7.084,823,4.038,824,4.038,825,2.52,826,2.52,827,2.52,828,2.52,829,2.52,830,2.52,831,2.52,832,2.52,833,2.52,834,2.52,835,2.52,836,2.52,837,2.52,838,2.52,839,2.52,840,2.52,841,2.52,842,2.52,843,2.52,844,2.52,845,2.52,846,2.52,847,2.173,848,5.777]],["component/41",[37,0.539]],["title/42-1",[201,14.919]],["name/42-1",[]],["text/42-1",[]],["component/42-1",[]],["title/42-2",[112,10.214,202,12.473]],["name/42-2",[]],["text/42-2",[]],["component/42-2",[]],["title/42",[52,9.792,781,17.931,783,19.692,849,25.56]],["name/42",[52,0.56,781,1.026,783,1.127,849,1.463]],["text/42",[1,1.121,15,2.295,22,0.871,26,1.369,38,0.701,40,0.701,43,1.845,47,1.861,52,0.78,55,2.997,62,1.477,63,1.428,95,0.926,127,2.957,133,3.104,157,1.96,174,1.737,178,1.652,191,2.451,207,1.369,229,1.15,232,2.526,234,2.63,237,0.76,238,1.715,239,1.969,240,1.92,241,0.8,242,0.865,243,0.966,244,0.994,245,1.911,246,1.58,263,0.706,264,0.706,265,0.837,273,1.568,288,3.916,311,4.336,344,1.055,345,1.079,346,1.114,347,1.114,372,2.587,384,2.133,418,3.538,456,2.555,469,1.151,470,1.151,471,1.151,472,1.73,473,1.233,474,1.279,502,1.913,588,5.484,593,2.668,597,4.391,620,3.145,622,4.785,720,2.71,723,2.986,726,4.074,781,3.516,783,2.494,784,3.237,787,4.237,788,2.986,799,2.254,801,2.254,807,3.237,809,2.791,811,5.807,849,3.237,850,7.686,851,8.182,852,4.158,853,3.584,854,5.176,855,4.462,856,7.877,857,7.46,858,5.176,859,5.176,860,5.176,861,5.176,862,3.584,863,4.624,864,5.55]],["component/42",[37,0.539]],["title/43-1",[201,14.919]],["name/43-1",[]],["text/43-1",[]],["component/43-1",[]],["title/43-2",[112,10.214,202,12.473]],["name/43-2",[]],["text/43-2",[]],["component/43-2",[]],["title/43",[52,9.792,720,17.191,781,17.931,783,19.692]],["name/43",[52,0.56,720,0.984,781,1.026,783,1.127]],["text/43",[1,1.185,15,2.223,26,1.514,38,0.775,40,0.775,43,2.04,47,2.014,52,1.342,55,4.031,61,1.614,63,2.457,95,1.024,127,3.156,133,3.005,157,2.121,174,1.682,178,1.788,191,2.419,207,1.514,229,1.245,232,2.734,234,2.846,237,0.841,238,2.473,239,1.907,240,1.859,241,0.884,242,0.956,243,1.068,244,1.099,245,2.04,246,1.099,263,0.78,264,0.78,265,0.925,273,1.734,288,4.633,311,1.829,329,1.734,335,4,372,2.549,418,4.632,434,1.375,472,1.203,588,6.03,593,2.887,597,4.607,620,3.356,622,4.346,639,1.972,686,3.879,688,1.652,707,6.658,720,3.537,723,3.232,726,4.218,781,1.579,783,3.313,784,3.503,787,2.076,788,3.232,807,3.503,809,5.013,810,5.375,811,6.176,853,2.492,862,3.879,863,4.852,864,5.824,865,6.235,866,2.251,867,1.94,868,5.525,869,5.525,870,5.525]],["component/43",[37,0.539]],["title/44-1",[201,14.919]],["name/44-1",[]],["text/44-1",[]],["component/44-1",[]],["title/44-2",[112,10.214,202,12.473]],["name/44-2",[]],["text/44-2",[]],["component/44-2",[]],["title/44",[198,41.702]],["name/44",[198,3.135]],["text/44",[1,1.346,3,0.986,11,2.444,17,3.292,22,1.47,27,2.39,37,0.691,38,0.556,40,0.556,44,0.642,50,2.691,51,1.17,53,2.1,55,1.053,60,1.715,61,1.921,67,1.108,75,1.227,78,1.699,81,2.038,86,2.967,87,3.344,88,2.24,91,1.108,116,3.698,117,3.838,121,1.369,125,2.274,127,2.521,132,2.791,133,0.695,134,1.553,137,1.736,138,1.578,140,1.074,174,1.387,178,2.444,191,2.423,193,0.935,194,3.17,198,6.305,201,0.532,216,2.816,223,1.421,229,1.221,237,0.602,238,1.283,239,1.572,240,1.316,241,1.35,242,1.46,243,1.63,244,1.677,245,1.63,246,1.677,251,1.613,263,0.929,264,0.559,265,0.663,344,1.78,345,0.855,346,0.883,347,0.883,362,5.962,418,2.064,420,1.613,438,1.516,448,1.413,456,1.699,469,0.912,470,0.912,471,0.912,472,0.862,484,1.651,512,2.31,520,3.221,581,5.271,583,2.347,638,3.609,651,3.42,680,2.679,714,3.436,786,4.123,789,3.17,863,2.472,871,2.072,872,2.072,873,2.072,874,2.072,875,4.413,876,4.413,877,2.072,878,2.072,879,2.072,880,5.702,881,2.072,882,2.072,883,3.441,884,4.916,885,4.001,886,5.139,887,3.441,888,6.151,889,4.413,890,4.413,891,2.679,892,2.679,893,4.413,894,3.441,895,7.659,896,6.151,897,6.151,898,3.441,899,4.413,900,2.967,901,5.702,902,2.072,903,5.702,904,4.413,905,4.413,906,3.441,907,2.072,908,2.072,909,2.072,910,2.072,911,2.072,912,2.072]],["component/44",[37,0.539]],["title/45-1",[201,14.919]],["name/45-1",[]],["text/45-1",[]],["component/45-1",[]],["title/45-2",[112,10.214,202,12.473]],["name/45-2",[]],["text/45-2",[]],["component/45-2",[]],["title/45",[27,14.078,106,15.14,913,29.889]],["name/45",[913,3.398]],["text/45",[1,1.615,2,1.275,15,1.748,22,1.633,26,1.693,27,1.798,38,0.867,40,0.867,44,1.002,77,2.463,88,2.723,91,1.728,106,2.336,129,3.326,132,2.694,133,1.084,134,1.459,140,2.541,148,2.281,172,2.567,174,1.784,178,2.627,191,2.318,216,1.334,223,2.024,229,2.214,237,0.94,238,1.922,240,0.964,263,0.872,264,0.872,265,1.035,309,3.291,372,3.021,392,5.582,431,1.765,434,1.538,439,1.891,444,3.906,520,4.192,584,4.628,659,1.939,676,4.255,884,6.902,885,3.817,913,6.382,914,4.903,915,7.655,916,5.923,917,3.233,918,3.233,919,6.611,920,8.801,921,8.611,922,5.923,923,5.923,924,4.903,925,5.923,926,6.611,927,6.611,928,3.233]],["component/45",[37,0.539]],["title/46-1",[201,14.919]],["name/46-1",[]],["text/46-1",[]],["component/46-1",[]],["title/46-2",[112,10.214,202,12.473]],["name/46-2",[]],["text/46-2",[]],["component/46-2",[]],["title/46",[27,9.335,106,10.04,803,18.287,929,19.819,930,19.819,931,19.819]],["name/46",[106,0.623,803,1.135,929,1.23,930,1.23,931,1.23]],["text/46",[1,0.789,38,0.7,40,0.7,44,0.809,45,2.429,52,1.918,55,1.326,62,1.473,70,2.186,80,4.157,174,0.704,189,5.803,191,2.52,218,4.316,220,3.14,229,1.63,232,3.579,234,3.727,235,4.586,237,0.759,238,0.759,239,0.798,240,1.541,241,0.798,242,0.863,243,0.964,244,0.992,245,0.964,246,0.992,263,0.704,264,0.704,265,0.835,307,1.425,344,2.897,345,2.134,346,1.112,347,1.112,372,2.71,384,2.13,436,2.292,469,1.148,470,1.148,471,1.148,472,1.086,473,1.23,474,1.276,511,1.874,512,1.751,540,3.14,563,3.231,593,3.78,615,5.455,617,3.306,728,2.031,803,5.772,867,2.786,929,6.366,930,6.366,931,3.231,932,2.249,933,5.354,934,2.609,935,4.151,936,5.891,937,5.169,938,4.151,939,4.151,940,6.849,941,6.849,942,4.151,943,6.426,944,4.151,945,7.454,946,4.151,947,6.849,948,4.151,949,5.169,950,5.169,951,5.169,952,4.151,953,4.151,954,4.151,955,6.849,956,5.169,957,5.169,958,5.169,959,4.151,960,5.169,961,2.609,962,2.609,963,2.609,964,5.079,965,2.609,966,4.151,967,2.609,968,4.151,969,2.609,970,2.609,971,2.609,972,2.609]],["component/46",[37,0.539]],["title/47-1",[201,14.919]],["name/47-1",[]],["text/47-1",[]],["component/47-1",[]],["title/47-2",[112,10.214,202,12.473]],["name/47-2",[]],["text/47-2",[]],["component/47-2",[]],["title/47",[95,11.625,130,18.542,456,16.207,520,17.191]],["name/47",[130,1.31,456,1.145,520,1.214]],["text/47",[1,1.685,11,2.34,15,2.386,27,0.806,38,0.59,40,0.59,44,0.681,47,3.335,64,1.14,67,1.175,88,2.144,126,3.045,129,4.057,130,4.853,132,1.752,133,1.543,140,1.873,174,1.886,178,2.777,191,2.45,218,4.691,223,2.885,229,1.474,237,0.639,238,0.639,239,0.673,240,0.656,241,0.673,242,0.727,262,1.391,263,0.593,264,0.593,265,0.704,273,1.319,334,1.712,358,2.814,372,3.043,393,4.005,419,2.814,436,1.214,437,1.591,456,4.417,513,1.712,520,4.947,583,2.465,616,5.114,638,2.819,932,3.116,973,8.276,974,6.025,975,6.989,976,6.691,977,6.691,978,7.452,979,3.614,980,3.614,981,3.614,982,3.614,983,2.426,984,3.116,985,4.595,986,5.459,987,6.332,988,3.305,989,3.614,990,5.889,991,2.199,992,2.199,993,2.199,994,1.896]],["component/47",[37,0.539]],["title/48-1",[201,14.919]],["name/48-1",[]],["text/48-1",[]],["component/48-1",[]],["title/48-2",[112,10.214,202,12.473]],["name/48-2",[]],["text/48-2",[]],["component/48-2",[]],["title/48",[34,23.256,995,39.848]],["name/48",[34,1.167,171,1.467,996,2]],["text/48",[1,1.194,22,0.637,34,1.619,38,0.513,40,0.513,44,0.592,80,5.144,86,2.224,97,1.067,133,0.641,171,3.09,174,0.868,191,2.582,229,2.108,237,0.556,238,0.935,239,0.984,240,1.242,241,1.274,242,1.616,243,1.804,244,1.223,245,1.188,246,1.223,263,0.516,264,0.516,265,0.612,299,1.86,307,1.044,344,1.97,345,1.719,346,1.371,347,1.371,364,1.283,372,1.843,384,3.741,434,0.909,469,1.416,470,0.841,471,0.841,472,0.795,473,0.901,474,0.935,477,1.105,482,1.161,517,2.311,518,1.648,525,4.211,573,1.373,728,3.242,866,2.504,867,3.658,995,6.891,996,2.773,997,3.591,998,2.773,999,3.591,1000,4.165,1001,4.165,1002,5.906,1003,1.912,1004,6.436,1005,7.258,1006,7.197,1007,4.699,1008,4.699,1009,4.699,1010,4.699,1011,4.699,1012,4.699,1013,4.699,1014,4.699,1015,4.211,1016,7.416,1017,6.595,1018,8.602,1019,6.281,1020,5.45,1021,5.45,1022,3.217,1023,4.165,1024,3.217,1025,4.165,1026,3.217,1027,3.509,1028,3.217,1029,1.912,1030,1.648,1031,3.217,1032,1.912,1033,1.488,1034,1.488,1035,1.912,1036,1.912,1037,1.912,1038,1.912]],["component/48",[37,0.539]],["title/49-1",[178,15.254,720,20.102,1039,27.578]],["name/49-1",[]],["text/49-1",[]],["component/49-1",[]],["title/49-2",[178,15.254,720,20.102,1040,25.77]],["name/49-2",[]],["text/49-2",[]],["component/49-2",[]],["title/49-3",[1041,50.053]],["name/49-3",[]],["text/49-3",[]],["component/49-3",[]],["title/49-4",[201,14.919]],["name/49-4",[]],["text/49-4",[]],["component/49-4",[]],["title/49-5",[112,10.214,202,12.473]],["name/49-5",[]],["text/49-5",[]],["component/49-5",[]],["title/49",[178,13.045,720,17.191,1039,23.584,1040,22.038]],["name/49",[720,1.214,1039,1.666,1040,1.557]],["text/49",[1,1.107,2,1.152,15,1.456,22,1.184,27,0.79,38,0.323,40,0.323,44,0.373,47,1.59,49,0.688,51,0.68,52,0.642,95,0.427,127,2.591,133,1.192,134,0.544,153,1.402,157,1.377,164,1.039,172,3.049,174,1.102,178,2.314,191,1.651,207,1.128,218,0.809,229,2.047,237,1.319,250,0.938,257,0.865,260,0.697,262,1.363,263,0.325,264,0.325,265,0.386,270,1.547,276,1.547,288,0.688,311,0.762,324,1.039,418,3.157,434,1.691,437,1.798,439,1.709,478,0.732,481,1.382,502,0.882,512,2.741,544,0.822,567,5.021,620,3.924,659,0.723,665,1.677,689,0.865,720,3.972,724,1.857,726,0.658,729,0.762,814,3.521,866,1.677,892,1.677,988,2.098,998,1.039,1030,3.521,1039,2.934,1040,3.306,1041,1.857,1042,2.921,1043,1.857,1044,1.205,1045,1.205,1046,1.205,1047,1.205,1048,2.154,1049,1.205,1050,1.205,1051,1.039,1052,1.205,1053,1.039,1054,1.205,1055,1.205,1056,1.205,1057,5.561,1058,1.205,1059,1.205,1060,1.205,1061,2.934,1062,1.205,1063,5.264,1064,2.154,1065,5.264,1066,5.264,1067,6.269,1068,5.824,1069,4.538,1070,5.264,1071,5.264,1072,5.264,1073,6.631,1074,9.121,1075,8.995,1076,8.995,1077,4.084,1078,4.084,1079,4.084,1080,4.084,1081,4.084,1082,4.084,1083,4.084,1084,5.824,1085,4.084,1086,4.084,1087,3.521,1088,4.084,1089,4.084,1090,4.084,1091,4.084,1092,4.084,1093,4.084,1094,4.084,1095,4.084,1096,4.084,1097,4.084,1098,4.084,1099,3.521,1100,4.084,1101,4.084,1102,4.084,1103,4.084,1104,4.084,1105,4.084,1106,4.084,1107,4.084,1108,4.084,1109,4.084,1110,4.084,1111,4.084,1112,4.084,1113,4.084,1114,4.084,1115,4.084,1116,4.084,1117,4.084,1118,4.084,1119,4.084,1120,4.084,1121,4.084,1122,4.084,1123,4.084,1124,4.084,1125,4.084,1126,4.084,1127,4.084,1128,3.554,1129,3.554,1130,7.063,1131,6.059,1132,2.154,1133,2.154,1134,2.921,1135,1.205,1136,1.039,1137,1.205,1138,2.154,1139,1.205,1140,1.205,1141,1.205,1142,1.039,1143,1.205,1144,1.205,1145,1.205,1146,1.039,1147,1.039,1148,1.039,1149,1.205,1150,1.205]],["component/49",[37,0.539]],["title/50-1",[201,14.919]],["name/50-1",[]],["text/50-1",[]],["component/50-1",[]],["title/50-2",[112,10.214,202,12.473]],["name/50-2",[]],["text/50-2",[]],["component/50-2",[]],["title/50",[688,33.168]],["name/50",[688,2.493]],["text/50",[1,1.729,15,2.447,22,1.84,38,0.626,40,0.626,44,0.723,63,3.906,65,1.778,78,3.388,86,3.256,88,2.767,110,2.143,128,6.783,129,3.824,132,3,133,1.272,174,1.49,191,1.947,209,1.497,218,2.547,220,3.355,223,2.28,237,0.678,238,1.103,239,1.161,240,1.131,241,1.161,263,0.63,264,0.63,265,0.747,368,1.152,371,3.543,372,2.699,392,1.676,393,4.678,404,3.494,414,1.676,419,1.816,425,2.012,456,3.531,520,3.745,534,7.591,540,2.305,584,3.193,638,3.784,679,1.816,681,1.566,688,4.609,699,1.566,726,3.016,729,1.476,809,4.371,867,3.707,885,4.299,985,3.271,986,2.012,994,2.012,1040,1.566,1151,3.794,1152,5.523,1153,5.523,1154,4.299,1155,4.795,1156,8.806,1157,5.523,1158,7.395,1159,6.077,1160,6.512,1161,4.299,1162,3.794,1163,2.333,1164,2.333,1165,2.012,1166,2.012,1167,1.816,1168,2.333]],["component/50",[37,0.539]],["title/51-1",[2,18.227,154,33.2]],["name/51-1",[]],["text/51-1",[]],["component/51-1",[]],["title/51",[44,17.992]],["name/51",[3,2.076]],["text/51",[0,4.341,2,2.996,8,2.764,11,3.294,34,3.055,39,2.587,53,2.889,54,2.788,60,3.026,66,6.316,110,3.429,112,1.342,113,3.552,117,3.788,121,4.013,156,5.565,157,2.863,167,3.689,172,3.978,176,3.55,188,6.072,189,4.727,190,6.55,191,1.599,192,6.072,193,3.429,194,4.361,195,6.072,196,6.072,197,4.837,198,4.361,199,6.072,200,6.072]],["component/51",[37,0.539]],["title/52-1",[201,14.919]],["name/52-1",[]],["text/52-1",[]],["component/52-1",[]],["title/52-2",[112,10.214,202,12.473]],["name/52-2",[]],["text/52-2",[]],["component/52-2",[]],["title/52",[132,9.426,133,9.617,176,13.402,193,12.946,1169,18.142]],["name/52",[133,0.63,176,0.878,193,0.848,1169,1.189]],["text/52",[1,1.36,8,0.825,15,2.551,22,1.334,26,0.949,27,2.462,38,0.486,40,0.486,44,0.562,51,1.737,53,1.463,60,1.533,62,1.023,78,2.33,81,1.822,83,0.895,87,0.93,88,1.459,95,0.642,97,1.012,102,2.076,106,2.956,121,1.198,129,3.771,132,1.551,133,1.583,134,0.818,140,0.939,153,0.87,171,1.146,174,1.55,176,4.161,178,1.875,191,2.526,193,3.23,194,2.877,209,2.57,216,0.748,223,2.182,229,1.306,237,1.781,238,1.67,239,1.757,240,1.713,241,0.941,242,0.6,243,0.669,244,0.689,245,0.669,246,0.689,248,1.001,260,3.055,263,0.489,264,0.83,265,1.511,279,1.411,286,1.048,299,3.32,309,2.064,329,1.087,342,1.302,344,0.731,345,0.748,346,0.772,347,0.772,372,2.534,393,3.633,405,1.411,423,1.411,426,1.411,436,1.001,437,0.798,469,0.798,470,0.798,471,0.798,472,0.754,473,0.854,474,0.886,475,1.048,476,1.048,477,1.048,478,1.101,479,1.163,520,1.61,542,2.064,584,1.778,587,2.098,624,1.326,638,1.627,651,1.845,652,1.411,655,1.302,657,1.411,681,2.064,689,2.209,699,2.689,723,2.209,786,4.741,983,2.064,1051,1.562,1146,1.562,1154,1.411,1169,4.075,1170,2.651,1171,1.562,1172,1.562,1173,3.454,1174,1.411,1175,1.411,1176,1.562,1177,1.562,1178,1.562,1179,1.562,1180,1.562,1181,1.562,1182,1.562,1183,1.562,1184,6.695,1185,7.766,1186,2.651,1187,4.069,1188,1.562,1189,1.411,1190,1.562,1191,4.069,1192,4.952,1193,6.461,1194,2.651,1195,2.651,1196,6.695,1197,3.075,1198,6.443,1199,5.744,1200,2.651,1201,3.075,1202,4.72,1203,3.075,1204,3.075,1205,1.562,1206,1.812,1207,1.812,1208,1.562,1209,1.562,1210,1.562,1211,1.411,1212,1.562,1213,1.411,1214,1.812,1215,1.812,1216,1.812,1217,1.562]],["component/52",[37,0.539]],["title/53-1",[201,14.919]],["name/53-1",[]],["text/53-1",[]],["component/53-1",[]],["title/53-2",[112,10.214,202,12.473]],["name/53-2",[]],["text/53-2",[]],["component/53-2",[]],["title/53",[176,15.343,193,14.82,983,22.038,1174,25.56]],["name/53",[176,0.878,193,0.848,729,1.189,1169,1.189]],["text/53",[1,1.426,8,0.549,12,0.445,15,2.304,22,0.718,26,0.631,27,1.499,38,0.323,40,0.323,44,0.374,51,1.217,52,0.36,53,1.026,54,0.554,60,0.601,62,0.681,64,2.118,78,2.24,81,1.277,83,0.595,87,0.619,88,2.122,89,0.919,91,1.152,95,0.763,97,0.673,99,2.35,102,1.117,106,2.734,129,2.932,132,1.829,133,2.103,140,0.625,153,0.579,171,1.364,174,1.421,176,4.015,178,1.161,191,2.573,193,3.244,194,3.996,209,1.876,211,0.939,216,0.498,223,2.034,224,0.99,229,1.457,237,0.351,238,1.531,239,1.611,240,1.47,241,0.894,242,0.713,243,0.796,244,0.819,245,0.796,246,0.819,248,1.19,257,0.866,260,3.044,263,0.325,264,0.582,265,1.138,266,0.763,279,0.939,286,0.697,299,2.363,309,0.81,329,0.723,342,0.866,344,0.87,345,0.89,346,0.918,347,0.918,352,1.04,360,1.859,368,1.064,372,2.287,392,1.548,393,4.087,408,1.859,409,0.763,423,0.939,426,0.939,431,1.177,436,0.666,453,1.901,469,0.949,470,0.949,471,0.949,472,0.897,473,1.016,474,1.054,475,1.246,476,1.246,477,1.246,478,1.31,479,1.383,480,1.47,481,1.383,482,1.31,521,1.678,524,1.04,531,2.52,542,0.81,564,1.859,566,3.066,572,1.678,573,1.548,574,1.678,575,1.678,584,1.246,616,1.578,624,0.883,638,3.509,651,1.293,652,0.939,657,0.939,659,0.723,665,1.678,666,1.859,676,2.1,681,1.447,688,0.689,689,1.548,699,1.962,729,2.585,786,4.087,847,1.04,915,1.859,983,1.447,1033,1.678,1034,1.678,1154,0.939,1169,4.95,1170,1.859,1171,1.04,1172,1.04,1173,2.52,1174,1.678,1175,0.939,1176,1.04,1177,1.04,1178,1.04,1179,1.04,1180,1.04,1181,1.04,1182,1.04,1183,1.04,1184,6.292,1186,1.859,1187,4.248,1188,1.04,1189,0.939,1190,1.04,1191,4.248,1192,3.523,1193,5.978,1194,1.859,1195,1.859,1196,5.719,1200,2.52,1208,1.04,1209,1.04,1210,1.04,1212,1.04,1213,0.939,1218,1.859,1219,2.156,1220,4.087,1221,2.156,1222,2.156,1223,2.156,1224,2.156,1225,3.556,1226,3.556,1227,3.556,1228,3.556,1229,2.156,1230,3.556,1231,3.556,1232,2.156,1233,2.156,1234,2.156,1235,2.156,1236,2.156,1237,2.156,1238,2.156,1239,1.206,1240,1.206,1241,4.087,1242,4.087,1243,4.087,1244,2.156,1245,1.206,1246,1.206,1247,1.206,1248,1.206,1249,1.04,1250,1.206,1251,1.206]],["component/53",[37,0.539]],["title/54-1",[201,14.919]],["name/54-1",[]],["text/54-1",[]],["component/54-1",[]],["title/54-2",[112,10.214,202,12.473]],["name/54-2",[]],["text/54-2",[]],["component/54-2",[]],["title/54",[34,23.256,1252,39.848]],["name/54",[34,1.167,1253,2,1254,2]],["text/54",[1,1.154,3,1.309,15,2.164,22,0.917,27,1.009,34,2.178,38,0.738,40,0.738,44,0.853,63,1.503,80,4.944,86,1.971,115,2.096,133,0.923,134,1.242,174,0.743,191,2.567,223,1.787,229,1.825,237,0.8,238,0.8,239,0.842,240,0.821,241,2.144,242,0.91,243,1.016,244,1.046,245,1.016,246,1.046,263,0.743,264,0.743,265,0.881,280,2.372,299,2.503,344,2.662,345,1.136,346,1.172,347,1.172,372,1.634,416,2.372,434,1.309,469,1.211,470,1.211,471,1.211,732,3.732,867,3.592,997,2.372,999,2.372,1004,6.041,1005,4.614,1006,4.614,1007,4.614,1008,4.614,1009,4.614,1010,4.614,1011,4.614,1012,4.614,1013,4.614,1014,4.614,1015,3.732,1016,7.553,1061,3.11,1069,5.232,1189,3.37,1213,2.142,1252,7.418,1253,3.732,1254,5.232,1255,2.752,1256,2.752,1257,2.752,1258,2.752,1259,4.329,1260,2.752,1261,4.329,1262,7.008,1263,5.352,1264,7.008,1265,5.352,1266,5.352,1267,5.352,1268,5.352,1269,5.352,1270,4.329,1271,4.329,1272,4.329,1273,6.069,1274,6.069,1275,4.329,1276,4.329,1277,4.329,1278,4.329,1279,2.752,1280,2.752,1281,2.752,1282,2.752,1283,2.752]],["component/54",[37,0.539]],["title/55-1",[201,14.919]],["name/55-1",[]],["text/55-1",[]],["component/55-1",[]],["title/55-2",[112,10.214,202,12.473]],["name/55-2",[]],["text/55-2",[]],["component/55-2",[]],["title/55",[186,27.578,224,17.63,437,16.899]],["name/55",[224,2.004]],["text/55",[1,1.589,11,0.56,12,0.52,15,1.614,16,2.073,22,0.469,27,0.517,38,0.378,40,0.378,44,0.437,47,1.78,48,2.021,53,1.177,54,0.647,60,1.233,76,0.994,81,1.465,83,0.695,88,1.959,91,1.322,95,2.297,102,0.73,106,1.786,111,2.073,128,3.8,129,3.365,130,3.879,131,4.238,132,2.403,133,1.804,153,1.588,172,3.951,174,1.897,186,1.012,191,2.387,216,2.359,220,2.416,223,2.585,224,3.413,226,2.857,229,1.581,237,0.41,238,1.821,239,1.646,240,1.604,241,1.646,242,1.651,243,1.672,244,1.512,245,0.914,246,0.94,248,2.754,256,0.904,263,0.38,264,0.668,290,1.777,311,0.891,314,0.945,344,0.568,345,0.581,346,0.6,347,0.6,368,1.221,371,1.587,372,2.955,404,1.565,409,0.891,420,1.097,428,2.133,431,2.172,437,0.62,453,1.322,456,1.221,469,0.62,470,0.62,471,0.62,472,0.586,473,0.664,474,0.689,475,2.884,476,0.814,477,0.814,478,0.856,479,0.904,480,0.961,481,0.904,482,0.856,512,1.66,520,3.502,530,1.926,542,1.66,549,1.214,572,1.097,573,1.012,574,1.097,575,1.097,581,2.416,582,4.685,584,1.43,586,1.97,591,3.089,638,3.719,647,1.122,651,1.484,655,1.012,659,0.845,681,1.66,688,2.272,715,1.214,729,2.516,733,4.927,786,4.625,789,1.777,818,1.097,863,1.777,891,1.926,900,2.133,983,1.66,984,1.214,1033,1.097,1034,1.097,1087,1.214,1099,1.214,1161,3.097,1175,1.097,1211,1.097,1218,1.214,1284,7.546,1285,2.474,1286,1.409,1287,2.474,1288,5.379,1289,5.379,1290,3.978,1291,3.307,1292,6.006,1293,5.715,1294,2.474,1295,6.006,1296,3.978,1297,6.006,1298,4.989,1299,3.978,1300,2.474,1301,2.474,1302,2.474,1303,3.978,1304,3.978,1305,2.474,1306,2.474,1307,2.133,1308,2.474,1309,2.474,1310,2.474,1311,2.474,1312,2.474,1313,2.474,1314,5.715,1315,3.978,1316,2.474,1317,6.689,1318,7.031,1319,2.474,1320,2.133,1321,2.474,1322,1.409,1323,1.409,1324,1.409,1325,2.133,1326,2.474,1327,1.409,1328,1.214,1329,1.409,1330,1.409,1331,1.409,1332,1.409,1333,1.409,1334,1.097]],["component/55",[37,0.539]],["title/56-1",[201,14.919]],["name/56-1",[]],["text/56-1",[]],["component/56-1",[]],["title/56-2",[112,10.214,202,12.473]],["name/56-2",[]],["text/56-2",[]],["component/56-2",[]],["title/56",[117,23.953,167,23.325,193,17.33]],["name/56",[117,1.447,167,1.409,193,1.047]],["text/56",[1,1.731,27,1.432,38,1.047,40,1.047,44,1.21,50,4.428,75,4.294,78,1.927,88,3.225,102,2.024,106,1.54,124,2.47,132,2.97,134,3.47,136,2.755,162,3.618,167,4.404,174,1.786,191,2.11,193,3.616,216,1.612,229,1.56,237,1.135,238,1.135,263,1.054,264,1.054,265,1.25,273,2.342,288,3.222,384,2.004,434,1.858,436,2.156,620,3.426,622,4.021,641,4.127,794,4.862,974,4.862,1334,4.39,1335,8.456,1336,5.639,1337,8.26,1338,5.639,1339,8.748,1340,5.639,1341,5.639,1342,5.639,1343,7.688,1344,5.639,1345,5.639,1346,5.639,1347,5.639,1348,3.366]],["component/56",[37,0.539]],["title/57-1",[201,14.919]],["name/57-1",[]],["text/57-1",[]],["component/57-1",[]],["title/57-2",[112,10.214,202,12.473]],["name/57-2",[]],["text/57-2",[]],["component/57-2",[]],["title/57",[71,25.012,110,18.542,1349,28.306,1350,32.834]],["name/57",[71,2.308,1351,2.611]],["text/57",[1,1.362,6,6.656,38,1.485,40,1.485,44,1.716,52,1.651,64,2.87,79,3.024,110,3.127,191,2.211,223,2.286,229,1.982,233,6.177,234,4.532,235,5.577,237,1.61,263,1.494,264,1.494,265,1.773,288,4.537,291,4.311,318,5.146,345,2.286,365,4.311,540,3.364,1043,4.774,1061,3.977,1349,6.177,1351,6.847,1352,5.538,1353,7.165,1354,7.943,1355,7.165,1356,6.847,1357,7.943,1358,5.538,1359,5.538,1360,5.538,1361,5.538,1362,5.538,1363,5.538,1364,4.774]],["component/57",[37,0.539]],["title/58-1",[201,14.919]],["name/58-1",[]],["text/58-1",[]],["component/58-1",[]],["title/58-2",[112,10.214,202,12.473]],["name/58-2",[]],["text/58-2",[]],["component/58-2",[]],["title/58",[206,24.633,229,10.62,437,16.899]],["name/58",[206,1.944,229,0.838]],["text/58",[1,1.657,22,2.264,38,1.371,40,1.371,44,1.584,60,2.547,62,2.886,63,2.791,64,2.648,73,4.282,95,1.809,97,2.853,132,1.68,134,3.068,169,4.405,174,2.287,191,2.143,206,3.279,207,2.676,229,2.46,230,4.882,237,1.486,238,2.221,239,1.563,240,1.524,241,1.563,263,1.379,264,1.379,265,1.636,307,2.791,437,2.992,439,3.977,473,2.409,475,2.954,507,3.43,540,3.104,591,3.485,646,3.74,892,3.978,1142,4.405,1161,6.598,1167,3.978,1211,3.978,1249,4.405,1365,7.637,1366,5.11,1367,6.797,1368,7.637,1369,5.11,1370,5.11,1371,5.11]],["component/58",[37,0.539]],["title/59-1",[201,14.919]],["name/59-1",[]],["text/59-1",[]],["component/59-1",[]],["title/59-2",[112,10.214,202,12.473]],["name/59-2",[]],["text/59-2",[]],["component/59-2",[]],["title/59",[1,8.788,578,30.547]],["name/59",[1,0.576,578,2.002]],["text/59",[1,1.691,12,1.835,15,1.003,34,2.5,37,0.328,38,0.438,40,0.438,44,0.506,47,2.43,50,1.473,52,1.832,75,1.667,79,1.537,86,1.281,88,1.809,94,1.272,95,1.56,112,0.622,126,1.608,127,3.102,129,1.865,132,1.633,133,1.243,159,2.059,162,2.378,174,1.909,191,2.515,206,1.048,220,2.677,223,1.162,224,2.023,229,2.045,232,4.983,237,0.475,238,1.281,239,1.134,240,1.105,241,1.134,242,0.54,243,0.603,244,0.621,245,0.603,246,1.07,256,1.048,263,0.441,264,0.441,335,1.048,339,1.301,344,0.659,368,1.389,369,1.195,371,1.805,372,1.662,384,1.444,434,2.096,439,2.169,453,1.504,456,1.389,472,1.171,533,5.313,538,1.114,540,1.71,544,1.919,578,4.408,579,1.195,580,1.453,581,4.4,582,1.919,583,1.919,584,1.627,585,1.919,586,3.51,587,1.919,588,4.19,589,2.502,590,2.502,591,3.005,592,7.294,593,5.263,594,7.294,595,2.502,596,3.51,597,4.383,598,2.502,599,3.918,600,2.502,601,2.502,602,3.224,603,2.502,604,4.633,605,2.502,606,2.502,607,3.51,608,2.502,609,2.502,610,3.51,611,3.51,612,2.502,613,2.502,614,6.441,615,3.51,616,3.224,617,2.242,618,2.502,619,4.829,620,3.299,621,3.918,622,3.732,623,3.918,624,3.224,625,3.918,626,3.51,627,2.502,628,2.502,629,3.296,630,2.502,631,3.296,632,1.453,633,2.502,634,2.502,635,2.502,636,2.502,637,2.502,638,2.331,639,1.919,640,2.502,641,2.059,642,1.453,643,1.453,644,1.453,645,1.453,646,1.195,647,1.301,648,1.453,649,1.453,650,1.453]],["component/59",[37,0.539]],["title/60-1",[201,14.919]],["name/60-1",[]],["text/60-1",[]],["component/60-1",[]],["title/60-2",[112,10.214,202,12.473]],["name/60-2",[]],["text/60-2",[]],["component/60-2",[]],["title/60",[27,9.335,106,10.04,726,13.904,792,18.287,804,18.287,933,18.287]],["name/60",[106,0.623,726,0.863,792,1.135,804,1.135,933,1.135]],["text/60",[1,0.972,38,1.371,40,1.371,44,1.584,52,1.524,60,2.547,117,5.079,174,1.379,186,3.67,187,3.67,191,2.496,229,2.113,238,1.486,239,1.563,240,1.524,241,1.563,242,1.691,245,1.887,263,1.379,264,1.379,265,2.176,307,2.791,364,3.43,372,1.928,384,3.488,544,3.485,563,3.978,726,2.791,787,3.67,788,3.67,792,5.486,800,4.405,804,5.486,891,3.978,933,5.847,943,7.018,964,4.405,1348,5.86,1372,5.11,1373,7.637,1374,8.14,1375,6.797,1376,6.797,1377,6.797,1378,5.11,1379,5.11]],["component/60",[37,0.539]],["title/61-1",[201,14.919]],["name/61-1",[]],["text/61-1",[]],["component/61-1",[]],["title/61-2",[112,10.214,202,12.473]],["name/61-2",[]],["text/61-2",[]],["component/61-2",[]],["title/61",[132,12.619,372,14.487,539,27.578]],["name/61",[132,0.762,372,0.875,539,1.666]],["text/61",[1,1.559,2,2.234,8,1.37,15,1.073,16,3.889,22,2.292,34,1.514,38,0.807,40,0.807,44,0.932,49,1.719,50,1.575,61,1.68,67,1.608,81,4.306,88,2.063,95,2.006,106,2.234,129,4.446,132,2.82,133,2.937,140,1.559,148,2.123,174,1.719,191,2.159,216,1.242,223,1.916,229,1.762,237,0.875,238,2.001,239,1.733,240,1.384,241,1.42,250,2.342,251,2.342,263,0.812,264,0.812,265,0.963,277,2.594,286,2.683,290,4.574,294,2.594,307,1.643,318,5.621,325,4.884,372,3.305,404,1.903,434,1.431,448,3.165,511,2.161,539,5.443,579,2.202,581,2.819,582,4.693,585,4.693,638,2.997,659,1.804,1147,4.001,1166,2.594,1167,2.342,1356,4.884,1364,2.594,1380,3.008,1381,7.578,1382,6.369,1383,5.666,1384,5.666,1385,5.666,1386,5.666,1387,5.666,1388,5.666,1389,5.666,1390,5.666,1391,5.666,1392,4.641,1393,4.641,1394,4.641,1395,4.641,1396,3.008,1397,2.594,1398,3.008,1399,3.008,1400,3.008,1401,3.008,1402,3.008,1403,3.008]],["component/61",[37,0.539]],["title/62-1",[201,14.919]],["name/62-1",[]],["text/62-1",[]],["component/62-1",[]],["title/62-2",[112,10.214,202,12.473]],["name/62-2",[]],["text/62-2",[]],["component/62-2",[]],["title/62",[110,21.682,1027,27.578,1404,38.394]],["name/62",[110,1.061,130,1.061,131,1.326,1027,1.35]],["text/62",[1,1.671,27,0.945,38,0.691,40,0.691,44,0.799,47,1.84,49,1.472,76,1.818,95,2.263,98,2.16,130,3.847,131,4.806,132,1.351,133,1.378,174,1.838,191,2.208,226,5.633,229,1.977,238,1.981,239,2.084,240,1.745,241,1.568,242,1.696,263,0.695,264,0.695,288,2.348,307,1.407,329,3.075,364,1.73,404,1.63,410,4.42,415,2.222,431,2.245,443,3.274,517,2.952,530,6.105,581,5.095,585,2.803,587,2.803,602,3.752,653,3.2,659,1.546,676,5.331,680,2.006,714,6.234,760,3.543,786,4.309,789,6.024,796,4.42,818,2.006,988,4.893,1027,2.952,1307,6.761,1320,3.543,1325,3.543,1328,2.222,1334,2.006,1397,3.543,1405,2.577,1406,7.147,1407,7.147,1408,5.85,1409,7.843,1410,4.11,1411,5.127,1412,5.127,1413,5.127,1414,7.147,1415,5.85,1416,5.85,1417,5.85,1418,5.85,1419,5.85,1420,4.11,1421,4.11,1422,4.11,1423,4.11,1424,4.11,1425,4.11,1426,4.11,1427,4.11,1428,4.11,1429,4.11,1430,4.11,1431,2.577,1432,4.11,1433,2.577]],["component/62",[37,0.539]],["title/63-1",[201,14.919]],["name/63-1",[]],["text/63-1",[]],["component/63-1",[]],["title/63-2",[112,10.214,202,12.473]],["name/63-2",[]],["text/63-2",[]],["component/63-2",[]],["title/63",[132,12.619,178,15.254,1434,33.1]],["name/63",[132,0.996,1435,2.611]],["text/63",[0,1.233,1,1.161,2,1.508,7,3.657,8,2.528,11,2.737,12,0.87,22,1.607,26,1.233,32,2.253,37,0.473,38,0.632,40,0.632,44,0.73,47,2.16,53,2.296,54,1.081,57,2.912,66,1.794,83,1.163,87,3.133,88,2.613,91,2.044,95,1.966,97,2.134,99,3.67,101,3.204,102,1.981,103,3.204,106,0.929,132,2.817,153,2.316,174,1.032,178,2.852,191,2.512,207,1.233,216,0.972,223,2.844,229,1.057,237,1.112,238,1.112,239,1.699,240,1.14,241,1.17,242,0.779,243,0.87,244,0.895,245,0.87,246,0.895,248,1.3,254,2.566,260,2.789,263,0.636,264,1.032,270,1.692,273,1.413,276,1.692,290,1.692,307,1.286,313,1.692,314,1.581,329,1.413,342,1.692,344,0.95,345,0.972,346,1.003,347,1.003,363,2.03,368,1.887,372,1.442,384,1.962,393,3.513,404,2.418,405,1.833,409,1.49,414,2.746,431,1.286,453,2.969,469,1.037,470,1.037,471,1.037,472,0.98,473,1.11,474,1.152,475,1.361,476,1.361,477,1.361,506,1.692,507,1.581,559,2.03,565,4.788,622,2.931,653,1.833,661,2.03,684,2.03,688,2.184,699,1.581,704,1.833,809,1.581,855,3.296,988,2.746,1053,3.296,1061,4.386,1136,2.03,1148,2.03,1165,2.03,1169,2.418,1205,2.03,1217,3.296,1434,5.264,1435,4.16,1436,2.355,1437,5.553,1438,3.823,1439,3.823,1440,3.823,1441,2.355,1442,5.553,1443,5.553,1444,2.355,1445,2.355,1446,2.355,1447,3.823,1448,2.355,1449,2.355,1450,2.355,1451,2.355,1452,2.355,1453,2.355,1454,2.355,1455,2.355,1456,8.207,1457,3.823,1458,3.823,1459,3.823,1460,5.553,1461,6.54,1462,3.823,1463,3.823,1464,3.823,1465,3.823,1466,3.823,1467,3.823,1468,3.823,1469,3.823,1470,3.823,1471,3.823,1472,2.355,1473,2.355,1474,2.355,1475,2.355,1476,2.355,1477,2.355,1478,2.355]],["component/63",[37,0.539]],["title/64-1",[201,14.919]],["name/64-1",[]],["text/64-1",[]],["component/64-1",[]],["title/64-2",[112,10.214,202,12.473]],["name/64-2",[]],["text/64-2",[]],["component/64-2",[]],["title/64",[198,41.702]],["name/64",[198,3.135]],["text/64",[1,1.346,3,0.986,11,2.444,17,3.292,22,1.47,27,2.39,37,0.691,38,0.556,40,0.556,44,0.642,50,2.691,51,1.17,53,2.1,55,1.053,60,1.715,61,1.921,67,1.108,75,1.227,78,1.699,81,2.038,86,2.967,87,3.344,88,2.24,91,1.108,116,3.698,117,3.838,121,1.369,125,2.274,127,2.521,132,2.791,133,0.695,134,1.553,137,1.736,138,1.578,140,1.074,174,1.387,178,2.444,191,2.423,193,0.935,194,3.17,198,6.305,201,0.532,216,2.816,223,1.421,229,1.221,237,0.602,238,1.283,239,1.572,240,1.316,241,1.35,242,1.46,243,1.63,244,1.677,245,1.63,246,1.677,251,1.613,263,0.929,264,0.559,265,0.663,344,1.78,345,0.855,346,0.883,347,0.883,362,5.962,418,2.064,420,1.613,438,1.516,448,1.413,456,1.699,469,0.912,470,0.912,471,0.912,472,0.862,484,1.651,512,2.31,520,3.221,581,5.271,583,2.347,638,3.609,651,3.42,680,2.679,714,3.436,786,4.123,789,3.17,863,2.472,871,2.072,872,2.072,873,2.072,874,2.072,875,4.413,876,4.413,877,2.072,878,2.072,879,2.072,880,5.702,881,2.072,882,2.072,883,3.441,884,4.916,885,4.001,886,5.139,887,3.441,888,6.151,889,4.413,890,4.413,891,2.679,892,2.679,893,4.413,894,3.441,895,7.659,896,6.151,897,6.151,898,3.441,899,4.413,900,2.967,901,5.702,902,2.072,903,5.702,904,4.413,905,4.413,906,3.441,907,2.072,908,2.072,909,2.072,910,2.072,911,2.072,912,2.072]],["component/64",[37,0.539]],["title/65-1",[201,14.919]],["name/65-1",[]],["text/65-1",[]],["component/65-1",[]],["title/65-2",[112,10.214,202,12.473]],["name/65-2",[]],["text/65-2",[]],["component/65-2",[]],["title/65",[27,14.078,106,15.14,913,29.889]],["name/65",[913,3.398]],["text/65",[1,1.615,2,1.275,15,1.748,22,1.633,26,1.693,27,1.798,38,0.867,40,0.867,44,1.002,77,2.463,88,2.723,91,1.728,106,2.336,129,3.326,132,2.694,133,1.084,134,1.459,140,2.541,148,2.281,172,2.567,174,1.784,178,2.627,191,2.318,216,1.334,223,2.024,229,2.214,237,0.94,238,1.922,240,0.964,263,0.872,264,0.872,265,1.035,309,3.291,372,3.021,392,5.582,431,1.765,434,1.538,439,1.891,444,3.906,520,4.192,584,4.628,659,1.939,676,4.255,884,6.902,885,3.817,913,6.382,914,4.903,915,7.655,916,5.923,917,3.233,918,3.233,919,6.611,920,8.801,921,8.611,922,5.923,923,5.923,924,4.903,925,5.923,926,6.611,927,6.611,928,3.233]],["component/65",[37,0.539]],["title/66-1",[201,14.919]],["name/66-1",[]],["text/66-1",[]],["component/66-1",[]],["title/66-2",[112,10.214,202,12.473]],["name/66-2",[]],["text/66-2",[]],["component/66-2",[]],["title/66",[27,9.335,106,10.04,803,18.287,929,19.819,930,19.819,931,19.819]],["name/66",[106,0.623,803,1.135,929,1.23,930,1.23,931,1.23]],["text/66",[1,0.789,38,0.7,40,0.7,44,0.809,45,2.429,52,1.918,55,1.326,62,1.473,70,2.186,80,4.157,174,0.704,189,5.803,191,2.52,218,4.316,220,3.14,229,1.63,232,3.579,234,3.727,235,4.586,237,0.759,238,0.759,239,0.798,240,1.541,241,0.798,242,0.863,243,0.964,244,0.992,245,0.964,246,0.992,263,0.704,264,0.704,265,0.835,307,1.425,344,2.897,345,2.134,346,1.112,347,1.112,372,2.71,384,2.13,436,2.292,469,1.148,470,1.148,471,1.148,472,1.086,473,1.23,474,1.276,511,1.874,512,1.751,540,3.14,563,3.231,593,3.78,615,5.455,617,3.306,728,2.031,803,5.772,867,2.786,929,6.366,930,6.366,931,3.231,932,2.249,933,5.354,934,2.609,935,4.151,936,5.891,937,5.169,938,4.151,939,4.151,940,6.849,941,6.849,942,4.151,943,6.426,944,4.151,945,7.454,946,4.151,947,6.849,948,4.151,949,5.169,950,5.169,951,5.169,952,4.151,953,4.151,954,4.151,955,6.849,956,5.169,957,5.169,958,5.169,959,4.151,960,5.169,961,2.609,962,2.609,963,2.609,964,5.079,965,2.609,966,4.151,967,2.609,968,4.151,969,2.609,970,2.609,971,2.609,972,2.609]],["component/66",[37,0.539]],["title/67-1",[201,14.919]],["name/67-1",[]],["text/67-1",[]],["component/67-1",[]],["title/67-2",[112,10.214,202,12.473]],["name/67-2",[]],["text/67-2",[]],["component/67-2",[]],["title/67",[95,11.625,130,18.542,456,16.207,520,17.191]],["name/67",[130,1.31,456,1.145,520,1.214]],["text/67",[1,1.685,11,2.34,15,2.386,27,0.806,38,0.59,40,0.59,44,0.681,47,3.335,64,1.14,67,1.175,88,2.144,126,3.045,129,4.057,130,4.853,132,1.752,133,1.543,140,1.873,174,1.886,178,2.777,191,2.45,218,4.691,223,2.885,229,1.474,237,0.639,238,0.639,239,0.673,240,0.656,241,0.673,242,0.727,262,1.391,263,0.593,264,0.593,265,0.704,273,1.319,334,1.712,358,2.814,372,3.043,393,4.005,419,2.814,436,1.214,437,1.591,456,4.417,513,1.712,520,4.947,583,2.465,616,5.114,638,2.819,932,3.116,973,8.276,974,6.025,975,6.989,976,6.691,977,6.691,978,7.452,979,3.614,980,3.614,981,3.614,982,3.614,983,2.426,984,3.116,985,4.595,986,5.459,987,6.332,988,3.305,989,3.614,990,5.889,991,2.199,992,2.199,993,2.199,994,1.896]],["component/67",[37,0.539]],["title/68-1",[201,14.919]],["name/68-1",[]],["text/68-1",[]],["component/68-1",[]],["title/68-2",[112,10.214,202,12.473]],["name/68-2",[]],["text/68-2",[]],["component/68-2",[]],["title/68",[34,23.256,995,39.848]],["name/68",[34,1.167,171,1.467,996,2]],["text/68",[1,1.194,22,0.637,34,1.619,38,0.513,40,0.513,44,0.592,80,5.144,86,2.224,97,1.067,133,0.641,171,3.09,174,0.868,191,2.582,229,2.108,237,0.556,238,0.935,239,0.984,240,1.242,241,1.274,242,1.616,243,1.804,244,1.223,245,1.188,246,1.223,263,0.516,264,0.516,265,0.612,299,1.86,307,1.044,344,1.97,345,1.719,346,1.371,347,1.371,364,1.283,372,1.843,384,3.741,434,0.909,469,1.416,470,0.841,471,0.841,472,0.795,473,0.901,474,0.935,477,1.105,482,1.161,517,2.311,518,1.648,525,4.211,573,1.373,728,3.242,866,2.504,867,3.658,995,6.891,996,2.773,997,3.591,998,2.773,999,3.591,1000,4.165,1001,4.165,1002,5.906,1003,1.912,1004,6.436,1005,7.258,1006,7.197,1007,4.699,1008,4.699,1009,4.699,1010,4.699,1011,4.699,1012,4.699,1013,4.699,1014,4.699,1015,4.211,1016,7.416,1017,6.595,1018,8.602,1019,6.281,1020,5.45,1021,5.45,1022,3.217,1023,4.165,1024,3.217,1025,4.165,1026,3.217,1027,3.509,1028,3.217,1029,1.912,1030,1.648,1031,3.217,1032,1.912,1033,1.488,1034,1.488,1035,1.912,1036,1.912,1037,1.912,1038,1.912]],["component/68",[37,0.539]],["title/69-1",[178,15.254,720,20.102,1039,27.578]],["name/69-1",[]],["text/69-1",[]],["component/69-1",[]],["title/69-2",[178,15.254,720,20.102,1040,25.77]],["name/69-2",[]],["text/69-2",[]],["component/69-2",[]],["title/69-3",[1041,50.053]],["name/69-3",[]],["text/69-3",[]],["component/69-3",[]],["title/69-4",[201,14.919]],["name/69-4",[]],["text/69-4",[]],["component/69-4",[]],["title/69-5",[112,10.214,202,12.473]],["name/69-5",[]],["text/69-5",[]],["component/69-5",[]],["title/69",[178,13.045,720,17.191,1039,23.584,1040,22.038]],["name/69",[720,1.214,1039,1.666,1040,1.557]],["text/69",[1,1.107,2,1.152,15,1.456,22,1.184,27,0.79,38,0.323,40,0.323,44,0.373,47,1.59,49,0.688,51,0.68,52,0.642,95,0.427,127,2.591,133,1.192,134,0.544,153,1.402,157,1.377,164,1.039,172,3.049,174,1.102,178,2.314,191,1.651,207,1.128,218,0.809,229,2.047,237,1.319,250,0.938,257,0.865,260,0.697,262,1.363,263,0.325,264,0.325,265,0.386,270,1.547,276,1.547,288,0.688,311,0.762,324,1.039,418,3.157,434,1.691,437,1.798,439,1.709,478,0.732,481,1.382,502,0.882,512,2.741,544,0.822,567,5.021,620,3.924,659,0.723,665,1.677,689,0.865,720,3.972,724,1.857,726,0.658,729,0.762,814,3.521,866,1.677,892,1.677,988,2.098,998,1.039,1030,3.521,1039,2.934,1040,3.306,1041,1.857,1042,2.921,1043,1.857,1044,1.205,1045,1.205,1046,1.205,1047,1.205,1048,2.154,1049,1.205,1050,1.205,1051,1.039,1052,1.205,1053,1.039,1054,1.205,1055,1.205,1056,1.205,1057,5.561,1058,1.205,1059,1.205,1060,1.205,1061,2.934,1062,1.205,1063,5.264,1064,2.154,1065,5.264,1066,5.264,1067,6.269,1068,5.824,1069,4.538,1070,5.264,1071,5.264,1072,5.264,1073,6.631,1074,9.121,1075,8.995,1076,8.995,1077,4.084,1078,4.084,1079,4.084,1080,4.084,1081,4.084,1082,4.084,1083,4.084,1084,5.824,1085,4.084,1086,4.084,1087,3.521,1088,4.084,1089,4.084,1090,4.084,1091,4.084,1092,4.084,1093,4.084,1094,4.084,1095,4.084,1096,4.084,1097,4.084,1098,4.084,1099,3.521,1100,4.084,1101,4.084,1102,4.084,1103,4.084,1104,4.084,1105,4.084,1106,4.084,1107,4.084,1108,4.084,1109,4.084,1110,4.084,1111,4.084,1112,4.084,1113,4.084,1114,4.084,1115,4.084,1116,4.084,1117,4.084,1118,4.084,1119,4.084,1120,4.084,1121,4.084,1122,4.084,1123,4.084,1124,4.084,1125,4.084,1126,4.084,1127,4.084,1128,3.554,1129,3.554,1130,7.063,1131,6.059,1132,2.154,1133,2.154,1134,2.921,1135,1.205,1136,1.039,1137,1.205,1138,2.154,1139,1.205,1140,1.205,1141,1.205,1142,1.039,1143,1.205,1144,1.205,1145,1.205,1146,1.039,1147,1.039,1148,1.039,1149,1.205,1150,1.205]],["component/69",[37,0.539]],["title/70-1",[201,14.919]],["name/70-1",[]],["text/70-1",[]],["component/70-1",[]],["title/70-2",[112,10.214,202,12.473]],["name/70-2",[]],["text/70-2",[]],["component/70-2",[]],["title/70",[178,18.364,651,27.722]],["name/70",[178,1.204,651,1.817]],["text/70",[1,1.473,2,1.874,11,0.915,15,1.954,22,1.825,27,1.377,38,0.618,40,0.618,41,1.457,50,1.206,60,3.668,61,2.096,62,1.301,67,2.93,81,5.007,86,1.049,88,2.357,91,1.231,95,2.137,97,2.096,110,3.095,121,1.522,124,3.006,129,4.106,132,2.598,133,2.289,140,1.194,148,1.625,153,1.106,157,1.086,162,1.478,172,2.87,174,1.013,178,3.324,191,1.797,207,1.206,216,0.951,223,1.962,229,1.516,237,0.67,238,1.092,239,0.705,240,0.687,241,0.705,242,0.762,262,1.457,263,0.622,264,0.622,265,0.737,306,3.237,309,1.546,371,4.566,372,3.19,380,1.986,429,1.986,431,1.258,456,1.853,513,1.793,520,3.963,542,2.52,579,1.686,581,4.707,583,2.561,584,4.114,585,5.021,587,5.021,638,4.004,641,2.748,651,5.2,652,1.793,653,1.793,654,2.303,655,2.697,656,2.303,657,2.923,658,2.303,659,1.382,660,2.303,661,1.986,662,5.481,663,7.361,664,3.755,665,2.923,666,3.237,667,3.755,668,3.755,669,4.752,670,4.752,671,4.752,672,4.752,673,4.752,674,4.752,675,4.752,676,3.414,677,3.755,678,3.755,679,1.793,680,1.793,681,3.679,682,2.303,683,2.303,684,1.986,685,2.303,686,4.097,687,2.303,688,2.145,689,1.655,690,3.755,691,2.303,692,2.303,693,2.303,694,2.303,695,2.303,696,2.303,697,2.303,698,2.303,699,1.546,700,2.303,701,2.303,702,2.303,703,2.303]],["component/70",[37,0.539]],["title/71-1",[201,14.919]],["name/71-1",[]],["text/71-1",[]],["component/71-1",[]],["title/71-2",[112,10.214,202,12.473]],["name/71-2",[]],["text/71-2",[]],["component/71-2",[]],["title/71",[688,33.168]],["name/71",[688,2.493]],["text/71",[1,1.729,15,2.447,22,1.84,38,0.626,40,0.626,44,0.723,63,3.906,65,1.778,78,3.388,86,3.256,88,2.767,110,2.143,128,6.783,129,3.824,132,3,133,1.272,174,1.49,191,1.947,209,1.497,218,2.547,220,3.355,223,2.28,237,0.678,238,1.103,239,1.161,240,1.131,241,1.161,263,0.63,264,0.63,265,0.747,368,1.152,371,3.543,372,2.699,392,1.676,393,4.678,404,3.494,414,1.676,419,1.816,425,2.012,456,3.531,520,3.745,534,7.591,540,2.305,584,3.193,638,3.784,679,1.816,681,1.566,688,4.609,699,1.566,726,3.016,729,1.476,809,4.371,867,3.707,885,4.299,985,3.271,986,2.012,994,2.012,1040,1.566,1151,3.794,1152,5.523,1153,5.523,1154,4.299,1155,4.795,1156,8.806,1157,5.523,1158,7.395,1159,6.077,1160,6.512,1161,4.299,1162,3.794,1163,2.333,1164,2.333,1165,2.012,1166,2.012,1167,1.816,1168,2.333]],["component/71",[37,0.539]],["title/72-1",[201,14.919]],["name/72-1",[]],["text/72-1",[]],["component/72-1",[]],["title/72-2",[112,10.214,202,12.473]],["name/72-2",[]],["text/72-2",[]],["component/72-2",[]],["title/72",[132,9.426,133,9.617,176,13.402,193,12.946,1169,18.142]],["name/72",[133,0.63,176,0.878,193,0.848,1169,1.189]],["text/72",[1,1.36,8,0.825,15,2.551,22,1.334,26,0.949,27,2.462,38,0.486,40,0.486,44,0.562,51,1.737,53,1.463,60,1.533,62,1.023,78,2.33,81,1.822,83,0.895,87,0.93,88,1.459,95,0.642,97,1.012,102,2.076,106,2.956,121,1.198,129,3.771,132,1.551,133,1.583,134,0.818,140,0.939,153,0.87,171,1.146,174,1.55,176,4.161,178,1.875,191,2.526,193,3.23,194,2.877,209,2.57,216,0.748,223,2.182,229,1.306,237,1.781,238,1.67,239,1.757,240,1.713,241,0.941,242,0.6,243,0.669,244,0.689,245,0.669,246,0.689,248,1.001,260,3.055,263,0.489,264,0.83,265,1.511,279,1.411,286,1.048,299,3.32,309,2.064,329,1.087,342,1.302,344,0.731,345,0.748,346,0.772,347,0.772,372,2.534,393,3.633,405,1.411,423,1.411,426,1.411,436,1.001,437,0.798,469,0.798,470,0.798,471,0.798,472,0.754,473,0.854,474,0.886,475,1.048,476,1.048,477,1.048,478,1.101,479,1.163,520,1.61,542,2.064,584,1.778,587,2.098,624,1.326,638,1.627,651,1.845,652,1.411,655,1.302,657,1.411,681,2.064,689,2.209,699,2.689,723,2.209,786,4.741,983,2.064,1051,1.562,1146,1.562,1154,1.411,1169,4.075,1170,2.651,1171,1.562,1172,1.562,1173,3.454,1174,1.411,1175,1.411,1176,1.562,1177,1.562,1178,1.562,1179,1.562,1180,1.562,1181,1.562,1182,1.562,1183,1.562,1184,6.695,1185,7.766,1186,2.651,1187,4.069,1188,1.562,1189,1.411,1190,1.562,1191,4.069,1192,4.952,1193,6.461,1194,2.651,1195,2.651,1196,6.695,1197,3.075,1198,6.443,1199,5.744,1200,2.651,1201,3.075,1202,4.72,1203,3.075,1204,3.075,1205,1.562,1206,1.812,1207,1.812,1208,1.562,1209,1.562,1210,1.562,1211,1.411,1212,1.562,1213,1.411,1214,1.812,1215,1.812,1216,1.812,1217,1.562]],["component/72",[37,0.539]],["title/73-1",[201,14.919]],["name/73-1",[]],["text/73-1",[]],["component/73-1",[]],["title/73-2",[112,10.214,202,12.473]],["name/73-2",[]],["text/73-2",[]],["component/73-2",[]],["title/73",[176,15.343,193,14.82,983,22.038,1174,25.56]],["name/73",[176,0.878,193,0.848,729,1.189,1169,1.189]],["text/73",[1,1.426,8,0.549,12,0.445,15,2.304,22,0.718,26,0.631,27,1.499,38,0.323,40,0.323,44,0.374,51,1.217,52,0.36,53,1.026,54,0.554,60,0.601,62,0.681,64,2.118,78,2.24,81,1.277,83,0.595,87,0.619,88,2.122,89,0.919,91,1.152,95,0.763,97,0.673,99,2.35,102,1.117,106,2.734,129,2.932,132,1.829,133,2.103,140,0.625,153,0.579,171,1.364,174,1.421,176,4.015,178,1.161,191,2.573,193,3.244,194,3.996,209,1.876,211,0.939,216,0.498,223,2.034,224,0.99,229,1.457,237,0.351,238,1.531,239,1.611,240,1.47,241,0.894,242,0.713,243,0.796,244,0.819,245,0.796,246,0.819,248,1.19,257,0.866,260,3.044,263,0.325,264,0.582,265,1.138,266,0.763,279,0.939,286,0.697,299,2.363,309,0.81,329,0.723,342,0.866,344,0.87,345,0.89,346,0.918,347,0.918,352,1.04,360,1.859,368,1.064,372,2.287,392,1.548,393,4.087,408,1.859,409,0.763,423,0.939,426,0.939,431,1.177,436,0.666,453,1.901,469,0.949,470,0.949,471,0.949,472,0.897,473,1.016,474,1.054,475,1.246,476,1.246,477,1.246,478,1.31,479,1.383,480,1.47,481,1.383,482,1.31,521,1.678,524,1.04,531,2.52,542,0.81,564,1.859,566,3.066,572,1.678,573,1.548,574,1.678,575,1.678,584,1.246,616,1.578,624,0.883,638,3.509,651,1.293,652,0.939,657,0.939,659,0.723,665,1.678,666,1.859,676,2.1,681,1.447,688,0.689,689,1.548,699,1.962,729,2.585,786,4.087,847,1.04,915,1.859,983,1.447,1033,1.678,1034,1.678,1154,0.939,1169,4.95,1170,1.859,1171,1.04,1172,1.04,1173,2.52,1174,1.678,1175,0.939,1176,1.04,1177,1.04,1178,1.04,1179,1.04,1180,1.04,1181,1.04,1182,1.04,1183,1.04,1184,6.292,1186,1.859,1187,4.248,1188,1.04,1189,0.939,1190,1.04,1191,4.248,1192,3.523,1193,5.978,1194,1.859,1195,1.859,1196,5.719,1200,2.52,1208,1.04,1209,1.04,1210,1.04,1212,1.04,1213,0.939,1218,1.859,1219,2.156,1220,4.087,1221,2.156,1222,2.156,1223,2.156,1224,2.156,1225,3.556,1226,3.556,1227,3.556,1228,3.556,1229,2.156,1230,3.556,1231,3.556,1232,2.156,1233,2.156,1234,2.156,1235,2.156,1236,2.156,1237,2.156,1238,2.156,1239,1.206,1240,1.206,1241,4.087,1242,4.087,1243,4.087,1244,2.156,1245,1.206,1246,1.206,1247,1.206,1248,1.206,1249,1.04,1250,1.206,1251,1.206]],["component/73",[37,0.539]],["title/74-1",[201,14.919]],["name/74-1",[]],["text/74-1",[]],["component/74-1",[]],["title/74-2",[112,10.214,202,12.473]],["name/74-2",[]],["text/74-2",[]],["component/74-2",[]],["title/74",[34,23.256,1252,39.848]],["name/74",[34,1.167,1253,2,1254,2]],["text/74",[1,1.154,3,1.309,15,2.164,22,0.917,27,1.009,34,2.178,38,0.738,40,0.738,44,0.853,63,1.503,80,4.944,86,1.971,115,2.096,133,0.923,134,1.242,174,0.743,191,2.567,223,1.787,229,1.825,237,0.8,238,0.8,239,0.842,240,0.821,241,2.144,242,0.91,243,1.016,244,1.046,245,1.016,246,1.046,263,0.743,264,0.743,265,0.881,280,2.372,299,2.503,344,2.662,345,1.136,346,1.172,347,1.172,372,1.634,416,2.372,434,1.309,469,1.211,470,1.211,471,1.211,732,3.732,867,3.592,997,2.372,999,2.372,1004,6.041,1005,4.614,1006,4.614,1007,4.614,1008,4.614,1009,4.614,1010,4.614,1011,4.614,1012,4.614,1013,4.614,1014,4.614,1015,3.732,1016,7.553,1061,3.11,1069,5.232,1189,3.37,1213,2.142,1252,7.418,1253,3.732,1254,5.232,1255,2.752,1256,2.752,1257,2.752,1258,2.752,1259,4.329,1260,2.752,1261,4.329,1262,7.008,1263,5.352,1264,7.008,1265,5.352,1266,5.352,1267,5.352,1268,5.352,1269,5.352,1270,4.329,1271,4.329,1272,4.329,1273,6.069,1274,6.069,1275,4.329,1276,4.329,1277,4.329,1278,4.329,1279,2.752,1280,2.752,1281,2.752,1282,2.752,1283,2.752]],["component/74",[37,0.539]],["title/75-1",[201,14.919]],["name/75-1",[]],["text/75-1",[]],["component/75-1",[]],["title/75-2",[112,10.214,202,12.473]],["name/75-2",[]],["text/75-2",[]],["component/75-2",[]],["title/75",[1,7.299,12,14.179,52,11.45]],["name/75",[1,0.441,52,0.692,433,1.848]],["text/75",[1,1.476,2,1.159,12,2.659,15,1.625,22,0.979,26,1.538,36,1.809,38,0.788,40,0.788,41,1.859,49,1.679,50,2.386,52,2.623,63,1.605,86,3.42,88,1.07,92,4.345,95,2.227,124,1.859,132,0.966,134,2.057,157,1.385,167,1.785,174,0.793,191,2.335,197,4.446,209,2.924,216,1.881,224,3.566,229,1.26,237,0.854,238,1.325,239,0.899,240,0.876,241,0.899,242,0.972,243,1.085,244,1.117,245,1.085,246,1.117,248,1.622,260,1.698,263,0.793,264,0.793,265,0.941,286,1.698,299,3.227,303,5.962,344,1.185,345,1.213,346,1.252,347,1.252,368,3.104,375,4.446,384,1.508,434,1.398,435,2.613,436,1.622,437,1.293,438,2.15,439,1.719,440,2.613,441,2.613,442,2.613,443,2.34,444,2.34,445,6.404,446,2.613,447,4.964,448,3.807,449,6.404,450,4.052,451,4.052,452,4.052,453,3.362,454,4.052,455,5.592,456,2.249,457,4.052,458,6.905,459,5.592,460,6.404,461,4.052,462,4.052,463,4.052,464,4.052,465,4.052,466,4.052,467,4.964,468,4.052,469,1.293,470,1.293,471,1.293,472,1.222,473,1.385,474,1.437,475,1.698,476,1.698,477,1.698,478,1.785,479,1.885,480,2.004,481,1.885,482,1.785,483,2.613,484,2.34,485,2.613,486,2.613,487,4.052,488,2.613,489,2.613,490,2.613,491,2.613,492,2.613,493,4.052,494,4.052,495,4.052,496,2.613,497,2.613,498,2.613,499,2.613,500,2.613,501,2.613,502,2.15,503,2.34,504,2.613,505,2.34]],["component/75",[37,0.539]],["title/76-1",[201,14.919]],["name/76-1",[]],["text/76-1",[]],["component/76-1",[]],["title/76-2",[112,10.214,202,12.473]],["name/76-2",[]],["text/76-2",[]],["component/76-2",[]],["title/76",[1,3.953,45,12.163,133,11.571,134,9.384,254,13.954,704,16.185,705,16.185]],["name/76",[133,0.63,134,0.848,254,1.261,705,1.463]],["text/76",[0,3.171,1,1.622,5,1.694,11,2.255,12,0.654,15,1.404,22,1.89,36,2.425,38,0.475,40,0.475,41,1.121,45,1.765,47,2.854,48,1.533,52,0.528,54,0.813,55,0.9,61,0.989,65,2.298,67,0.947,83,0.874,106,0.699,113,1.036,133,2.724,134,2.879,140,0.918,144,1.485,153,0.85,155,4.715,156,2.644,157,3.007,172,1.579,174,1.407,178,0.704,187,1.272,191,2.361,201,0.455,203,1.189,207,0.928,216,1.626,223,1.92,224,2.135,229,2.166,237,1.934,238,1.516,239,1.595,240,1.555,241,1.423,242,1.539,243,1.717,244,2.157,245,2.748,246,2.302,254,3.501,260,1.024,263,1.063,264,0.478,273,1.063,311,1.908,313,1.272,314,1.189,329,1.063,344,1.589,345,1.626,346,1.678,347,1.678,362,3.066,368,0.874,379,1.527,409,1.121,414,1.272,418,3.632,431,0.967,436,0.978,437,1.328,448,1.208,453,0.947,469,1.734,470,1.328,471,1.328,472,1.255,473,2.192,474,0.866,503,1.411,511,2.167,639,1.208,646,1.296,655,1.272,679,4.418,704,1.379,705,4.06,706,5.215,707,6.118,708,1.772,709,5.215,710,1.772,711,1.772,712,1.772,713,4.65,714,5.178,715,3.396,716,7.585,717,7.585,718,6.889,719,7.939,720,3.171,721,6.056,722,3.016,723,4.076,724,2.6,725,1.772,726,0.967,727,1.772,728,1.379,729,1.121,730,1.772,731,1.772,732,3.396,733,2.6,734,3.016,735,3.016,736,3.939,737,1.772,738,3.939,739,3.939,740,3.016,741,3.016,742,3.016,743,3.016,744,3.016,745,3.016,746,3.016,747,3.016,748,3.016,749,3.016,750,3.016,751,3.016,752,3.016,753,3.016,754,3.016,755,3.016,756,3.016,757,3.016,758,3.016,759,3.016,760,1.527,761,1.772,762,1.772,763,1.772,764,1.772,765,1.772,766,1.772,767,1.772,768,1.772,769,1.772,770,1.772,771,1.772,772,1.772,773,1.772,774,1.772,775,1.772,776,1.772,777,1.772,778,1.772,779,1.772,780,1.772]],["component/76",[37,0.539]],["title/77-1",[201,14.919]],["name/77-1",[]],["text/77-1",[]],["component/77-1",[]],["title/77-2",[112,10.214,202,12.473]],["name/77-2",[]],["text/77-2",[]],["component/77-2",[]],["title/77",[186,27.578,224,17.63,437,16.899]],["name/77",[224,2.004]],["text/77",[1,1.589,11,0.56,12,0.52,15,1.614,16,2.073,22,0.469,27,0.517,38,0.378,40,0.378,44,0.437,47,1.78,48,2.021,53,1.177,54,0.647,60,1.233,76,0.994,81,1.465,83,0.695,88,1.959,91,1.322,95,2.297,102,0.73,106,1.786,111,2.073,128,3.8,129,3.365,130,3.879,131,4.238,132,2.403,133,1.804,153,1.588,172,3.951,174,1.897,186,1.012,191,2.387,216,2.359,220,2.416,223,2.585,224,3.413,226,2.857,229,1.581,237,0.41,238,1.821,239,1.646,240,1.604,241,1.646,242,1.651,243,1.672,244,1.512,245,0.914,246,0.94,248,2.754,256,0.904,263,0.38,264,0.668,290,1.777,311,0.891,314,0.945,344,0.568,345,0.581,346,0.6,347,0.6,368,1.221,371,1.587,372,2.955,404,1.565,409,0.891,420,1.097,428,2.133,431,2.172,437,0.62,453,1.322,456,1.221,469,0.62,470,0.62,471,0.62,472,0.586,473,0.664,474,0.689,475,2.884,476,0.814,477,0.814,478,0.856,479,0.904,480,0.961,481,0.904,482,0.856,512,1.66,520,3.502,530,1.926,542,1.66,549,1.214,572,1.097,573,1.012,574,1.097,575,1.097,581,2.416,582,4.685,584,1.43,586,1.97,591,3.089,638,3.719,647,1.122,651,1.484,655,1.012,659,0.845,681,1.66,688,2.272,715,1.214,729,2.516,733,4.927,786,4.625,789,1.777,818,1.097,863,1.777,891,1.926,900,2.133,983,1.66,984,1.214,1033,1.097,1034,1.097,1087,1.214,1099,1.214,1161,3.097,1175,1.097,1211,1.097,1218,1.214,1284,7.546,1285,2.474,1286,1.409,1287,2.474,1288,5.379,1289,5.379,1290,3.978,1291,3.307,1292,6.006,1293,5.715,1294,2.474,1295,6.006,1296,3.978,1297,6.006,1298,4.989,1299,3.978,1300,2.474,1301,2.474,1302,2.474,1303,3.978,1304,3.978,1305,2.474,1306,2.474,1307,2.133,1308,2.474,1309,2.474,1310,2.474,1311,2.474,1312,2.474,1313,2.474,1314,5.715,1315,3.978,1316,2.474,1317,6.689,1318,7.031,1319,2.474,1320,2.133,1321,2.474,1322,1.409,1323,1.409,1324,1.409,1325,2.133,1326,2.474,1327,1.409,1328,1.214,1329,1.409,1330,1.409,1331,1.409,1332,1.409,1333,1.409,1334,1.097]],["component/77",[37,0.539]],["title/78-1",[201,14.919]],["name/78-1",[]],["text/78-1",[]],["component/78-1",[]],["title/78-2",[112,10.214,202,12.473]],["name/78-2",[]],["text/78-2",[]],["component/78-2",[]],["title/78",[117,23.953,167,23.325,193,17.33]],["name/78",[117,1.447,167,1.409,193,1.047]],["text/78",[1,1.731,27,1.432,38,1.047,40,1.047,44,1.21,50,4.428,75,4.294,78,1.927,88,3.225,102,2.024,106,1.54,124,2.47,132,2.97,134,3.47,136,2.755,162,3.618,167,4.404,174,1.786,191,2.11,193,3.616,216,1.612,229,1.56,237,1.135,238,1.135,263,1.054,264,1.054,265,1.25,273,2.342,288,3.222,384,2.004,434,1.858,436,2.156,620,3.426,622,4.021,641,4.127,794,4.862,974,4.862,1334,4.39,1335,8.456,1336,5.639,1337,8.26,1338,5.639,1339,8.748,1340,5.639,1341,5.639,1342,5.639,1343,7.688,1344,5.639,1345,5.639,1346,5.639,1347,5.639,1348,3.366]],["component/78",[37,0.539]],["title/79-1",[201,14.919]],["name/79-1",[]],["text/79-1",[]],["component/79-1",[]],["title/79-2",[112,10.214,202,12.473]],["name/79-2",[]],["text/79-2",[]],["component/79-2",[]],["title/79",[71,25.012,110,18.542,1349,28.306,1350,32.834]],["name/79",[71,2.308,1351,2.611]],["text/79",[1,1.362,6,6.656,38,1.485,40,1.485,44,1.716,52,1.651,64,2.87,79,3.024,110,3.127,191,2.211,223,2.286,229,1.982,233,6.177,234,4.532,235,5.577,237,1.61,263,1.494,264,1.494,265,1.773,288,4.537,291,4.311,318,5.146,345,2.286,365,4.311,540,3.364,1043,4.774,1061,3.977,1349,6.177,1351,6.847,1352,5.538,1353,7.165,1354,7.943,1355,7.165,1356,6.847,1357,7.943,1358,5.538,1359,5.538,1360,5.538,1361,5.538,1362,5.538,1363,5.538,1364,4.774]],["component/79",[37,0.539]],["title/80-1",[201,14.919]],["name/80-1",[]],["text/80-1",[]],["component/80-1",[]],["title/80-2",[112,10.214,202,12.473]],["name/80-2",[]],["text/80-2",[]],["component/80-2",[]],["title/80",[206,24.633,229,10.62,437,16.899]],["name/80",[206,1.944,229,0.838]],["text/80",[1,1.657,22,2.264,38,1.371,40,1.371,44,1.584,60,2.547,62,2.886,63,2.791,64,2.648,73,4.282,95,1.809,97,2.853,132,1.68,134,3.068,169,4.405,174,2.287,191,2.143,206,3.279,207,2.676,229,2.46,230,4.882,237,1.486,238,2.221,239,1.563,240,1.524,241,1.563,263,1.379,264,1.379,265,1.636,307,2.791,437,2.992,439,3.977,473,2.409,475,2.954,507,3.43,540,3.104,591,3.485,646,3.74,892,3.978,1142,4.405,1161,6.598,1167,3.978,1211,3.978,1249,4.405,1365,7.637,1366,5.11,1367,6.797,1368,7.637,1369,5.11,1370,5.11,1371,5.11]],["component/80",[37,0.539]],["title/81-1",[201,14.919]],["name/81-1",[]],["text/81-1",[]],["component/81-1",[]],["title/81-2",[112,10.214,202,12.473]],["name/81-2",[]],["text/81-2",[]],["component/81-2",[]],["title/81",[1,8.788,578,30.547]],["name/81",[1,0.576,578,2.002]],["text/81",[1,1.691,12,1.835,15,1.003,34,2.5,37,0.328,38,0.438,40,0.438,44,0.506,47,2.43,50,1.473,52,1.832,75,1.667,79,1.537,86,1.281,88,1.809,94,1.272,95,1.56,112,0.622,126,1.608,127,3.102,129,1.865,132,1.633,133,1.243,159,2.059,162,2.378,174,1.909,191,2.515,206,1.048,220,2.677,223,1.162,224,2.023,229,2.045,232,4.983,237,0.475,238,1.281,239,1.134,240,1.105,241,1.134,242,0.54,243,0.603,244,0.621,245,0.603,246,1.07,256,1.048,263,0.441,264,0.441,335,1.048,339,1.301,344,0.659,368,1.389,369,1.195,371,1.805,372,1.662,384,1.444,434,2.096,439,2.169,453,1.504,456,1.389,472,1.171,533,5.313,538,1.114,540,1.71,544,1.919,578,4.408,579,1.195,580,1.453,581,4.4,582,1.919,583,1.919,584,1.627,585,1.919,586,3.51,587,1.919,588,4.19,589,2.502,590,2.502,591,3.005,592,7.294,593,5.263,594,7.294,595,2.502,596,3.51,597,4.383,598,2.502,599,3.918,600,2.502,601,2.502,602,3.224,603,2.502,604,4.633,605,2.502,606,2.502,607,3.51,608,2.502,609,2.502,610,3.51,611,3.51,612,2.502,613,2.502,614,6.441,615,3.51,616,3.224,617,2.242,618,2.502,619,4.829,620,3.299,621,3.918,622,3.732,623,3.918,624,3.224,625,3.918,626,3.51,627,2.502,628,2.502,629,3.296,630,2.502,631,3.296,632,1.453,633,2.502,634,2.502,635,2.502,636,2.502,637,2.502,638,2.331,639,1.919,640,2.502,641,2.059,642,1.453,643,1.453,644,1.453,645,1.453,646,1.195,647,1.301,648,1.453,649,1.453,650,1.453]],["component/81",[37,0.539]],["title/82-1",[201,14.919]],["name/82-1",[]],["text/82-1",[]],["component/82-1",[]],["title/82-2",[112,10.214,202,12.473]],["name/82-2",[]],["text/82-2",[]],["component/82-2",[]],["title/82",[27,9.335,106,10.04,726,13.904,792,18.287,804,18.287,933,18.287]],["name/82",[106,0.623,726,0.863,792,1.135,804,1.135,933,1.135]],["text/82",[1,0.972,38,1.371,40,1.371,44,1.584,52,1.524,60,2.547,117,5.079,174,1.379,186,3.67,187,3.67,191,2.496,229,2.113,238,1.486,239,1.563,240,1.524,241,1.563,242,1.691,245,1.887,263,1.379,264,1.379,265,2.176,307,2.791,364,3.43,372,1.928,384,3.488,544,3.485,563,3.978,726,2.791,787,3.67,788,3.67,792,5.486,800,4.405,804,5.486,891,3.978,933,5.847,943,7.018,964,4.405,1348,5.86,1372,5.11,1373,7.637,1374,8.14,1375,6.797,1376,6.797,1377,6.797,1378,5.11,1379,5.11]],["component/82",[37,0.539]],["title/83-1",[201,14.919]],["name/83-1",[]],["text/83-1",[]],["component/83-1",[]],["title/83-2",[112,10.214,202,12.473]],["name/83-2",[]],["text/83-2",[]],["component/83-2",[]],["title/83",[132,12.619,372,14.487,539,27.578]],["name/83",[132,0.762,372,0.875,539,1.666]],["text/83",[1,1.559,2,2.234,8,1.37,15,1.073,16,3.889,22,2.292,34,1.514,38,0.807,40,0.807,44,0.932,49,1.719,50,1.575,61,1.68,67,1.608,81,4.306,88,2.063,95,2.006,106,2.234,129,4.446,132,2.82,133,2.937,140,1.559,148,2.123,174,1.719,191,2.159,216,1.242,223,1.916,229,1.762,237,0.875,238,2.001,239,1.733,240,1.384,241,1.42,250,2.342,251,2.342,263,0.812,264,0.812,265,0.963,277,2.594,286,2.683,290,4.574,294,2.594,307,1.643,318,5.621,325,4.884,372,3.305,404,1.903,434,1.431,448,3.165,511,2.161,539,5.443,579,2.202,581,2.819,582,4.693,585,4.693,638,2.997,659,1.804,1147,4.001,1166,2.594,1167,2.342,1356,4.884,1364,2.594,1380,3.008,1381,7.578,1382,6.369,1383,5.666,1384,5.666,1385,5.666,1386,5.666,1387,5.666,1388,5.666,1389,5.666,1390,5.666,1391,5.666,1392,4.641,1393,4.641,1394,4.641,1395,4.641,1396,3.008,1397,2.594,1398,3.008,1399,3.008,1400,3.008,1401,3.008,1402,3.008,1403,3.008]],["component/83",[37,0.539]],["title/84-1",[201,14.919]],["name/84-1",[]],["text/84-1",[]],["component/84-1",[]],["title/84-2",[112,10.214,202,12.473]],["name/84-2",[]],["text/84-2",[]],["component/84-2",[]],["title/84",[110,21.682,1027,27.578,1404,38.394]],["name/84",[110,1.061,130,1.061,131,1.326,1027,1.35]],["text/84",[1,1.671,27,0.945,38,0.691,40,0.691,44,0.799,47,1.84,49,1.472,76,1.818,95,2.263,98,2.16,130,3.847,131,4.806,132,1.351,133,1.378,174,1.838,191,2.208,226,5.633,229,1.977,238,1.981,239,2.084,240,1.745,241,1.568,242,1.696,263,0.695,264,0.695,288,2.348,307,1.407,329,3.075,364,1.73,404,1.63,410,4.42,415,2.222,431,2.245,443,3.274,517,2.952,530,6.105,581,5.095,585,2.803,587,2.803,602,3.752,653,3.2,659,1.546,676,5.331,680,2.006,714,6.234,760,3.543,786,4.309,789,6.024,796,4.42,818,2.006,988,4.893,1027,2.952,1307,6.761,1320,3.543,1325,3.543,1328,2.222,1334,2.006,1397,3.543,1405,2.577,1406,7.147,1407,7.147,1408,5.85,1409,7.843,1410,4.11,1411,5.127,1412,5.127,1413,5.127,1414,7.147,1415,5.85,1416,5.85,1417,5.85,1418,5.85,1419,5.85,1420,4.11,1421,4.11,1422,4.11,1423,4.11,1424,4.11,1425,4.11,1426,4.11,1427,4.11,1428,4.11,1429,4.11,1430,4.11,1431,2.577,1432,4.11,1433,2.577]],["component/84",[37,0.539]],["title/85-1",[201,14.919]],["name/85-1",[]],["text/85-1",[]],["component/85-1",[]],["title/85-2",[112,10.214,202,12.473]],["name/85-2",[]],["text/85-2",[]],["component/85-2",[]],["title/85",[132,12.619,178,15.254,1434,33.1]],["name/85",[132,0.996,1435,2.611]],["text/85",[0,1.233,1,1.161,2,1.508,7,3.657,8,2.528,11,2.737,12,0.87,22,1.607,26,1.233,32,2.253,37,0.473,38,0.632,40,0.632,44,0.73,47,2.16,53,2.296,54,1.081,57,2.912,66,1.794,83,1.163,87,3.133,88,2.613,91,2.044,95,1.966,97,2.134,99,3.67,101,3.204,102,1.981,103,3.204,106,0.929,132,2.817,153,2.316,174,1.032,178,2.852,191,2.512,207,1.233,216,0.972,223,2.844,229,1.057,237,1.112,238,1.112,239,1.699,240,1.14,241,1.17,242,0.779,243,0.87,244,0.895,245,0.87,246,0.895,248,1.3,254,2.566,260,2.789,263,0.636,264,1.032,270,1.692,273,1.413,276,1.692,290,1.692,307,1.286,313,1.692,314,1.581,329,1.413,342,1.692,344,0.95,345,0.972,346,1.003,347,1.003,363,2.03,368,1.887,372,1.442,384,1.962,393,3.513,404,2.418,405,1.833,409,1.49,414,2.746,431,1.286,453,2.969,469,1.037,470,1.037,471,1.037,472,0.98,473,1.11,474,1.152,475,1.361,476,1.361,477,1.361,506,1.692,507,1.581,559,2.03,565,4.788,622,2.931,653,1.833,661,2.03,684,2.03,688,2.184,699,1.581,704,1.833,809,1.581,855,3.296,988,2.746,1053,3.296,1061,4.386,1136,2.03,1148,2.03,1165,2.03,1169,2.418,1205,2.03,1217,3.296,1434,5.264,1435,4.16,1436,2.355,1437,5.553,1438,3.823,1439,3.823,1440,3.823,1441,2.355,1442,5.553,1443,5.553,1444,2.355,1445,2.355,1446,2.355,1447,3.823,1448,2.355,1449,2.355,1450,2.355,1451,2.355,1452,2.355,1453,2.355,1454,2.355,1455,2.355,1456,8.207,1457,3.823,1458,3.823,1459,3.823,1460,5.553,1461,6.54,1462,3.823,1463,3.823,1464,3.823,1465,3.823,1466,3.823,1467,3.823,1468,3.823,1469,3.823,1470,3.823,1471,3.823,1472,2.355,1473,2.355,1474,2.355,1475,2.355,1476,2.355,1477,2.355,1478,2.355]],["component/85",[37,0.539]],["title/86-1",[201,14.919]],["name/86-1",[]],["text/86-1",[]],["component/86-1",[]],["title/86-2",[112,10.214,202,12.473]],["name/86-2",[]],["text/86-2",[]],["component/86-2",[]],["title/86",[437,20.345,781,25.243]],["name/86",[437,1.333,781,1.654]],["text/86",[1,0.768,15,1.44,22,0.839,38,0.676,40,0.676,43,1.778,47,1.807,51,2.28,52,1.204,55,1.281,63,2.205,86,1.147,95,0.892,127,2.886,133,1.694,134,1.138,159,2.955,174,1.363,175,2.173,187,1.81,191,2.484,220,1.531,229,1.598,232,2.453,234,2.554,238,1.174,239,0.771,240,0.752,241,2.167,242,0.834,243,0.931,244,0.958,245,2.133,246,0.958,248,1.392,263,0.68,264,0.68,265,0.807,270,1.81,276,2.9,288,1.44,307,1.376,344,1.017,345,1.04,346,1.074,347,1.72,364,1.692,365,1.962,418,3.465,434,1.921,437,2.543,438,1.844,469,1.109,470,2.543,471,1.777,472,1.049,473,2.382,474,1.232,476,2.334,482,4.097,505,2.008,517,1.81,582,3.445,588,3.94,591,1.719,593,2.591,596,2.008,597,3.445,602,1.844,604,2.008,607,2.008,610,3.216,611,3.216,620,3.069,622,2.453,626,3.216,639,1.719,726,4.147,781,3.683,782,4.038,783,1.512,784,3.143,785,6.745,786,5.033,787,2.9,788,4.149,789,3.628,790,6.745,791,5.051,792,4.149,793,5.051,794,4.98,795,4.038,796,4.355,797,5.777,798,5.051,799,3.481,800,3.481,801,3.481,802,4.038,803,2.9,804,2.9,805,5.051,806,5.051,807,3.143,808,2.52,809,1.692,810,2.173,811,1.962,812,2.52,813,5.777,814,2.173,815,5.051,816,5.051,817,2.52,818,1.962,819,2.52,820,2.52,821,5.051,822,7.084,823,4.038,824,4.038,825,2.52,826,2.52,827,2.52,828,2.52,829,2.52,830,2.52,831,2.52,832,2.52,833,2.52,834,2.52,835,2.52,836,2.52,837,2.52,838,2.52,839,2.52,840,2.52,841,2.52,842,2.52,843,2.52,844,2.52,845,2.52,846,2.52,847,2.173,848,5.777]],["component/86",[37,0.539]],["title/87-1",[201,14.919]],["name/87-1",[]],["text/87-1",[]],["component/87-1",[]],["title/87-2",[112,10.214,202,12.473]],["name/87-2",[]],["text/87-2",[]],["component/87-2",[]],["title/87",[52,9.792,781,17.931,783,19.692,849,25.56]],["name/87",[52,0.56,781,1.026,783,1.127,849,1.463]],["text/87",[1,1.121,15,2.295,22,0.871,26,1.369,38,0.701,40,0.701,43,1.845,47,1.861,52,0.78,55,2.997,62,1.477,63,1.428,95,0.926,127,2.957,133,3.104,157,1.96,174,1.737,178,1.652,191,2.451,207,1.369,229,1.15,232,2.526,234,2.63,237,0.76,238,1.715,239,1.969,240,1.92,241,0.8,242,0.865,243,0.966,244,0.994,245,1.911,246,1.58,263,0.706,264,0.706,265,0.837,273,1.568,288,3.916,311,4.336,344,1.055,345,1.079,346,1.114,347,1.114,372,2.587,384,2.133,418,3.538,456,2.555,469,1.151,470,1.151,471,1.151,472,1.73,473,1.233,474,1.279,502,1.913,588,5.484,593,2.668,597,4.391,620,3.145,622,4.785,720,2.71,723,2.986,726,4.074,781,3.516,783,2.494,784,3.237,787,4.237,788,2.986,799,2.254,801,2.254,807,3.237,809,2.791,811,5.807,849,3.237,850,7.686,851,8.182,852,4.158,853,3.584,854,5.176,855,4.462,856,7.877,857,7.46,858,5.176,859,5.176,860,5.176,861,5.176,862,3.584,863,4.624,864,5.55]],["component/87",[37,0.539]],["title/88-1",[201,14.919]],["name/88-1",[]],["text/88-1",[]],["component/88-1",[]],["title/88-2",[112,10.214,202,12.473]],["name/88-2",[]],["text/88-2",[]],["component/88-2",[]],["title/88",[52,9.792,720,17.191,781,17.931,783,19.692]],["name/88",[52,0.56,720,0.984,781,1.026,783,1.127]],["text/88",[1,1.185,15,2.223,26,1.514,38,0.775,40,0.775,43,2.04,47,2.014,52,1.342,55,4.031,61,1.614,63,2.457,95,1.024,127,3.156,133,3.005,157,2.121,174,1.682,178,1.788,191,2.419,207,1.514,229,1.245,232,2.734,234,2.846,237,0.841,238,2.473,239,1.907,240,1.859,241,0.884,242,0.956,243,1.068,244,1.099,245,2.04,246,1.099,263,0.78,264,0.78,265,0.925,273,1.734,288,4.633,311,1.829,329,1.734,335,4,372,2.549,418,4.632,434,1.375,472,1.203,588,6.03,593,2.887,597,4.607,620,3.356,622,4.346,639,1.972,686,3.879,688,1.652,707,6.658,720,3.537,723,3.232,726,4.218,781,1.579,783,3.313,784,3.503,787,2.076,788,3.232,807,3.503,809,5.013,810,5.375,811,6.176,853,2.492,862,3.879,863,4.852,864,5.824,865,6.235,866,2.251,867,1.94,868,5.525,869,5.525,870,5.525]],["component/88",[37,0.539]],["title/89-1",[201,14.919]],["name/89-1",[]],["text/89-1",[]],["component/89-1",[]],["title/89-2",[112,10.214,202,12.473]],["name/89-2",[]],["text/89-2",[]],["component/89-2",[]],["title/89",[178,18.364,651,27.722]],["name/89",[178,1.204,651,1.817]],["text/89",[1,1.473,2,1.874,11,0.915,15,1.954,22,1.825,27,1.377,38,0.618,40,0.618,41,1.457,50,1.206,60,3.668,61,2.096,62,1.301,67,2.93,81,5.007,86,1.049,88,2.357,91,1.231,95,2.137,97,2.096,110,3.095,121,1.522,124,3.006,129,4.106,132,2.598,133,2.289,140,1.194,148,1.625,153,1.106,157,1.086,162,1.478,172,2.87,174,1.013,178,3.324,191,1.797,207,1.206,216,0.951,223,1.962,229,1.516,237,0.67,238,1.092,239,0.705,240,0.687,241,0.705,242,0.762,262,1.457,263,0.622,264,0.622,265,0.737,306,3.237,309,1.546,371,4.566,372,3.19,380,1.986,429,1.986,431,1.258,456,1.853,513,1.793,520,3.963,542,2.52,579,1.686,581,4.707,583,2.561,584,4.114,585,5.021,587,5.021,638,4.004,641,2.748,651,5.2,652,1.793,653,1.793,654,2.303,655,2.697,656,2.303,657,2.923,658,2.303,659,1.382,660,2.303,661,1.986,662,5.481,663,7.361,664,3.755,665,2.923,666,3.237,667,3.755,668,3.755,669,4.752,670,4.752,671,4.752,672,4.752,673,4.752,674,4.752,675,4.752,676,3.414,677,3.755,678,3.755,679,1.793,680,1.793,681,3.679,682,2.303,683,2.303,684,1.986,685,2.303,686,4.097,687,2.303,688,2.145,689,1.655,690,3.755,691,2.303,692,2.303,693,2.303,694,2.303,695,2.303,696,2.303,697,2.303,698,2.303,699,1.546,700,2.303,701,2.303,702,2.303,703,2.303]],["component/89",[37,0.539]],["title/90-1",[201,14.919]],["name/90-1",[]],["text/90-1",[]],["component/90-1",[]],["title/90-2",[112,10.214,202,12.473]],["name/90-2",[]],["text/90-2",[]],["component/90-2",[]],["title/90",[1,7.299,12,14.179,52,11.45]],["name/90",[1,0.441,52,0.692,433,1.848]],["text/90",[1,1.476,2,1.159,12,2.659,15,1.625,22,0.979,26,1.538,36,1.809,38,0.788,40,0.788,41,1.859,49,1.679,50,2.386,52,2.623,63,1.605,86,3.42,88,1.07,92,4.345,95,2.227,124,1.859,132,0.966,134,2.057,157,1.385,167,1.785,174,0.793,191,2.335,197,4.446,209,2.924,216,1.881,224,3.566,229,1.26,237,0.854,238,1.325,239,0.899,240,0.876,241,0.899,242,0.972,243,1.085,244,1.117,245,1.085,246,1.117,248,1.622,260,1.698,263,0.793,264,0.793,265,0.941,286,1.698,299,3.227,303,5.962,344,1.185,345,1.213,346,1.252,347,1.252,368,3.104,375,4.446,384,1.508,434,1.398,435,2.613,436,1.622,437,1.293,438,2.15,439,1.719,440,2.613,441,2.613,442,2.613,443,2.34,444,2.34,445,6.404,446,2.613,447,4.964,448,3.807,449,6.404,450,4.052,451,4.052,452,4.052,453,3.362,454,4.052,455,5.592,456,2.249,457,4.052,458,6.905,459,5.592,460,6.404,461,4.052,462,4.052,463,4.052,464,4.052,465,4.052,466,4.052,467,4.964,468,4.052,469,1.293,470,1.293,471,1.293,472,1.222,473,1.385,474,1.437,475,1.698,476,1.698,477,1.698,478,1.785,479,1.885,480,2.004,481,1.885,482,1.785,483,2.613,484,2.34,485,2.613,486,2.613,487,4.052,488,2.613,489,2.613,490,2.613,491,2.613,492,2.613,493,4.052,494,4.052,495,4.052,496,2.613,497,2.613,498,2.613,499,2.613,500,2.613,501,2.613,502,2.15,503,2.34,504,2.613,505,2.34]],["component/90",[37,0.539]],["title/91-1",[201,14.919]],["name/91-1",[]],["text/91-1",[]],["component/91-1",[]],["title/91-2",[112,10.214,202,12.473]],["name/91-2",[]],["text/91-2",[]],["component/91-2",[]],["title/91",[1,3.953,45,12.163,133,11.571,134,9.384,254,13.954,704,16.185,705,16.185]],["name/91",[133,0.63,134,0.848,254,1.261,705,1.463]],["text/91",[0,3.171,1,1.622,5,1.694,11,2.255,12,0.654,15,1.404,22,1.89,36,2.425,38,0.475,40,0.475,41,1.121,45,1.765,47,2.854,48,1.533,52,0.528,54,0.813,55,0.9,61,0.989,65,2.298,67,0.947,83,0.874,106,0.699,113,1.036,133,2.724,134,2.879,140,0.918,144,1.485,153,0.85,155,4.715,156,2.644,157,3.007,172,1.579,174,1.407,178,0.704,187,1.272,191,2.361,201,0.455,203,1.189,207,0.928,216,1.626,223,1.92,224,2.135,229,2.166,237,1.934,238,1.516,239,1.595,240,1.555,241,1.423,242,1.539,243,1.717,244,2.157,245,2.748,246,2.302,254,3.501,260,1.024,263,1.063,264,0.478,273,1.063,311,1.908,313,1.272,314,1.189,329,1.063,344,1.589,345,1.626,346,1.678,347,1.678,362,3.066,368,0.874,379,1.527,409,1.121,414,1.272,418,3.632,431,0.967,436,0.978,437,1.328,448,1.208,453,0.947,469,1.734,470,1.328,471,1.328,472,1.255,473,2.192,474,0.866,503,1.411,511,2.167,639,1.208,646,1.296,655,1.272,679,4.418,704,1.379,705,4.06,706,5.215,707,6.118,708,1.772,709,5.215,710,1.772,711,1.772,712,1.772,713,4.65,714,5.178,715,3.396,716,7.585,717,7.585,718,6.889,719,7.939,720,3.171,721,6.056,722,3.016,723,4.076,724,2.6,725,1.772,726,0.967,727,1.772,728,1.379,729,1.121,730,1.772,731,1.772,732,3.396,733,2.6,734,3.016,735,3.016,736,3.939,737,1.772,738,3.939,739,3.939,740,3.016,741,3.016,742,3.016,743,3.016,744,3.016,745,3.016,746,3.016,747,3.016,748,3.016,749,3.016,750,3.016,751,3.016,752,3.016,753,3.016,754,3.016,755,3.016,756,3.016,757,3.016,758,3.016,759,3.016,760,1.527,761,1.772,762,1.772,763,1.772,764,1.772,765,1.772,766,1.772,767,1.772,768,1.772,769,1.772,770,1.772,771,1.772,772,1.772,773,1.772,774,1.772,775,1.772,776,1.772,777,1.772,778,1.772,779,1.772,780,1.772]],["component/91",[37,0.539]],["title/92",[39,24.736]],["name/92",[3,2.076]],["text/92",[0,4.489,11,3.407,12,2.417,13,6.024,39,2.789,45,3.83,46,6.261,47,2.93,48,3.326,49,3.74,50,3.427,51,3.697,52,1.952,53,3.114,54,3.006,55,3.326,56,4.987,57,4.987,58,6.261,59,4.326,60,3.262,61,3.655,62,3.697,63,3.575,64,3.393,65,4.987,66,4.987]],["component/92",[37,0.539]],["title/93",[12,21.441]],["name/93",[3,2.076]],["text/93",[1,1.226,8,2.152,11,3.279,12,3.42,22,2.445,27,1.733,36,2.909,45,2.765,48,3.276,52,1.923,53,3.751,54,3.79,55,2.401,67,2.526,68,4.521,69,4.521,70,3.961,71,3.6,72,4.521,73,3.961,74,3.961,75,2.799,76,3.334,77,3.6,78,2.333,79,3.522,80,4.55,81,2.799,82,4.521,83,2.333,84,7.542,85,7.542,86,2.936,87,3.766,88,1.721,89,4.912,90,4.521,91,3.447,92,3.679,93,7.021,94,3.679,95,1.673,96,4.521,97,2.639,98,3.961,99,3.123,100,4.521,101,3.961,102,2.45,103,3.961,104,6.168,105,3.961,106,2.543,107,4.521,108,4.521,109,3.961,110,2.669,111,3.961,112,1.044,113,2.765,114,4.521]],["component/93",[37,0.539]],["title/94-1",[201,14.919]],["name/94-1",[]],["text/94-1",[]],["component/94-1",[]],["title/94-2",[112,10.214,202,12.473]],["name/94-2",[]],["text/94-2",[]],["component/94-2",[]],["title/94",[1,7.299,12,14.179,52,11.45]],["name/94",[1,0.441,52,0.692,433,1.848]],["text/94",[1,1.476,2,1.159,12,2.659,15,1.625,22,0.979,26,1.538,36,1.809,38,0.788,40,0.788,41,1.859,49,1.679,50,2.386,52,2.623,63,1.605,86,3.42,88,1.07,92,4.345,95,2.227,124,1.859,132,0.966,134,2.057,157,1.385,167,1.785,174,0.793,191,2.335,197,4.446,209,2.924,216,1.881,224,3.566,229,1.26,237,0.854,238,1.325,239,0.899,240,0.876,241,0.899,242,0.972,243,1.085,244,1.117,245,1.085,246,1.117,248,1.622,260,1.698,263,0.793,264,0.793,265,0.941,286,1.698,299,3.227,303,5.962,344,1.185,345,1.213,346,1.252,347,1.252,368,3.104,375,4.446,384,1.508,434,1.398,435,2.613,436,1.622,437,1.293,438,2.15,439,1.719,440,2.613,441,2.613,442,2.613,443,2.34,444,2.34,445,6.404,446,2.613,447,4.964,448,3.807,449,6.404,450,4.052,451,4.052,452,4.052,453,3.362,454,4.052,455,5.592,456,2.249,457,4.052,458,6.905,459,5.592,460,6.404,461,4.052,462,4.052,463,4.052,464,4.052,465,4.052,466,4.052,467,4.964,468,4.052,469,1.293,470,1.293,471,1.293,472,1.222,473,1.385,474,1.437,475,1.698,476,1.698,477,1.698,478,1.785,479,1.885,480,2.004,481,1.885,482,1.785,483,2.613,484,2.34,485,2.613,486,2.613,487,4.052,488,2.613,489,2.613,490,2.613,491,2.613,492,2.613,493,4.052,494,4.052,495,4.052,496,2.613,497,2.613,498,2.613,499,2.613,500,2.613,501,2.613,502,2.15,503,2.34,504,2.613,505,2.34]],["component/94",[37,0.539]],["title/95-1",[201,14.919]],["name/95-1",[]],["text/95-1",[]],["component/95-1",[]],["title/95-2",[112,10.214,202,12.473]],["name/95-2",[]],["text/95-2",[]],["component/95-2",[]],["title/95",[178,18.364,651,27.722]],["name/95",[178,1.204,651,1.817]],["text/95",[1,1.473,2,1.874,11,0.915,15,1.954,22,1.825,27,1.377,38,0.618,40,0.618,41,1.457,50,1.206,60,3.668,61,2.096,62,1.301,67,2.93,81,5.007,86,1.049,88,2.357,91,1.231,95,2.137,97,2.096,110,3.095,121,1.522,124,3.006,129,4.106,132,2.598,133,2.289,140,1.194,148,1.625,153,1.106,157,1.086,162,1.478,172,2.87,174,1.013,178,3.324,191,1.797,207,1.206,216,0.951,223,1.962,229,1.516,237,0.67,238,1.092,239,0.705,240,0.687,241,0.705,242,0.762,262,1.457,263,0.622,264,0.622,265,0.737,306,3.237,309,1.546,371,4.566,372,3.19,380,1.986,429,1.986,431,1.258,456,1.853,513,1.793,520,3.963,542,2.52,579,1.686,581,4.707,583,2.561,584,4.114,585,5.021,587,5.021,638,4.004,641,2.748,651,5.2,652,1.793,653,1.793,654,2.303,655,2.697,656,2.303,657,2.923,658,2.303,659,1.382,660,2.303,661,1.986,662,5.481,663,7.361,664,3.755,665,2.923,666,3.237,667,3.755,668,3.755,669,4.752,670,4.752,671,4.752,672,4.752,673,4.752,674,4.752,675,4.752,676,3.414,677,3.755,678,3.755,679,1.793,680,1.793,681,3.679,682,2.303,683,2.303,684,1.986,685,2.303,686,4.097,687,2.303,688,2.145,689,1.655,690,3.755,691,2.303,692,2.303,693,2.303,694,2.303,695,2.303,696,2.303,697,2.303,698,2.303,699,1.546,700,2.303,701,2.303,702,2.303,703,2.303]],["component/95",[37,0.539]],["title/96",[1,11.038]],["name/96",[3,2.076]],["text/96",[0,3.598,1,1.698,8,2.365,11,3.255,27,2.52,36,3.197,47,2.325,48,4.163,50,2.72,55,2.639,61,2.9,67,2.777,75,4.07,78,3.392,83,2.564,87,2.665,88,1.891,91,2.777,95,1.839,97,2.9,112,1.148,113,3.039,115,3.957,116,4.353,117,3.241,118,4.969,119,4.969,120,4.353,121,3.433,122,4.969,123,4.969,124,3.286,125,4.541,126,2.968,127,2.968,128,3.957,129,2.614,130,2.933,131,3.665,132,1.707,133,1.742,134,2.345,135,4.969,136,3.665,137,4.353,138,3.957,139,4.969,140,4.247,141,4.969,142,4.969,143,4.969,144,4.353,145,4.969,146,4.969,147,4.969,148,3.665,149,4.969,150,4.969,151,4.969,152,4.969,153,2.494]],["component/96",[37,0.539]],["title/97-1",[201,14.919]],["name/97-1",[]],["text/97-1",[]],["component/97-1",[]],["title/97-2",[112,10.214,202,12.473]],["name/97-2",[]],["text/97-2",[]],["component/97-2",[]],["title/97",[1,7.299,12,14.179,52,11.45]],["name/97",[1,0.441,52,0.692,433,1.848]],["text/97",[1,1.476,2,1.159,12,2.659,15,1.625,22,0.979,26,1.538,36,1.809,38,0.788,40,0.788,41,1.859,49,1.679,50,2.386,52,2.623,63,1.605,86,3.42,88,1.07,92,4.345,95,2.227,124,1.859,132,0.966,134,2.057,157,1.385,167,1.785,174,0.793,191,2.335,197,4.446,209,2.924,216,1.881,224,3.566,229,1.26,237,0.854,238,1.325,239,0.899,240,0.876,241,0.899,242,0.972,243,1.085,244,1.117,245,1.085,246,1.117,248,1.622,260,1.698,263,0.793,264,0.793,265,0.941,286,1.698,299,3.227,303,5.962,344,1.185,345,1.213,346,1.252,347,1.252,368,3.104,375,4.446,384,1.508,434,1.398,435,2.613,436,1.622,437,1.293,438,2.15,439,1.719,440,2.613,441,2.613,442,2.613,443,2.34,444,2.34,445,6.404,446,2.613,447,4.964,448,3.807,449,6.404,450,4.052,451,4.052,452,4.052,453,3.362,454,4.052,455,5.592,456,2.249,457,4.052,458,6.905,459,5.592,460,6.404,461,4.052,462,4.052,463,4.052,464,4.052,465,4.052,466,4.052,467,4.964,468,4.052,469,1.293,470,1.293,471,1.293,472,1.222,473,1.385,474,1.437,475,1.698,476,1.698,477,1.698,478,1.785,479,1.885,480,2.004,481,1.885,482,1.785,483,2.613,484,2.34,485,2.613,486,2.613,487,4.052,488,2.613,489,2.613,490,2.613,491,2.613,492,2.613,493,4.052,494,4.052,495,4.052,496,2.613,497,2.613,498,2.613,499,2.613,500,2.613,501,2.613,502,2.15,503,2.34,504,2.613,505,2.34]],["component/97",[37,0.539]],["title/98-1",[201,14.919]],["name/98-1",[]],["text/98-1",[]],["component/98-1",[]],["title/98-2",[112,10.214,202,12.473]],["name/98-2",[]],["text/98-2",[]],["component/98-2",[]],["title/98",[1,3.953,45,12.163,133,11.571,134,9.384,254,13.954,704,16.185,705,16.185]],["name/98",[133,0.63,134,0.848,254,1.261,705,1.463]],["text/98",[0,3.171,1,1.622,5,1.694,11,2.255,12,0.654,15,1.404,22,1.89,36,2.425,38,0.475,40,0.475,41,1.121,45,1.765,47,2.854,48,1.533,52,0.528,54,0.813,55,0.9,61,0.989,65,2.298,67,0.947,83,0.874,106,0.699,113,1.036,133,2.724,134,2.879,140,0.918,144,1.485,153,0.85,155,4.715,156,2.644,157,3.007,172,1.579,174,1.407,178,0.704,187,1.272,191,2.361,201,0.455,203,1.189,207,0.928,216,1.626,223,1.92,224,2.135,229,2.166,237,1.934,238,1.516,239,1.595,240,1.555,241,1.423,242,1.539,243,1.717,244,2.157,245,2.748,246,2.302,254,3.501,260,1.024,263,1.063,264,0.478,273,1.063,311,1.908,313,1.272,314,1.189,329,1.063,344,1.589,345,1.626,346,1.678,347,1.678,362,3.066,368,0.874,379,1.527,409,1.121,414,1.272,418,3.632,431,0.967,436,0.978,437,1.328,448,1.208,453,0.947,469,1.734,470,1.328,471,1.328,472,1.255,473,2.192,474,0.866,503,1.411,511,2.167,639,1.208,646,1.296,655,1.272,679,4.418,704,1.379,705,4.06,706,5.215,707,6.118,708,1.772,709,5.215,710,1.772,711,1.772,712,1.772,713,4.65,714,5.178,715,3.396,716,7.585,717,7.585,718,6.889,719,7.939,720,3.171,721,6.056,722,3.016,723,4.076,724,2.6,725,1.772,726,0.967,727,1.772,728,1.379,729,1.121,730,1.772,731,1.772,732,3.396,733,2.6,734,3.016,735,3.016,736,3.939,737,1.772,738,3.939,739,3.939,740,3.016,741,3.016,742,3.016,743,3.016,744,3.016,745,3.016,746,3.016,747,3.016,748,3.016,749,3.016,750,3.016,751,3.016,752,3.016,753,3.016,754,3.016,755,3.016,756,3.016,757,3.016,758,3.016,759,3.016,760,1.527,761,1.772,762,1.772,763,1.772,764,1.772,765,1.772,766,1.772,767,1.772,768,1.772,769,1.772,770,1.772,771,1.772,772,1.772,773,1.772,774,1.772,775,1.772,776,1.772,777,1.772,778,1.772,779,1.772,780,1.772]],["component/98",[37,0.539]],["title/99",[39,24.736]],["name/99",[3,2.076]],["text/99",[0,4.489,11,3.407,12,2.417,13,6.024,39,2.789,45,3.83,46,6.261,47,2.93,48,3.326,49,3.74,50,3.427,51,3.697,52,1.952,53,3.114,54,3.006,55,3.326,56,4.987,57,4.987,58,6.261,59,4.326,60,3.262,61,3.655,62,3.697,63,3.575,64,3.393,65,4.987,66,4.987]],["component/99",[37,0.539]],["title/100",[12,21.441]],["name/100",[3,2.076]],["text/100",[1,1.226,8,2.152,11,3.279,12,3.42,22,2.445,27,1.733,36,2.909,45,2.765,48,3.276,52,1.923,53,3.751,54,3.79,55,2.401,67,2.526,68,4.521,69,4.521,70,3.961,71,3.6,72,4.521,73,3.961,74,3.961,75,2.799,76,3.334,77,3.6,78,2.333,79,3.522,80,4.55,81,2.799,82,4.521,83,2.333,84,7.542,85,7.542,86,2.936,87,3.766,88,1.721,89,4.912,90,4.521,91,3.447,92,3.679,93,7.021,94,3.679,95,1.673,96,4.521,97,2.639,98,3.961,99,3.123,100,4.521,101,3.961,102,2.45,103,3.961,104,6.168,105,3.961,106,2.543,107,4.521,108,4.521,109,3.961,110,2.669,111,3.961,112,1.044,113,2.765,114,4.521]],["component/100",[37,0.539]],["title/101",[1,11.038]],["name/101",[3,2.076]],["text/101",[0,3.598,1,1.698,8,2.365,11,3.255,27,2.52,36,3.197,47,2.325,48,4.163,50,2.72,55,2.639,61,2.9,67,2.777,75,4.07,78,3.392,83,2.564,87,2.665,88,1.891,91,2.777,95,1.839,97,2.9,112,1.148,113,3.039,115,3.957,116,4.353,117,3.241,118,4.969,119,4.969,120,4.353,121,3.433,122,4.969,123,4.969,124,3.286,125,4.541,126,2.968,127,2.968,128,3.957,129,2.614,130,2.933,131,3.665,132,1.707,133,1.742,134,2.345,135,4.969,136,3.665,137,4.353,138,3.957,139,4.969,140,4.247,141,4.969,142,4.969,143,4.969,144,4.353,145,4.969,146,4.969,147,4.969,148,3.665,149,4.969,150,4.969,151,4.969,152,4.969,153,2.494]],["component/101",[37,0.539]],["title/102-1",[201,14.919]],["name/102-1",[]],["text/102-1",[]],["component/102-1",[]],["title/102-2",[112,10.214,202,12.473]],["name/102-2",[]],["text/102-2",[]],["component/102-2",[]],["title/102",[437,20.345,781,25.243]],["name/102",[437,1.333,781,1.654]],["text/102",[1,0.768,15,1.44,22,0.839,38,0.676,40,0.676,43,1.778,47,1.807,51,2.28,52,1.204,55,1.281,63,2.205,86,1.147,95,0.892,127,2.886,133,1.694,134,1.138,159,2.955,174,1.363,175,2.173,187,1.81,191,2.484,220,1.531,229,1.598,232,2.453,234,2.554,238,1.174,239,0.771,240,0.752,241,2.167,242,0.834,243,0.931,244,0.958,245,2.133,246,0.958,248,1.392,263,0.68,264,0.68,265,0.807,270,1.81,276,2.9,288,1.44,307,1.376,344,1.017,345,1.04,346,1.074,347,1.72,364,1.692,365,1.962,418,3.465,434,1.921,437,2.543,438,1.844,469,1.109,470,2.543,471,1.777,472,1.049,473,2.382,474,1.232,476,2.334,482,4.097,505,2.008,517,1.81,582,3.445,588,3.94,591,1.719,593,2.591,596,2.008,597,3.445,602,1.844,604,2.008,607,2.008,610,3.216,611,3.216,620,3.069,622,2.453,626,3.216,639,1.719,726,4.147,781,3.683,782,4.038,783,1.512,784,3.143,785,6.745,786,5.033,787,2.9,788,4.149,789,3.628,790,6.745,791,5.051,792,4.149,793,5.051,794,4.98,795,4.038,796,4.355,797,5.777,798,5.051,799,3.481,800,3.481,801,3.481,802,4.038,803,2.9,804,2.9,805,5.051,806,5.051,807,3.143,808,2.52,809,1.692,810,2.173,811,1.962,812,2.52,813,5.777,814,2.173,815,5.051,816,5.051,817,2.52,818,1.962,819,2.52,820,2.52,821,5.051,822,7.084,823,4.038,824,4.038,825,2.52,826,2.52,827,2.52,828,2.52,829,2.52,830,2.52,831,2.52,832,2.52,833,2.52,834,2.52,835,2.52,836,2.52,837,2.52,838,2.52,839,2.52,840,2.52,841,2.52,842,2.52,843,2.52,844,2.52,845,2.52,846,2.52,847,2.173,848,5.777]],["component/102",[37,0.539]],["title/103-1",[201,14.919]],["name/103-1",[]],["text/103-1",[]],["component/103-1",[]],["title/103-2",[112,10.214,202,12.473]],["name/103-2",[]],["text/103-2",[]],["component/103-2",[]],["title/103",[52,9.792,781,17.931,783,19.692,849,25.56]],["name/103",[52,0.56,781,1.026,783,1.127,849,1.463]],["text/103",[1,1.121,15,2.295,22,0.871,26,1.369,38,0.701,40,0.701,43,1.845,47,1.861,52,0.78,55,2.997,62,1.477,63,1.428,95,0.926,127,2.957,133,3.104,157,1.96,174,1.737,178,1.652,191,2.451,207,1.369,229,1.15,232,2.526,234,2.63,237,0.76,238,1.715,239,1.969,240,1.92,241,0.8,242,0.865,243,0.966,244,0.994,245,1.911,246,1.58,263,0.706,264,0.706,265,0.837,273,1.568,288,3.916,311,4.336,344,1.055,345,1.079,346,1.114,347,1.114,372,2.587,384,2.133,418,3.538,456,2.555,469,1.151,470,1.151,471,1.151,472,1.73,473,1.233,474,1.279,502,1.913,588,5.484,593,2.668,597,4.391,620,3.145,622,4.785,720,2.71,723,2.986,726,4.074,781,3.516,783,2.494,784,3.237,787,4.237,788,2.986,799,2.254,801,2.254,807,3.237,809,2.791,811,5.807,849,3.237,850,7.686,851,8.182,852,4.158,853,3.584,854,5.176,855,4.462,856,7.877,857,7.46,858,5.176,859,5.176,860,5.176,861,5.176,862,3.584,863,4.624,864,5.55]],["component/103",[37,0.539]],["title/104-1",[201,14.919]],["name/104-1",[]],["text/104-1",[]],["component/104-1",[]],["title/104-2",[112,10.214,202,12.473]],["name/104-2",[]],["text/104-2",[]],["component/104-2",[]],["title/104",[52,9.792,720,17.191,781,17.931,783,19.692]],["name/104",[52,0.56,720,0.984,781,1.026,783,1.127]],["text/104",[1,1.185,15,2.223,26,1.514,38,0.775,40,0.775,43,2.04,47,2.014,52,1.342,55,4.031,61,1.614,63,2.457,95,1.024,127,3.156,133,3.005,157,2.121,174,1.682,178,1.788,191,2.419,207,1.514,229,1.245,232,2.734,234,2.846,237,0.841,238,2.473,239,1.907,240,1.859,241,0.884,242,0.956,243,1.068,244,1.099,245,2.04,246,1.099,263,0.78,264,0.78,265,0.925,273,1.734,288,4.633,311,1.829,329,1.734,335,4,372,2.549,418,4.632,434,1.375,472,1.203,588,6.03,593,2.887,597,4.607,620,3.356,622,4.346,639,1.972,686,3.879,688,1.652,707,6.658,720,3.537,723,3.232,726,4.218,781,1.579,783,3.313,784,3.503,787,2.076,788,3.232,807,3.503,809,5.013,810,5.375,811,6.176,853,2.492,862,3.879,863,4.852,864,5.824,865,6.235,866,2.251,867,1.94,868,5.525,869,5.525,870,5.525]],["component/104",[37,0.539]],["title/105",[39,24.736]],["name/105",[3,2.076]],["text/105",[0,4.489,11,3.407,12,2.417,13,6.024,39,2.789,45,3.83,46,6.261,47,2.93,48,3.326,49,3.74,50,3.427,51,3.697,52,1.952,53,3.114,54,3.006,55,3.326,56,4.987,57,4.987,58,6.261,59,4.326,60,3.262,61,3.655,62,3.697,63,3.575,64,3.393,65,4.987,66,4.987]],["component/105",[37,0.539]],["title/106",[12,21.441]],["name/106",[3,2.076]],["text/106",[1,1.226,8,2.152,11,3.279,12,3.42,22,2.445,27,1.733,36,2.909,45,2.765,48,3.276,52,1.923,53,3.751,54,3.79,55,2.401,67,2.526,68,4.521,69,4.521,70,3.961,71,3.6,72,4.521,73,3.961,74,3.961,75,2.799,76,3.334,77,3.6,78,2.333,79,3.522,80,4.55,81,2.799,82,4.521,83,2.333,84,7.542,85,7.542,86,2.936,87,3.766,88,1.721,89,4.912,90,4.521,91,3.447,92,3.679,93,7.021,94,3.679,95,1.673,96,4.521,97,2.639,98,3.961,99,3.123,100,4.521,101,3.961,102,2.45,103,3.961,104,6.168,105,3.961,106,2.543,107,4.521,108,4.521,109,3.961,110,2.669,111,3.961,112,1.044,113,2.765,114,4.521]],["component/106",[37,0.539]],["title/107",[1,11.038]],["name/107",[3,2.076]],["text/107",[0,3.598,1,1.698,8,2.365,11,3.255,27,2.52,36,3.197,47,2.325,48,4.163,50,2.72,55,2.639,61,2.9,67,2.777,75,4.07,78,3.392,83,2.564,87,2.665,88,1.891,91,2.777,95,1.839,97,2.9,112,1.148,113,3.039,115,3.957,116,4.353,117,3.241,118,4.969,119,4.969,120,4.353,121,3.433,122,4.969,123,4.969,124,3.286,125,4.541,126,2.968,127,2.968,128,3.957,129,2.614,130,2.933,131,3.665,132,1.707,133,1.742,134,2.345,135,4.969,136,3.665,137,4.353,138,3.957,139,4.969,140,4.247,141,4.969,142,4.969,143,4.969,144,4.353,145,4.969,146,4.969,147,4.969,148,3.665,149,4.969,150,4.969,151,4.969,152,4.969,153,2.494]],["component/107",[37,0.539]],["title/108-1",[201,14.919]],["name/108-1",[]],["text/108-1",[]],["component/108-1",[]],["title/108-2",[112,10.214,202,12.473]],["name/108-2",[]],["text/108-2",[]],["component/108-2",[]],["title/108",[437,20.345,781,25.243]],["name/108",[437,1.333,781,1.654]],["text/108",[1,0.768,15,1.44,22,0.839,38,0.676,40,0.676,43,1.778,47,1.807,51,2.28,52,1.204,55,1.281,63,2.205,86,1.147,95,0.892,127,2.886,133,1.694,134,1.138,159,2.955,174,1.363,175,2.173,187,1.81,191,2.484,220,1.531,229,1.598,232,2.453,234,2.554,238,1.174,239,0.771,240,0.752,241,2.167,242,0.834,243,0.931,244,0.958,245,2.133,246,0.958,248,1.392,263,0.68,264,0.68,265,0.807,270,1.81,276,2.9,288,1.44,307,1.376,344,1.017,345,1.04,346,1.074,347,1.72,364,1.692,365,1.962,418,3.465,434,1.921,437,2.543,438,1.844,469,1.109,470,2.543,471,1.777,472,1.049,473,2.382,474,1.232,476,2.334,482,4.097,505,2.008,517,1.81,582,3.445,588,3.94,591,1.719,593,2.591,596,2.008,597,3.445,602,1.844,604,2.008,607,2.008,610,3.216,611,3.216,620,3.069,622,2.453,626,3.216,639,1.719,726,4.147,781,3.683,782,4.038,783,1.512,784,3.143,785,6.745,786,5.033,787,2.9,788,4.149,789,3.628,790,6.745,791,5.051,792,4.149,793,5.051,794,4.98,795,4.038,796,4.355,797,5.777,798,5.051,799,3.481,800,3.481,801,3.481,802,4.038,803,2.9,804,2.9,805,5.051,806,5.051,807,3.143,808,2.52,809,1.692,810,2.173,811,1.962,812,2.52,813,5.777,814,2.173,815,5.051,816,5.051,817,2.52,818,1.962,819,2.52,820,2.52,821,5.051,822,7.084,823,4.038,824,4.038,825,2.52,826,2.52,827,2.52,828,2.52,829,2.52,830,2.52,831,2.52,832,2.52,833,2.52,834,2.52,835,2.52,836,2.52,837,2.52,838,2.52,839,2.52,840,2.52,841,2.52,842,2.52,843,2.52,844,2.52,845,2.52,846,2.52,847,2.173,848,5.777]],["component/108",[37,0.539]],["title/109-1",[201,14.919]],["name/109-1",[]],["text/109-1",[]],["component/109-1",[]],["title/109-2",[112,10.214,202,12.473]],["name/109-2",[]],["text/109-2",[]],["component/109-2",[]],["title/109",[52,9.792,781,17.931,783,19.692,849,25.56]],["name/109",[52,0.56,781,1.026,783,1.127,849,1.463]],["text/109",[1,1.121,15,2.295,22,0.871,26,1.369,38,0.701,40,0.701,43,1.845,47,1.861,52,0.78,55,2.997,62,1.477,63,1.428,95,0.926,127,2.957,133,3.104,157,1.96,174,1.737,178,1.652,191,2.451,207,1.369,229,1.15,232,2.526,234,2.63,237,0.76,238,1.715,239,1.969,240,1.92,241,0.8,242,0.865,243,0.966,244,0.994,245,1.911,246,1.58,263,0.706,264,0.706,265,0.837,273,1.568,288,3.916,311,4.336,344,1.055,345,1.079,346,1.114,347,1.114,372,2.587,384,2.133,418,3.538,456,2.555,469,1.151,470,1.151,471,1.151,472,1.73,473,1.233,474,1.279,502,1.913,588,5.484,593,2.668,597,4.391,620,3.145,622,4.785,720,2.71,723,2.986,726,4.074,781,3.516,783,2.494,784,3.237,787,4.237,788,2.986,799,2.254,801,2.254,807,3.237,809,2.791,811,5.807,849,3.237,850,7.686,851,8.182,852,4.158,853,3.584,854,5.176,855,4.462,856,7.877,857,7.46,858,5.176,859,5.176,860,5.176,861,5.176,862,3.584,863,4.624,864,5.55]],["component/109",[37,0.539]],["title/110-1",[201,14.919]],["name/110-1",[]],["text/110-1",[]],["component/110-1",[]],["title/110-2",[112,10.214,202,12.473]],["name/110-2",[]],["text/110-2",[]],["component/110-2",[]],["title/110",[52,9.792,720,17.191,781,17.931,783,19.692]],["name/110",[52,0.56,720,0.984,781,1.026,783,1.127]],["text/110",[1,1.185,15,2.223,26,1.514,38,0.775,40,0.775,43,2.04,47,2.014,52,1.342,55,4.031,61,1.614,63,2.457,95,1.024,127,3.156,133,3.005,157,2.121,174,1.682,178,1.788,191,2.419,207,1.514,229,1.245,232,2.734,234,2.846,237,0.841,238,2.473,239,1.907,240,1.859,241,0.884,242,0.956,243,1.068,244,1.099,245,2.04,246,1.099,263,0.78,264,0.78,265,0.925,273,1.734,288,4.633,311,1.829,329,1.734,335,4,372,2.549,418,4.632,434,1.375,472,1.203,588,6.03,593,2.887,597,4.607,620,3.356,622,4.346,639,1.972,686,3.879,688,1.652,707,6.658,720,3.537,723,3.232,726,4.218,781,1.579,783,3.313,784,3.503,787,2.076,788,3.232,807,3.503,809,5.013,810,5.375,811,6.176,853,2.492,862,3.879,863,4.852,864,5.824,865,6.235,866,2.251,867,1.94,868,5.525,869,5.525,870,5.525]],["component/110",[37,0.539]],["title/111-1",[201,14.919]],["name/111-1",[]],["text/111-1",[]],["component/111-1",[]],["title/111-2",[112,10.214,202,12.473]],["name/111-2",[]],["text/111-2",[]],["component/111-2",[]],["title/111",[198,41.702]],["name/111",[198,3.135]],["text/111",[1,1.346,3,0.986,11,2.444,17,3.292,22,1.47,27,2.39,37,0.691,38,0.556,40,0.556,44,0.642,50,2.691,51,1.17,53,2.1,55,1.053,60,1.715,61,1.921,67,1.108,75,1.227,78,1.699,81,2.038,86,2.967,87,3.344,88,2.24,91,1.108,116,3.698,117,3.838,121,1.369,125,2.274,127,2.521,132,2.791,133,0.695,134,1.553,137,1.736,138,1.578,140,1.074,174,1.387,178,2.444,191,2.423,193,0.935,194,3.17,198,6.305,201,0.532,216,2.816,223,1.421,229,1.221,237,0.602,238,1.283,239,1.572,240,1.316,241,1.35,242,1.46,243,1.63,244,1.677,245,1.63,246,1.677,251,1.613,263,0.929,264,0.559,265,0.663,344,1.78,345,0.855,346,0.883,347,0.883,362,5.962,418,2.064,420,1.613,438,1.516,448,1.413,456,1.699,469,0.912,470,0.912,471,0.912,472,0.862,484,1.651,512,2.31,520,3.221,581,5.271,583,2.347,638,3.609,651,3.42,680,2.679,714,3.436,786,4.123,789,3.17,863,2.472,871,2.072,872,2.072,873,2.072,874,2.072,875,4.413,876,4.413,877,2.072,878,2.072,879,2.072,880,5.702,881,2.072,882,2.072,883,3.441,884,4.916,885,4.001,886,5.139,887,3.441,888,6.151,889,4.413,890,4.413,891,2.679,892,2.679,893,4.413,894,3.441,895,7.659,896,6.151,897,6.151,898,3.441,899,4.413,900,2.967,901,5.702,902,2.072,903,5.702,904,4.413,905,4.413,906,3.441,907,2.072,908,2.072,909,2.072,910,2.072,911,2.072,912,2.072]],["component/111",[37,0.539]],["title/112-1",[201,14.919]],["name/112-1",[]],["text/112-1",[]],["component/112-1",[]],["title/112-2",[112,10.214,202,12.473]],["name/112-2",[]],["text/112-2",[]],["component/112-2",[]],["title/112",[27,14.078,106,15.14,913,29.889]],["name/112",[913,3.398]],["text/112",[1,1.615,2,1.275,15,1.748,22,1.633,26,1.693,27,1.798,38,0.867,40,0.867,44,1.002,77,2.463,88,2.723,91,1.728,106,2.336,129,3.326,132,2.694,133,1.084,134,1.459,140,2.541,148,2.281,172,2.567,174,1.784,178,2.627,191,2.318,216,1.334,223,2.024,229,2.214,237,0.94,238,1.922,240,0.964,263,0.872,264,0.872,265,1.035,309,3.291,372,3.021,392,5.582,431,1.765,434,1.538,439,1.891,444,3.906,520,4.192,584,4.628,659,1.939,676,4.255,884,6.902,885,3.817,913,6.382,914,4.903,915,7.655,916,5.923,917,3.233,918,3.233,919,6.611,920,8.801,921,8.611,922,5.923,923,5.923,924,4.903,925,5.923,926,6.611,927,6.611,928,3.233]],["component/112",[37,0.539]],["title/113-1",[201,14.919]],["name/113-1",[]],["text/113-1",[]],["component/113-1",[]],["title/113-2",[112,10.214,202,12.473]],["name/113-2",[]],["text/113-2",[]],["component/113-2",[]],["title/113",[27,9.335,106,10.04,803,18.287,929,19.819,930,19.819,931,19.819]],["name/113",[106,0.623,803,1.135,929,1.23,930,1.23,931,1.23]],["text/113",[1,0.789,38,0.7,40,0.7,44,0.809,45,2.429,52,1.918,55,1.326,62,1.473,70,2.186,80,4.157,174,0.704,189,5.803,191,2.52,218,4.316,220,3.14,229,1.63,232,3.579,234,3.727,235,4.586,237,0.759,238,0.759,239,0.798,240,1.541,241,0.798,242,0.863,243,0.964,244,0.992,245,0.964,246,0.992,263,0.704,264,0.704,265,0.835,307,1.425,344,2.897,345,2.134,346,1.112,347,1.112,372,2.71,384,2.13,436,2.292,469,1.148,470,1.148,471,1.148,472,1.086,473,1.23,474,1.276,511,1.874,512,1.751,540,3.14,563,3.231,593,3.78,615,5.455,617,3.306,728,2.031,803,5.772,867,2.786,929,6.366,930,6.366,931,3.231,932,2.249,933,5.354,934,2.609,935,4.151,936,5.891,937,5.169,938,4.151,939,4.151,940,6.849,941,6.849,942,4.151,943,6.426,944,4.151,945,7.454,946,4.151,947,6.849,948,4.151,949,5.169,950,5.169,951,5.169,952,4.151,953,4.151,954,4.151,955,6.849,956,5.169,957,5.169,958,5.169,959,4.151,960,5.169,961,2.609,962,2.609,963,2.609,964,5.079,965,2.609,966,4.151,967,2.609,968,4.151,969,2.609,970,2.609,971,2.609,972,2.609]],["component/113",[37,0.539]],["title/114-1",[201,14.919]],["name/114-1",[]],["text/114-1",[]],["component/114-1",[]],["title/114-2",[112,10.214,202,12.473]],["name/114-2",[]],["text/114-2",[]],["component/114-2",[]],["title/114",[95,11.625,130,18.542,456,16.207,520,17.191]],["name/114",[130,1.31,456,1.145,520,1.214]],["text/114",[1,1.685,11,2.34,15,2.386,27,0.806,38,0.59,40,0.59,44,0.681,47,3.335,64,1.14,67,1.175,88,2.144,126,3.045,129,4.057,130,4.853,132,1.752,133,1.543,140,1.873,174,1.886,178,2.777,191,2.45,218,4.691,223,2.885,229,1.474,237,0.639,238,0.639,239,0.673,240,0.656,241,0.673,242,0.727,262,1.391,263,0.593,264,0.593,265,0.704,273,1.319,334,1.712,358,2.814,372,3.043,393,4.005,419,2.814,436,1.214,437,1.591,456,4.417,513,1.712,520,4.947,583,2.465,616,5.114,638,2.819,932,3.116,973,8.276,974,6.025,975,6.989,976,6.691,977,6.691,978,7.452,979,3.614,980,3.614,981,3.614,982,3.614,983,2.426,984,3.116,985,4.595,986,5.459,987,6.332,988,3.305,989,3.614,990,5.889,991,2.199,992,2.199,993,2.199,994,1.896]],["component/114",[37,0.539]],["title/115-1",[201,14.919]],["name/115-1",[]],["text/115-1",[]],["component/115-1",[]],["title/115-2",[112,10.214,202,12.473]],["name/115-2",[]],["text/115-2",[]],["component/115-2",[]],["title/115",[136,27.088,506,27.578,507,25.77]],["name/115",[136,1.636,506,1.666,507,1.557]],["text/115",[1,0.96,11,1.336,12,2.804,15,2.163,34,2.541,38,0.902,40,0.902,44,1.042,48,1.708,49,1.921,54,1.544,57,4.621,64,1.743,95,2.148,99,4.457,102,2.618,125,2.222,130,1.899,140,1.743,153,1.614,174,0.907,191,2.537,211,2.617,215,2.899,216,2.085,226,3.628,230,3.628,237,2.41,238,0.978,239,1.029,240,1.003,241,1.029,242,1.112,243,1.242,244,1.278,245,1.242,246,1.278,256,2.157,263,0.907,264,0.907,281,2.899,318,2.415,335,3.24,344,1.356,345,1.388,346,1.432,347,1.432,357,2.617,358,2.617,368,2.493,409,2.127,431,1.836,437,1.48,439,1.967,453,4.059,469,1.48,470,1.48,471,1.48,472,2.806,506,3.628,507,5.438,508,3.362,509,3.362,510,3.362,511,2.415,512,3.39,513,3.932,514,5.051,515,5.051,516,7.593,517,5.192,518,5.23,519,6.066,520,4.124,521,3.932,522,5.051,523,6.744,524,5.23,525,4.354,526,5.051,527,5.051,528,5.051,529,5.051,530,4.722,531,5.23,532,3.362,533,2.678,534,2.899,535,3.362,536,3.362,537,3.362]],["component/115",[37,0.539]],["title/116-1",[201,14.919]],["name/116-1",[]],["text/116-1",[]],["component/116-1",[]],["title/116-2",[112,10.214,202,12.473]],["name/116-2",[]],["text/116-2",[]],["component/116-2",[]],["title/116",[34,23.256,995,39.848]],["name/116",[34,1.167,171,1.467,996,2]],["text/116",[1,1.194,22,0.637,34,1.619,38,0.513,40,0.513,44,0.592,80,5.144,86,2.224,97,1.067,133,0.641,171,3.09,174,0.868,191,2.582,229,2.108,237,0.556,238,0.935,239,0.984,240,1.242,241,1.274,242,1.616,243,1.804,244,1.223,245,1.188,246,1.223,263,0.516,264,0.516,265,0.612,299,1.86,307,1.044,344,1.97,345,1.719,346,1.371,347,1.371,364,1.283,372,1.843,384,3.741,434,0.909,469,1.416,470,0.841,471,0.841,472,0.795,473,0.901,474,0.935,477,1.105,482,1.161,517,2.311,518,1.648,525,4.211,573,1.373,728,3.242,866,2.504,867,3.658,995,6.891,996,2.773,997,3.591,998,2.773,999,3.591,1000,4.165,1001,4.165,1002,5.906,1003,1.912,1004,6.436,1005,7.258,1006,7.197,1007,4.699,1008,4.699,1009,4.699,1010,4.699,1011,4.699,1012,4.699,1013,4.699,1014,4.699,1015,4.211,1016,7.416,1017,6.595,1018,8.602,1019,6.281,1020,5.45,1021,5.45,1022,3.217,1023,4.165,1024,3.217,1025,4.165,1026,3.217,1027,3.509,1028,3.217,1029,1.912,1030,1.648,1031,3.217,1032,1.912,1033,1.488,1034,1.488,1035,1.912,1036,1.912,1037,1.912,1038,1.912]],["component/116",[37,0.539]],["title/117-1",[178,15.254,720,20.102,1039,27.578]],["name/117-1",[]],["text/117-1",[]],["component/117-1",[]],["title/117-2",[178,15.254,720,20.102,1040,25.77]],["name/117-2",[]],["text/117-2",[]],["component/117-2",[]],["title/117-3",[1041,50.053]],["name/117-3",[]],["text/117-3",[]],["component/117-3",[]],["title/117-4",[201,14.919]],["name/117-4",[]],["text/117-4",[]],["component/117-4",[]],["title/117-5",[112,10.214,202,12.473]],["name/117-5",[]],["text/117-5",[]],["component/117-5",[]],["title/117",[178,13.045,720,17.191,1039,23.584,1040,22.038]],["name/117",[720,1.214,1039,1.666,1040,1.557]],["text/117",[1,1.107,2,1.152,15,1.456,22,1.184,27,0.79,38,0.323,40,0.323,44,0.373,47,1.59,49,0.688,51,0.68,52,0.642,95,0.427,127,2.591,133,1.192,134,0.544,153,1.402,157,1.377,164,1.039,172,3.049,174,1.102,178,2.314,191,1.651,207,1.128,218,0.809,229,2.047,237,1.319,250,0.938,257,0.865,260,0.697,262,1.363,263,0.325,264,0.325,265,0.386,270,1.547,276,1.547,288,0.688,311,0.762,324,1.039,418,3.157,434,1.691,437,1.798,439,1.709,478,0.732,481,1.382,502,0.882,512,2.741,544,0.822,567,5.021,620,3.924,659,0.723,665,1.677,689,0.865,720,3.972,724,1.857,726,0.658,729,0.762,814,3.521,866,1.677,892,1.677,988,2.098,998,1.039,1030,3.521,1039,2.934,1040,3.306,1041,1.857,1042,2.921,1043,1.857,1044,1.205,1045,1.205,1046,1.205,1047,1.205,1048,2.154,1049,1.205,1050,1.205,1051,1.039,1052,1.205,1053,1.039,1054,1.205,1055,1.205,1056,1.205,1057,5.561,1058,1.205,1059,1.205,1060,1.205,1061,2.934,1062,1.205,1063,5.264,1064,2.154,1065,5.264,1066,5.264,1067,6.269,1068,5.824,1069,4.538,1070,5.264,1071,5.264,1072,5.264,1073,6.631,1074,9.121,1075,8.995,1076,8.995,1077,4.084,1078,4.084,1079,4.084,1080,4.084,1081,4.084,1082,4.084,1083,4.084,1084,5.824,1085,4.084,1086,4.084,1087,3.521,1088,4.084,1089,4.084,1090,4.084,1091,4.084,1092,4.084,1093,4.084,1094,4.084,1095,4.084,1096,4.084,1097,4.084,1098,4.084,1099,3.521,1100,4.084,1101,4.084,1102,4.084,1103,4.084,1104,4.084,1105,4.084,1106,4.084,1107,4.084,1108,4.084,1109,4.084,1110,4.084,1111,4.084,1112,4.084,1113,4.084,1114,4.084,1115,4.084,1116,4.084,1117,4.084,1118,4.084,1119,4.084,1120,4.084,1121,4.084,1122,4.084,1123,4.084,1124,4.084,1125,4.084,1126,4.084,1127,4.084,1128,3.554,1129,3.554,1130,7.063,1131,6.059,1132,2.154,1133,2.154,1134,2.921,1135,1.205,1136,1.039,1137,1.205,1138,2.154,1139,1.205,1140,1.205,1141,1.205,1142,1.039,1143,1.205,1144,1.205,1145,1.205,1146,1.039,1147,1.039,1148,1.039,1149,1.205,1150,1.205]],["component/117",[37,0.539]],["title/118-1",[201,14.919]],["name/118-1",[]],["text/118-1",[]],["component/118-1",[]],["title/118-2",[112,10.214,202,12.473]],["name/118-2",[]],["text/118-2",[]],["component/118-2",[]],["title/118",[688,33.168]],["name/118",[688,2.493]],["text/118",[1,1.729,15,2.447,22,1.84,38,0.626,40,0.626,44,0.723,63,3.906,65,1.778,78,3.388,86,3.256,88,2.767,110,2.143,128,6.783,129,3.824,132,3,133,1.272,174,1.49,191,1.947,209,1.497,218,2.547,220,3.355,223,2.28,237,0.678,238,1.103,239,1.161,240,1.131,241,1.161,263,0.63,264,0.63,265,0.747,368,1.152,371,3.543,372,2.699,392,1.676,393,4.678,404,3.494,414,1.676,419,1.816,425,2.012,456,3.531,520,3.745,534,7.591,540,2.305,584,3.193,638,3.784,679,1.816,681,1.566,688,4.609,699,1.566,726,3.016,729,1.476,809,4.371,867,3.707,885,4.299,985,3.271,986,2.012,994,2.012,1040,1.566,1151,3.794,1152,5.523,1153,5.523,1154,4.299,1155,4.795,1156,8.806,1157,5.523,1158,7.395,1159,6.077,1160,6.512,1161,4.299,1162,3.794,1163,2.333,1164,2.333,1165,2.012,1166,2.012,1167,1.816,1168,2.333]],["component/118",[37,0.539]],["title/119-1",[201,14.919]],["name/119-1",[]],["text/119-1",[]],["component/119-1",[]],["title/119-2",[112,10.214,202,12.473]],["name/119-2",[]],["text/119-2",[]],["component/119-2",[]],["title/119",[39,16.358,54,17.63,203,25.77]],["name/119",[39,1.291,203,2.033]],["text/119",[0,2.007,1,1.366,2,1.512,8,1.745,12,1.416,22,1.853,26,2.007,38,1.028,39,3.712,40,1.028,44,1.188,48,2.827,52,2.449,54,3.3,55,1.948,59,3.677,64,1.987,76,2.705,78,1.892,83,1.892,88,2.899,95,1.357,102,1.987,126,3.179,157,1.807,172,2.913,174,1.502,189,2.984,190,3.305,191,2.349,203,4.397,204,3.833,205,3.833,206,2.46,207,2.007,208,4.144,209,2.46,210,3.833,211,2.984,212,4.797,213,3.833,214,3.833,215,3.305,216,1.582,217,3.833,218,2.573,219,3.833,220,3.979,221,5.564,222,5.564,223,2.297,224,3.3,225,5.564,226,5.162,227,5.564,228,5.564,229,1.539,230,3.997,231,5.564,232,3.38,233,4.797,234,3.52,235,4.332,236,6.55,237,1.115,238,1.618,239,1.702,240,1.659,241,1.173,242,1.268,243,1.416,244,1.457,245,1.416,246,1.457,247,3.833,248,2.117,249,3.833,250,2.984,251,2.984,252,3.305,253,3.305,254,2.573,255,3.305,256,2.46,257,2.753,258,3.833,259,3.833,260,2.216,261,2.573,262,2.425,263,1.034,264,1.034,265,1.227]],["component/119",[37,0.539]],["title/120-1",[201,14.919]],["name/120-1",[]],["text/120-1",[]],["component/120-1",[]],["title/120-2",[112,10.214,202,12.473]],["name/120-2",[]],["text/120-2",[]],["component/120-2",[]],["title/120",[39,16.358,79,20.968,266,24.286]],["name/120",[39,0.988,79,1.267,266,1.467]],["text/120",[1,1.474,2,1.265,6,2.688,11,1.275,12,2.177,22,1.624,38,0.86,39,3.778,40,0.86,44,0.994,48,2.995,49,1.833,51,1.812,52,2.439,53,1.526,54,2.238,56,2.444,59,4.681,61,2.722,62,1.812,64,3.671,75,1.9,79,4.073,83,2.91,86,2.219,87,1.646,88,2.822,102,1.663,105,2.688,120,2.688,125,2.12,126,3.762,153,1.54,157,1.512,174,1.591,191,2.385,193,1.448,208,5.277,216,2.012,224,3.425,229,1.348,237,0.933,238,1.417,239,1.491,240,1.454,241,1.491,242,1.061,243,1.185,252,5.083,261,3.272,263,0.866,264,0.866,265,1.027,266,4.48,267,3.208,268,3.208,269,4.202,270,2.304,271,3.208,272,3.208,273,1.924,274,3.208,275,5.083,276,2.304,277,2.766,278,3.208,279,2.497,280,2.766,281,2.766,282,3.208,283,3.208,284,3.208,285,3.208,286,1.854,287,7.082,288,1.833,289,3.208,290,2.304,291,5.806,292,5.896,293,3.208,294,2.766,295,3.208,296,3.208,297,4.202,298,2.766,299,2.818,300,3.795,301,4.202,302,4.875,303,4.819,304,3.208,305,4.875,306,2.766,307,1.752,308,3.208,309,2.153,310,3.208,311,2.029,312,3.208,313,2.304,314,2.153]],["component/120",[37,0.539]],["title/121-1",[201,14.919]],["name/121-1",[]],["text/121-1",[]],["component/121-1",[]],["title/121-2",[112,10.214,202,12.473]],["name/121-2",[]],["text/121-2",[]],["component/121-2",[]],["title/121",[39,19.693,261,31.024]],["name/121",[39,1.291,261,2.033]],["text/121",[1,1.523,8,1.689,11,1.474,12,1.37,19,3.109,22,1.81,38,0.609,39,3.655,40,0.609,44,0.704,48,2.761,51,3.068,52,2.513,53,1.765,54,1.042,59,5.098,60,1.849,64,1.923,67,1.214,78,1.121,79,3.865,83,1.121,86,3.511,87,1.165,88,2.961,115,1.729,126,4.043,153,1.781,171,2.347,174,1.616,191,2.48,193,1.025,207,1.189,208,5.544,216,0.937,224,2.952,229,1.026,237,0.66,238,1.58,239,1.662,240,1.403,241,1.439,242,1.228,243,1.37,244,1.41,245,1.37,246,0.863,253,1.957,256,1.457,257,5.84,261,4.75,262,1.436,263,0.613,264,0.613,265,0.727,266,2.976,275,3.199,286,1.312,291,5.281,297,6.101,300,5.005,301,4.684,303,2.715,313,1.631,314,1.524,315,3.199,316,2.27,317,2.27,318,1.631,319,2.27,320,1.957,321,1.957,322,1.957,323,3.199,324,1.957,325,1.957,326,5.434,327,5.434,328,5.434,329,2.225,330,3.71,331,4.056,332,5.434,333,3.199,334,3.663,335,2.38,336,5.99,337,5.434,338,3.71,339,2.955,340,5.434,341,3.199,342,2.665,343,5.99,344,0.916,345,0.937,346,0.967,347,0.967,348,2.27,349,2.27,350,2.27,351,2.27,352,1.957,353,2.27,354,2.27,355,2.27,356,2.27,357,1.767]],["component/121",[37,0.539]],["title/122-1",[201,14.919]],["name/122-1",[]],["text/122-1",[]],["component/122-1",[]],["title/122-2",[112,10.214,202,12.473]],["name/122-2",[]],["text/122-2",[]],["component/122-2",[]],["title/122",[39,19.693,208,29.238]],["name/122",[39,1.291,208,1.916]],["text/122",[1,0.399,2,1.37,8,0.954,11,1.768,12,0.774,15,1.239,19,1.757,21,2.005,22,1.724,26,1.098,27,0.769,36,1.29,38,0.562,39,3.392,40,0.562,44,0.65,47,0.938,48,1.065,52,1.711,53,2.117,54,0.963,56,1.597,59,2.296,60,1.045,64,3.206,67,2.379,74,1.757,77,1.597,78,3.712,79,1.145,83,1.715,86,0.954,87,1.783,88,1.62,89,2.647,95,0.742,102,1.086,124,2.198,125,1.385,126,1.198,138,1.597,153,1.006,174,0.938,176,2.419,191,2.584,193,0.946,203,1.407,207,1.819,208,4.757,212,1.807,216,1.434,224,3.529,229,0.961,237,0.61,262,1.326,263,0.938,264,0.566,265,0.671,266,2.198,269,1.807,286,1.212,298,4.463,299,4.603,300,2.705,315,1.807,320,1.807,321,1.807,322,1.807,323,2.995,331,1.807,333,4.463,335,2.229,341,2.995,357,1.632,358,1.632,359,2.096,360,1.807,361,2.096,362,1.632,363,1.807,364,1.407,365,1.632,366,2.096,367,5.176,368,1.715,369,4.527,370,3.475,371,3.969,372,2.334,373,4.463,374,5.176,375,2.768,376,3.475,377,3.475,378,6.187,379,2.995,380,2.995,381,3.475,382,6.187,383,3.475,384,1.783,385,3.475,386,3.475,387,3.475,388,3.475,389,3.475,390,5.176,391,5.176,392,2.496,393,2.198,394,3.475,395,3.475,396,6.187,397,3.475,398,3.475,399,3.475,400,3.475,401,3.475,402,3.475,403,3.475,404,1.326,405,1.632,406,2.096,407,2.096,408,1.807,409,1.326,410,1.807,411,4.45,412,3.475,413,2.096,414,1.506,415,1.807,416,2.995,417,2.096,418,1.257,419,1.632,420,1.632,421,2.096,422,2.096,423,1.632,424,2.096,425,1.807,426,1.632,427,2.096,428,1.807,429,1.807,430,2.096,431,1.145,432,2.096]],["component/122",[37,0.539]],["title/123-1",[201,14.919]],["name/123-1",[]],["text/123-1",[]],["component/123-1",[]],["title/123-2",[112,10.214,202,12.473]],["name/123-2",[]],["text/123-2",[]],["component/123-2",[]],["title/123",[12,12.125,106,12.948,176,15.343,538,22.394]],["name/123",[106,0.741,176,0.878,433,1.497,538,1.282]],["text/123",[1,0.444,3,1.805,12,2.807,22,0.777,27,0.856,38,0.626,40,0.626,44,0.723,45,1.365,52,1.131,78,1.152,91,2.028,99,3.65,106,3.271,109,4.018,132,1.247,162,2.434,174,0.63,176,3.921,191,2.593,223,1.566,224,2.99,230,2.725,237,0.678,238,0.678,239,0.714,240,0.696,241,0.714,242,0.772,243,0.862,244,0.887,245,0.862,246,0.887,248,1.288,255,3.271,263,0.63,264,0.63,265,0.747,334,2.954,344,0.941,345,0.963,346,0.994,347,0.994,368,1.873,369,4.447,373,3.271,434,1.11,436,1.288,437,1.027,453,2.952,469,1.027,470,1.027,471,1.027,472,0.971,473,1.1,474,1.141,475,1.349,476,1.349,477,1.349,478,1.418,479,1.497,480,1.591,481,1.497,482,1.418,521,4.299,538,2.588,539,3.444,540,2.305,541,2.333,542,3.707,543,2.333,544,2.588,545,6.077,546,7.933,547,6.512,548,3.794,549,5.614,550,7.152,551,3.794,552,6.512,553,7.152,554,5.523,555,5.523,556,5.523,557,5.523,558,7.152,559,4.761,560,5.523,561,5.523,562,4.795,563,2.954,564,3.271,565,3.271,566,3.271,567,4.761,568,3.794,569,3.794,570,3.794,571,3.794,572,1.816,573,1.676,574,1.816,575,1.816,576,2.333,577,2.333]],["component/123",[37,0.539]],["title/124-1",[201,14.919]],["name/124-1",[]],["text/124-1",[]],["component/124-1",[]],["title/124-2",[112,10.214,202,12.473]],["name/124-2",[]],["text/124-2",[]],["component/124-2",[]],["title/124",[132,9.426,133,9.617,176,13.402,193,12.946,1169,18.142]],["name/124",[133,0.63,176,0.878,193,0.848,1169,1.189]],["text/124",[1,1.36,8,0.825,15,2.551,22,1.334,26,0.949,27,2.462,38,0.486,40,0.486,44,0.562,51,1.737,53,1.463,60,1.533,62,1.023,78,2.33,81,1.822,83,0.895,87,0.93,88,1.459,95,0.642,97,1.012,102,2.076,106,2.956,121,1.198,129,3.771,132,1.551,133,1.583,134,0.818,140,0.939,153,0.87,171,1.146,174,1.55,176,4.161,178,1.875,191,2.526,193,3.23,194,2.877,209,2.57,216,0.748,223,2.182,229,1.306,237,1.781,238,1.67,239,1.757,240,1.713,241,0.941,242,0.6,243,0.669,244,0.689,245,0.669,246,0.689,248,1.001,260,3.055,263,0.489,264,0.83,265,1.511,279,1.411,286,1.048,299,3.32,309,2.064,329,1.087,342,1.302,344,0.731,345,0.748,346,0.772,347,0.772,372,2.534,393,3.633,405,1.411,423,1.411,426,1.411,436,1.001,437,0.798,469,0.798,470,0.798,471,0.798,472,0.754,473,0.854,474,0.886,475,1.048,476,1.048,477,1.048,478,1.101,479,1.163,520,1.61,542,2.064,584,1.778,587,2.098,624,1.326,638,1.627,651,1.845,652,1.411,655,1.302,657,1.411,681,2.064,689,2.209,699,2.689,723,2.209,786,4.741,983,2.064,1051,1.562,1146,1.562,1154,1.411,1169,4.075,1170,2.651,1171,1.562,1172,1.562,1173,3.454,1174,1.411,1175,1.411,1176,1.562,1177,1.562,1178,1.562,1179,1.562,1180,1.562,1181,1.562,1182,1.562,1183,1.562,1184,6.695,1185,7.766,1186,2.651,1187,4.069,1188,1.562,1189,1.411,1190,1.562,1191,4.069,1192,4.952,1193,6.461,1194,2.651,1195,2.651,1196,6.695,1197,3.075,1198,6.443,1199,5.744,1200,2.651,1201,3.075,1202,4.72,1203,3.075,1204,3.075,1205,1.562,1206,1.812,1207,1.812,1208,1.562,1209,1.562,1210,1.562,1211,1.411,1212,1.562,1213,1.411,1214,1.812,1215,1.812,1216,1.812,1217,1.562]],["component/124",[37,0.539]],["title/125-1",[201,14.919]],["name/125-1",[]],["text/125-1",[]],["component/125-1",[]],["title/125-2",[112,10.214,202,12.473]],["name/125-2",[]],["text/125-2",[]],["component/125-2",[]],["title/125",[176,15.343,193,14.82,983,22.038,1174,25.56]],["name/125",[176,0.878,193,0.848,729,1.189,1169,1.189]],["text/125",[1,1.426,8,0.549,12,0.445,15,2.304,22,0.718,26,0.631,27,1.499,38,0.323,40,0.323,44,0.374,51,1.217,52,0.36,53,1.026,54,0.554,60,0.601,62,0.681,64,2.118,78,2.24,81,1.277,83,0.595,87,0.619,88,2.122,89,0.919,91,1.152,95,0.763,97,0.673,99,2.35,102,1.117,106,2.734,129,2.932,132,1.829,133,2.103,140,0.625,153,0.579,171,1.364,174,1.421,176,4.015,178,1.161,191,2.573,193,3.244,194,3.996,209,1.876,211,0.939,216,0.498,223,2.034,224,0.99,229,1.457,237,0.351,238,1.531,239,1.611,240,1.47,241,0.894,242,0.713,243,0.796,244,0.819,245,0.796,246,0.819,248,1.19,257,0.866,260,3.044,263,0.325,264,0.582,265,1.138,266,0.763,279,0.939,286,0.697,299,2.363,309,0.81,329,0.723,342,0.866,344,0.87,345,0.89,346,0.918,347,0.918,352,1.04,360,1.859,368,1.064,372,2.287,392,1.548,393,4.087,408,1.859,409,0.763,423,0.939,426,0.939,431,1.177,436,0.666,453,1.901,469,0.949,470,0.949,471,0.949,472,0.897,473,1.016,474,1.054,475,1.246,476,1.246,477,1.246,478,1.31,479,1.383,480,1.47,481,1.383,482,1.31,521,1.678,524,1.04,531,2.52,542,0.81,564,1.859,566,3.066,572,1.678,573,1.548,574,1.678,575,1.678,584,1.246,616,1.578,624,0.883,638,3.509,651,1.293,652,0.939,657,0.939,659,0.723,665,1.678,666,1.859,676,2.1,681,1.447,688,0.689,689,1.548,699,1.962,729,2.585,786,4.087,847,1.04,915,1.859,983,1.447,1033,1.678,1034,1.678,1154,0.939,1169,4.95,1170,1.859,1171,1.04,1172,1.04,1173,2.52,1174,1.678,1175,0.939,1176,1.04,1177,1.04,1178,1.04,1179,1.04,1180,1.04,1181,1.04,1182,1.04,1183,1.04,1184,6.292,1186,1.859,1187,4.248,1188,1.04,1189,0.939,1190,1.04,1191,4.248,1192,3.523,1193,5.978,1194,1.859,1195,1.859,1196,5.719,1200,2.52,1208,1.04,1209,1.04,1210,1.04,1212,1.04,1213,0.939,1218,1.859,1219,2.156,1220,4.087,1221,2.156,1222,2.156,1223,2.156,1224,2.156,1225,3.556,1226,3.556,1227,3.556,1228,3.556,1229,2.156,1230,3.556,1231,3.556,1232,2.156,1233,2.156,1234,2.156,1235,2.156,1236,2.156,1237,2.156,1238,2.156,1239,1.206,1240,1.206,1241,4.087,1242,4.087,1243,4.087,1244,2.156,1245,1.206,1246,1.206,1247,1.206,1248,1.206,1249,1.04,1250,1.206,1251,1.206]],["component/125",[37,0.539]],["title/126-1",[201,14.919]],["name/126-1",[]],["text/126-1",[]],["component/126-1",[]],["title/126-2",[112,10.214,202,12.473]],["name/126-2",[]],["text/126-2",[]],["component/126-2",[]],["title/126",[34,23.256,1252,39.848]],["name/126",[34,1.167,1253,2,1254,2]],["text/126",[1,1.154,3,1.309,15,2.164,22,0.917,27,1.009,34,2.178,38,0.738,40,0.738,44,0.853,63,1.503,80,4.944,86,1.971,115,2.096,133,0.923,134,1.242,174,0.743,191,2.567,223,1.787,229,1.825,237,0.8,238,0.8,239,0.842,240,0.821,241,2.144,242,0.91,243,1.016,244,1.046,245,1.016,246,1.046,263,0.743,264,0.743,265,0.881,280,2.372,299,2.503,344,2.662,345,1.136,346,1.172,347,1.172,372,1.634,416,2.372,434,1.309,469,1.211,470,1.211,471,1.211,732,3.732,867,3.592,997,2.372,999,2.372,1004,6.041,1005,4.614,1006,4.614,1007,4.614,1008,4.614,1009,4.614,1010,4.614,1011,4.614,1012,4.614,1013,4.614,1014,4.614,1015,3.732,1016,7.553,1061,3.11,1069,5.232,1189,3.37,1213,2.142,1252,7.418,1253,3.732,1254,5.232,1255,2.752,1256,2.752,1257,2.752,1258,2.752,1259,4.329,1260,2.752,1261,4.329,1262,7.008,1263,5.352,1264,7.008,1265,5.352,1266,5.352,1267,5.352,1268,5.352,1269,5.352,1270,4.329,1271,4.329,1272,4.329,1273,6.069,1274,6.069,1275,4.329,1276,4.329,1277,4.329,1278,4.329,1279,2.752,1280,2.752,1281,2.752,1282,2.752,1283,2.752]],["component/126",[37,0.539]],["title/127-1",[201,14.919]],["name/127-1",[]],["text/127-1",[]],["component/127-1",[]],["title/127-2",[112,10.214,202,12.473]],["name/127-2",[]],["text/127-2",[]],["component/127-2",[]],["title/127",[186,27.578,224,17.63,437,16.899]],["name/127",[224,2.004]],["text/127",[1,1.589,11,0.56,12,0.52,15,1.614,16,2.073,22,0.469,27,0.517,38,0.378,40,0.378,44,0.437,47,1.78,48,2.021,53,1.177,54,0.647,60,1.233,76,0.994,81,1.465,83,0.695,88,1.959,91,1.322,95,2.297,102,0.73,106,1.786,111,2.073,128,3.8,129,3.365,130,3.879,131,4.238,132,2.403,133,1.804,153,1.588,172,3.951,174,1.897,186,1.012,191,2.387,216,2.359,220,2.416,223,2.585,224,3.413,226,2.857,229,1.581,237,0.41,238,1.821,239,1.646,240,1.604,241,1.646,242,1.651,243,1.672,244,1.512,245,0.914,246,0.94,248,2.754,256,0.904,263,0.38,264,0.668,290,1.777,311,0.891,314,0.945,344,0.568,345,0.581,346,0.6,347,0.6,368,1.221,371,1.587,372,2.955,404,1.565,409,0.891,420,1.097,428,2.133,431,2.172,437,0.62,453,1.322,456,1.221,469,0.62,470,0.62,471,0.62,472,0.586,473,0.664,474,0.689,475,2.884,476,0.814,477,0.814,478,0.856,479,0.904,480,0.961,481,0.904,482,0.856,512,1.66,520,3.502,530,1.926,542,1.66,549,1.214,572,1.097,573,1.012,574,1.097,575,1.097,581,2.416,582,4.685,584,1.43,586,1.97,591,3.089,638,3.719,647,1.122,651,1.484,655,1.012,659,0.845,681,1.66,688,2.272,715,1.214,729,2.516,733,4.927,786,4.625,789,1.777,818,1.097,863,1.777,891,1.926,900,2.133,983,1.66,984,1.214,1033,1.097,1034,1.097,1087,1.214,1099,1.214,1161,3.097,1175,1.097,1211,1.097,1218,1.214,1284,7.546,1285,2.474,1286,1.409,1287,2.474,1288,5.379,1289,5.379,1290,3.978,1291,3.307,1292,6.006,1293,5.715,1294,2.474,1295,6.006,1296,3.978,1297,6.006,1298,4.989,1299,3.978,1300,2.474,1301,2.474,1302,2.474,1303,3.978,1304,3.978,1305,2.474,1306,2.474,1307,2.133,1308,2.474,1309,2.474,1310,2.474,1311,2.474,1312,2.474,1313,2.474,1314,5.715,1315,3.978,1316,2.474,1317,6.689,1318,7.031,1319,2.474,1320,2.133,1321,2.474,1322,1.409,1323,1.409,1324,1.409,1325,2.133,1326,2.474,1327,1.409,1328,1.214,1329,1.409,1330,1.409,1331,1.409,1332,1.409,1333,1.409,1334,1.097]],["component/127",[37,0.539]],["title/128-1",[201,14.919]],["name/128-1",[]],["text/128-1",[]],["component/128-1",[]],["title/128-2",[112,10.214,202,12.473]],["name/128-2",[]],["text/128-2",[]],["component/128-2",[]],["title/128",[117,23.953,167,23.325,193,17.33]],["name/128",[117,1.447,167,1.409,193,1.047]],["text/128",[1,1.731,27,1.432,38,1.047,40,1.047,44,1.21,50,4.428,75,4.294,78,1.927,88,3.225,102,2.024,106,1.54,124,2.47,132,2.97,134,3.47,136,2.755,162,3.618,167,4.404,174,1.786,191,2.11,193,3.616,216,1.612,229,1.56,237,1.135,238,1.135,263,1.054,264,1.054,265,1.25,273,2.342,288,3.222,384,2.004,434,1.858,436,2.156,620,3.426,622,4.021,641,4.127,794,4.862,974,4.862,1334,4.39,1335,8.456,1336,5.639,1337,8.26,1338,5.639,1339,8.748,1340,5.639,1341,5.639,1342,5.639,1343,7.688,1344,5.639,1345,5.639,1346,5.639,1347,5.639,1348,3.366]],["component/128",[37,0.539]],["title/129-1",[201,14.919]],["name/129-1",[]],["text/129-1",[]],["component/129-1",[]],["title/129-2",[112,10.214,202,12.473]],["name/129-2",[]],["text/129-2",[]],["component/129-2",[]],["title/129",[71,25.012,110,18.542,1349,28.306,1350,32.834]],["name/129",[71,2.308,1351,2.611]],["text/129",[1,1.362,6,6.656,38,1.485,40,1.485,44,1.716,52,1.651,64,2.87,79,3.024,110,3.127,191,2.211,223,2.286,229,1.982,233,6.177,234,4.532,235,5.577,237,1.61,263,1.494,264,1.494,265,1.773,288,4.537,291,4.311,318,5.146,345,2.286,365,4.311,540,3.364,1043,4.774,1061,3.977,1349,6.177,1351,6.847,1352,5.538,1353,7.165,1354,7.943,1355,7.165,1356,6.847,1357,7.943,1358,5.538,1359,5.538,1360,5.538,1361,5.538,1362,5.538,1363,5.538,1364,4.774]],["component/129",[37,0.539]],["title/130-1",[201,14.919]],["name/130-1",[]],["text/130-1",[]],["component/130-1",[]],["title/130-2",[112,10.214,202,12.473]],["name/130-2",[]],["text/130-2",[]],["component/130-2",[]],["title/130",[206,24.633,229,10.62,437,16.899]],["name/130",[206,1.944,229,0.838]],["text/130",[1,1.657,22,2.264,38,1.371,40,1.371,44,1.584,60,2.547,62,2.886,63,2.791,64,2.648,73,4.282,95,1.809,97,2.853,132,1.68,134,3.068,169,4.405,174,2.287,191,2.143,206,3.279,207,2.676,229,2.46,230,4.882,237,1.486,238,2.221,239,1.563,240,1.524,241,1.563,263,1.379,264,1.379,265,1.636,307,2.791,437,2.992,439,3.977,473,2.409,475,2.954,507,3.43,540,3.104,591,3.485,646,3.74,892,3.978,1142,4.405,1161,6.598,1167,3.978,1211,3.978,1249,4.405,1365,7.637,1366,5.11,1367,6.797,1368,7.637,1369,5.11,1370,5.11,1371,5.11]],["component/130",[37,0.539]],["title/131-1",[201,14.919]],["name/131-1",[]],["text/131-1",[]],["component/131-1",[]],["title/131-2",[112,10.214,202,12.473]],["name/131-2",[]],["text/131-2",[]],["component/131-2",[]],["title/131",[1,8.788,578,30.547]],["name/131",[1,0.576,578,2.002]],["text/131",[1,1.691,12,1.835,15,1.003,34,2.5,37,0.328,38,0.438,40,0.438,44,0.506,47,2.43,50,1.473,52,1.832,75,1.667,79,1.537,86,1.281,88,1.809,94,1.272,95,1.56,112,0.622,126,1.608,127,3.102,129,1.865,132,1.633,133,1.243,159,2.059,162,2.378,174,1.909,191,2.515,206,1.048,220,2.677,223,1.162,224,2.023,229,2.045,232,4.983,237,0.475,238,1.281,239,1.134,240,1.105,241,1.134,242,0.54,243,0.603,244,0.621,245,0.603,246,1.07,256,1.048,263,0.441,264,0.441,335,1.048,339,1.301,344,0.659,368,1.389,369,1.195,371,1.805,372,1.662,384,1.444,434,2.096,439,2.169,453,1.504,456,1.389,472,1.171,533,5.313,538,1.114,540,1.71,544,1.919,578,4.408,579,1.195,580,1.453,581,4.4,582,1.919,583,1.919,584,1.627,585,1.919,586,3.51,587,1.919,588,4.19,589,2.502,590,2.502,591,3.005,592,7.294,593,5.263,594,7.294,595,2.502,596,3.51,597,4.383,598,2.502,599,3.918,600,2.502,601,2.502,602,3.224,603,2.502,604,4.633,605,2.502,606,2.502,607,3.51,608,2.502,609,2.502,610,3.51,611,3.51,612,2.502,613,2.502,614,6.441,615,3.51,616,3.224,617,2.242,618,2.502,619,4.829,620,3.299,621,3.918,622,3.732,623,3.918,624,3.224,625,3.918,626,3.51,627,2.502,628,2.502,629,3.296,630,2.502,631,3.296,632,1.453,633,2.502,634,2.502,635,2.502,636,2.502,637,2.502,638,2.331,639,1.919,640,2.502,641,2.059,642,1.453,643,1.453,644,1.453,645,1.453,646,1.195,647,1.301,648,1.453,649,1.453,650,1.453]],["component/131",[37,0.539]],["title/132-1",[201,14.919]],["name/132-1",[]],["text/132-1",[]],["component/132-1",[]],["title/132-2",[112,10.214,202,12.473]],["name/132-2",[]],["text/132-2",[]],["component/132-2",[]],["title/132",[27,9.335,106,10.04,726,13.904,792,18.287,804,18.287,933,18.287]],["name/132",[106,0.623,726,0.863,792,1.135,804,1.135,933,1.135]],["text/132",[1,0.972,38,1.371,40,1.371,44,1.584,52,1.524,60,2.547,117,5.079,174,1.379,186,3.67,187,3.67,191,2.496,229,2.113,238,1.486,239,1.563,240,1.524,241,1.563,242,1.691,245,1.887,263,1.379,264,1.379,265,2.176,307,2.791,364,3.43,372,1.928,384,3.488,544,3.485,563,3.978,726,2.791,787,3.67,788,3.67,792,5.486,800,4.405,804,5.486,891,3.978,933,5.847,943,7.018,964,4.405,1348,5.86,1372,5.11,1373,7.637,1374,8.14,1375,6.797,1376,6.797,1377,6.797,1378,5.11,1379,5.11]],["component/132",[37,0.539]],["title/133-1",[201,14.919]],["name/133-1",[]],["text/133-1",[]],["component/133-1",[]],["title/133-2",[112,10.214,202,12.473]],["name/133-2",[]],["text/133-2",[]],["component/133-2",[]],["title/133",[132,12.619,372,14.487,539,27.578]],["name/133",[132,0.762,372,0.875,539,1.666]],["text/133",[1,1.559,2,2.234,8,1.37,15,1.073,16,3.889,22,2.292,34,1.514,38,0.807,40,0.807,44,0.932,49,1.719,50,1.575,61,1.68,67,1.608,81,4.306,88,2.063,95,2.006,106,2.234,129,4.446,132,2.82,133,2.937,140,1.559,148,2.123,174,1.719,191,2.159,216,1.242,223,1.916,229,1.762,237,0.875,238,2.001,239,1.733,240,1.384,241,1.42,250,2.342,251,2.342,263,0.812,264,0.812,265,0.963,277,2.594,286,2.683,290,4.574,294,2.594,307,1.643,318,5.621,325,4.884,372,3.305,404,1.903,434,1.431,448,3.165,511,2.161,539,5.443,579,2.202,581,2.819,582,4.693,585,4.693,638,2.997,659,1.804,1147,4.001,1166,2.594,1167,2.342,1356,4.884,1364,2.594,1380,3.008,1381,7.578,1382,6.369,1383,5.666,1384,5.666,1385,5.666,1386,5.666,1387,5.666,1388,5.666,1389,5.666,1390,5.666,1391,5.666,1392,4.641,1393,4.641,1394,4.641,1395,4.641,1396,3.008,1397,2.594,1398,3.008,1399,3.008,1400,3.008,1401,3.008,1402,3.008,1403,3.008]],["component/133",[37,0.539]],["title/134-1",[201,14.919]],["name/134-1",[]],["text/134-1",[]],["component/134-1",[]],["title/134-2",[112,10.214,202,12.473]],["name/134-2",[]],["text/134-2",[]],["component/134-2",[]],["title/134",[110,21.682,1027,27.578,1404,38.394]],["name/134",[110,1.061,130,1.061,131,1.326,1027,1.35]],["text/134",[1,1.671,27,0.945,38,0.691,40,0.691,44,0.799,47,1.84,49,1.472,76,1.818,95,2.263,98,2.16,130,3.847,131,4.806,132,1.351,133,1.378,174,1.838,191,2.208,226,5.633,229,1.977,238,1.981,239,2.084,240,1.745,241,1.568,242,1.696,263,0.695,264,0.695,288,2.348,307,1.407,329,3.075,364,1.73,404,1.63,410,4.42,415,2.222,431,2.245,443,3.274,517,2.952,530,6.105,581,5.095,585,2.803,587,2.803,602,3.752,653,3.2,659,1.546,676,5.331,680,2.006,714,6.234,760,3.543,786,4.309,789,6.024,796,4.42,818,2.006,988,4.893,1027,2.952,1307,6.761,1320,3.543,1325,3.543,1328,2.222,1334,2.006,1397,3.543,1405,2.577,1406,7.147,1407,7.147,1408,5.85,1409,7.843,1410,4.11,1411,5.127,1412,5.127,1413,5.127,1414,7.147,1415,5.85,1416,5.85,1417,5.85,1418,5.85,1419,5.85,1420,4.11,1421,4.11,1422,4.11,1423,4.11,1424,4.11,1425,4.11,1426,4.11,1427,4.11,1428,4.11,1429,4.11,1430,4.11,1431,2.577,1432,4.11,1433,2.577]],["component/134",[37,0.539]],["title/135-1",[201,14.919]],["name/135-1",[]],["text/135-1",[]],["component/135-1",[]],["title/135-2",[112,10.214,202,12.473]],["name/135-2",[]],["text/135-2",[]],["component/135-2",[]],["title/135",[132,12.619,178,15.254,1434,33.1]],["name/135",[132,0.996,1435,2.611]],["text/135",[0,1.233,1,1.161,2,1.508,7,3.657,8,2.528,11,2.737,12,0.87,22,1.607,26,1.233,32,2.253,37,0.473,38,0.632,40,0.632,44,0.73,47,2.16,53,2.296,54,1.081,57,2.912,66,1.794,83,1.163,87,3.133,88,2.613,91,2.044,95,1.966,97,2.134,99,3.67,101,3.204,102,1.981,103,3.204,106,0.929,132,2.817,153,2.316,174,1.032,178,2.852,191,2.512,207,1.233,216,0.972,223,2.844,229,1.057,237,1.112,238,1.112,239,1.699,240,1.14,241,1.17,242,0.779,243,0.87,244,0.895,245,0.87,246,0.895,248,1.3,254,2.566,260,2.789,263,0.636,264,1.032,270,1.692,273,1.413,276,1.692,290,1.692,307,1.286,313,1.692,314,1.581,329,1.413,342,1.692,344,0.95,345,0.972,346,1.003,347,1.003,363,2.03,368,1.887,372,1.442,384,1.962,393,3.513,404,2.418,405,1.833,409,1.49,414,2.746,431,1.286,453,2.969,469,1.037,470,1.037,471,1.037,472,0.98,473,1.11,474,1.152,475,1.361,476,1.361,477,1.361,506,1.692,507,1.581,559,2.03,565,4.788,622,2.931,653,1.833,661,2.03,684,2.03,688,2.184,699,1.581,704,1.833,809,1.581,855,3.296,988,2.746,1053,3.296,1061,4.386,1136,2.03,1148,2.03,1165,2.03,1169,2.418,1205,2.03,1217,3.296,1434,5.264,1435,4.16,1436,2.355,1437,5.553,1438,3.823,1439,3.823,1440,3.823,1441,2.355,1442,5.553,1443,5.553,1444,2.355,1445,2.355,1446,2.355,1447,3.823,1448,2.355,1449,2.355,1450,2.355,1451,2.355,1452,2.355,1453,2.355,1454,2.355,1455,2.355,1456,8.207,1457,3.823,1458,3.823,1459,3.823,1460,5.553,1461,6.54,1462,3.823,1463,3.823,1464,3.823,1465,3.823,1466,3.823,1467,3.823,1468,3.823,1469,3.823,1470,3.823,1471,3.823,1472,2.355,1473,2.355,1474,2.355,1475,2.355,1476,2.355,1477,2.355,1478,2.355]],["component/135",[37,0.539]],["title/136",[39,24.736]],["name/136",[3,2.076]],["text/136",[0,4.489,11,3.407,12,2.417,13,6.024,39,2.789,45,3.83,46,6.261,47,2.93,48,3.326,49,3.74,50,3.427,51,3.697,52,1.952,53,3.114,54,3.006,55,3.326,56,4.987,57,4.987,58,6.261,59,4.326,60,3.262,61,3.655,62,3.697,63,3.575,64,3.393,65,4.987,66,4.987]],["component/136",[37,0.539]],["title/137-1",[201,14.919]],["name/137-1",[]],["text/137-1",[]],["component/137-1",[]],["title/137-2",[112,10.214,202,12.473]],["name/137-2",[]],["text/137-2",[]],["component/137-2",[]],["title/137",[39,16.358,54,17.63,203,25.77]],["name/137",[39,1.291,203,2.033]],["text/137",[0,2.007,1,1.366,2,1.512,8,1.745,12,1.416,22,1.853,26,2.007,38,1.028,39,3.712,40,1.028,44,1.188,48,2.827,52,2.449,54,3.3,55,1.948,59,3.677,64,1.987,76,2.705,78,1.892,83,1.892,88,2.899,95,1.357,102,1.987,126,3.179,157,1.807,172,2.913,174,1.502,189,2.984,190,3.305,191,2.349,203,4.397,204,3.833,205,3.833,206,2.46,207,2.007,208,4.144,209,2.46,210,3.833,211,2.984,212,4.797,213,3.833,214,3.833,215,3.305,216,1.582,217,3.833,218,2.573,219,3.833,220,3.979,221,5.564,222,5.564,223,2.297,224,3.3,225,5.564,226,5.162,227,5.564,228,5.564,229,1.539,230,3.997,231,5.564,232,3.38,233,4.797,234,3.52,235,4.332,236,6.55,237,1.115,238,1.618,239,1.702,240,1.659,241,1.173,242,1.268,243,1.416,244,1.457,245,1.416,246,1.457,247,3.833,248,2.117,249,3.833,250,2.984,251,2.984,252,3.305,253,3.305,254,2.573,255,3.305,256,2.46,257,2.753,258,3.833,259,3.833,260,2.216,261,2.573,262,2.425,263,1.034,264,1.034,265,1.227]],["component/137",[37,0.539]],["title/138-1",[201,14.919]],["name/138-1",[]],["text/138-1",[]],["component/138-1",[]],["title/138-2",[112,10.214,202,12.473]],["name/138-2",[]],["text/138-2",[]],["component/138-2",[]],["title/138",[39,16.358,79,20.968,266,24.286]],["name/138",[39,0.988,79,1.267,266,1.467]],["text/138",[1,1.474,2,1.265,6,2.688,11,1.275,12,2.177,22,1.624,38,0.86,39,3.778,40,0.86,44,0.994,48,2.995,49,1.833,51,1.812,52,2.439,53,1.526,54,2.238,56,2.444,59,4.681,61,2.722,62,1.812,64,3.671,75,1.9,79,4.073,83,2.91,86,2.219,87,1.646,88,2.822,102,1.663,105,2.688,120,2.688,125,2.12,126,3.762,153,1.54,157,1.512,174,1.591,191,2.385,193,1.448,208,5.277,216,2.012,224,3.425,229,1.348,237,0.933,238,1.417,239,1.491,240,1.454,241,1.491,242,1.061,243,1.185,252,5.083,261,3.272,263,0.866,264,0.866,265,1.027,266,4.48,267,3.208,268,3.208,269,4.202,270,2.304,271,3.208,272,3.208,273,1.924,274,3.208,275,5.083,276,2.304,277,2.766,278,3.208,279,2.497,280,2.766,281,2.766,282,3.208,283,3.208,284,3.208,285,3.208,286,1.854,287,7.082,288,1.833,289,3.208,290,2.304,291,5.806,292,5.896,293,3.208,294,2.766,295,3.208,296,3.208,297,4.202,298,2.766,299,2.818,300,3.795,301,4.202,302,4.875,303,4.819,304,3.208,305,4.875,306,2.766,307,1.752,308,3.208,309,2.153,310,3.208,311,2.029,312,3.208,313,2.304,314,2.153]],["component/138",[37,0.539]],["title/139-1",[201,14.919]],["name/139-1",[]],["text/139-1",[]],["component/139-1",[]],["title/139-2",[112,10.214,202,12.473]],["name/139-2",[]],["text/139-2",[]],["component/139-2",[]],["title/139",[39,19.693,261,31.024]],["name/139",[39,1.291,261,2.033]],["text/139",[1,1.523,8,1.689,11,1.474,12,1.37,19,3.109,22,1.81,38,0.609,39,3.655,40,0.609,44,0.704,48,2.761,51,3.068,52,2.513,53,1.765,54,1.042,59,5.098,60,1.849,64,1.923,67,1.214,78,1.121,79,3.865,83,1.121,86,3.511,87,1.165,88,2.961,115,1.729,126,4.043,153,1.781,171,2.347,174,1.616,191,2.48,193,1.025,207,1.189,208,5.544,216,0.937,224,2.952,229,1.026,237,0.66,238,1.58,239,1.662,240,1.403,241,1.439,242,1.228,243,1.37,244,1.41,245,1.37,246,0.863,253,1.957,256,1.457,257,5.84,261,4.75,262,1.436,263,0.613,264,0.613,265,0.727,266,2.976,275,3.199,286,1.312,291,5.281,297,6.101,300,5.005,301,4.684,303,2.715,313,1.631,314,1.524,315,3.199,316,2.27,317,2.27,318,1.631,319,2.27,320,1.957,321,1.957,322,1.957,323,3.199,324,1.957,325,1.957,326,5.434,327,5.434,328,5.434,329,2.225,330,3.71,331,4.056,332,5.434,333,3.199,334,3.663,335,2.38,336,5.99,337,5.434,338,3.71,339,2.955,340,5.434,341,3.199,342,2.665,343,5.99,344,0.916,345,0.937,346,0.967,347,0.967,348,2.27,349,2.27,350,2.27,351,2.27,352,1.957,353,2.27,354,2.27,355,2.27,356,2.27,357,1.767]],["component/139",[37,0.539]],["title/140-1",[201,14.919]],["name/140-1",[]],["text/140-1",[]],["component/140-1",[]],["title/140-2",[112,10.214,202,12.473]],["name/140-2",[]],["text/140-2",[]],["component/140-2",[]],["title/140",[39,19.693,208,29.238]],["name/140",[39,1.291,208,1.916]],["text/140",[1,0.399,2,1.37,8,0.954,11,1.768,12,0.774,15,1.239,19,1.757,21,2.005,22,1.724,26,1.098,27,0.769,36,1.29,38,0.562,39,3.392,40,0.562,44,0.65,47,0.938,48,1.065,52,1.711,53,2.117,54,0.963,56,1.597,59,2.296,60,1.045,64,3.206,67,2.379,74,1.757,77,1.597,78,3.712,79,1.145,83,1.715,86,0.954,87,1.783,88,1.62,89,2.647,95,0.742,102,1.086,124,2.198,125,1.385,126,1.198,138,1.597,153,1.006,174,0.938,176,2.419,191,2.584,193,0.946,203,1.407,207,1.819,208,4.757,212,1.807,216,1.434,224,3.529,229,0.961,237,0.61,262,1.326,263,0.938,264,0.566,265,0.671,266,2.198,269,1.807,286,1.212,298,4.463,299,4.603,300,2.705,315,1.807,320,1.807,321,1.807,322,1.807,323,2.995,331,1.807,333,4.463,335,2.229,341,2.995,357,1.632,358,1.632,359,2.096,360,1.807,361,2.096,362,1.632,363,1.807,364,1.407,365,1.632,366,2.096,367,5.176,368,1.715,369,4.527,370,3.475,371,3.969,372,2.334,373,4.463,374,5.176,375,2.768,376,3.475,377,3.475,378,6.187,379,2.995,380,2.995,381,3.475,382,6.187,383,3.475,384,1.783,385,3.475,386,3.475,387,3.475,388,3.475,389,3.475,390,5.176,391,5.176,392,2.496,393,2.198,394,3.475,395,3.475,396,6.187,397,3.475,398,3.475,399,3.475,400,3.475,401,3.475,402,3.475,403,3.475,404,1.326,405,1.632,406,2.096,407,2.096,408,1.807,409,1.326,410,1.807,411,4.45,412,3.475,413,2.096,414,1.506,415,1.807,416,2.995,417,2.096,418,1.257,419,1.632,420,1.632,421,2.096,422,2.096,423,1.632,424,2.096,425,1.807,426,1.632,427,2.096,428,1.807,429,1.807,430,2.096,431,1.145,432,2.096]],["component/140",[37,0.539]],["title/141-1",[201,14.919]],["name/141-1",[]],["text/141-1",[]],["component/141-1",[]],["title/141-2",[112,10.214,202,12.473]],["name/141-2",[]],["text/141-2",[]],["component/141-2",[]],["title/141",[136,27.088,506,27.578,507,25.77]],["name/141",[136,1.636,506,1.666,507,1.557]],["text/141",[1,0.96,11,1.336,12,2.804,15,2.163,34,2.541,38,0.902,40,0.902,44,1.042,48,1.708,49,1.921,54,1.544,57,4.621,64,1.743,95,2.148,99,4.457,102,2.618,125,2.222,130,1.899,140,1.743,153,1.614,174,0.907,191,2.537,211,2.617,215,2.899,216,2.085,226,3.628,230,3.628,237,2.41,238,0.978,239,1.029,240,1.003,241,1.029,242,1.112,243,1.242,244,1.278,245,1.242,246,1.278,256,2.157,263,0.907,264,0.907,281,2.899,318,2.415,335,3.24,344,1.356,345,1.388,346,1.432,347,1.432,357,2.617,358,2.617,368,2.493,409,2.127,431,1.836,437,1.48,439,1.967,453,4.059,469,1.48,470,1.48,471,1.48,472,2.806,506,3.628,507,5.438,508,3.362,509,3.362,510,3.362,511,2.415,512,3.39,513,3.932,514,5.051,515,5.051,516,7.593,517,5.192,518,5.23,519,6.066,520,4.124,521,3.932,522,5.051,523,6.744,524,5.23,525,4.354,526,5.051,527,5.051,528,5.051,529,5.051,530,4.722,531,5.23,532,3.362,533,2.678,534,2.899,535,3.362,536,3.362,537,3.362]],["component/141",[37,0.539]],["title/142",[12,21.441]],["name/142",[3,2.076]],["text/142",[1,1.226,8,2.152,11,3.279,12,3.42,22,2.445,27,1.733,36,2.909,45,2.765,48,3.276,52,1.923,53,3.751,54,3.79,55,2.401,67,2.526,68,4.521,69,4.521,70,3.961,71,3.6,72,4.521,73,3.961,74,3.961,75,2.799,76,3.334,77,3.6,78,2.333,79,3.522,80,4.55,81,2.799,82,4.521,83,2.333,84,7.542,85,7.542,86,2.936,87,3.766,88,1.721,89,4.912,90,4.521,91,3.447,92,3.679,93,7.021,94,3.679,95,1.673,96,4.521,97,2.639,98,3.961,99,3.123,100,4.521,101,3.961,102,2.45,103,3.961,104,6.168,105,3.961,106,2.543,107,4.521,108,4.521,109,3.961,110,2.669,111,3.961,112,1.044,113,2.765,114,4.521]],["component/142",[37,0.539]],["title/143-1",[201,14.919]],["name/143-1",[]],["text/143-1",[]],["component/143-1",[]],["title/143-2",[112,10.214,202,12.473]],["name/143-2",[]],["text/143-2",[]],["component/143-2",[]],["title/143",[12,12.125,106,12.948,176,15.343,538,22.394]],["name/143",[106,0.741,176,0.878,433,1.497,538,1.282]],["text/143",[1,0.444,3,1.805,12,2.807,22,0.777,27,0.856,38,0.626,40,0.626,44,0.723,45,1.365,52,1.131,78,1.152,91,2.028,99,3.65,106,3.271,109,4.018,132,1.247,162,2.434,174,0.63,176,3.921,191,2.593,223,1.566,224,2.99,230,2.725,237,0.678,238,0.678,239,0.714,240,0.696,241,0.714,242,0.772,243,0.862,244,0.887,245,0.862,246,0.887,248,1.288,255,3.271,263,0.63,264,0.63,265,0.747,334,2.954,344,0.941,345,0.963,346,0.994,347,0.994,368,1.873,369,4.447,373,3.271,434,1.11,436,1.288,437,1.027,453,2.952,469,1.027,470,1.027,471,1.027,472,0.971,473,1.1,474,1.141,475,1.349,476,1.349,477,1.349,478,1.418,479,1.497,480,1.591,481,1.497,482,1.418,521,4.299,538,2.588,539,3.444,540,2.305,541,2.333,542,3.707,543,2.333,544,2.588,545,6.077,546,7.933,547,6.512,548,3.794,549,5.614,550,7.152,551,3.794,552,6.512,553,7.152,554,5.523,555,5.523,556,5.523,557,5.523,558,7.152,559,4.761,560,5.523,561,5.523,562,4.795,563,2.954,564,3.271,565,3.271,566,3.271,567,4.761,568,3.794,569,3.794,570,3.794,571,3.794,572,1.816,573,1.676,574,1.816,575,1.816,576,2.333,577,2.333]],["component/143",[37,0.539]],["title/144-1",[201,14.919]],["name/144-1",[]],["text/144-1",[]],["component/144-1",[]],["title/144-2",[112,10.214,202,12.473]],["name/144-2",[]],["text/144-2",[]],["component/144-2",[]],["title/144",[1,8.788,578,30.547]],["name/144",[1,0.576,578,2.002]],["text/144",[1,1.691,12,1.835,15,1.003,34,2.5,37,0.328,38,0.438,40,0.438,44,0.506,47,2.43,50,1.473,52,1.832,75,1.667,79,1.537,86,1.281,88,1.809,94,1.272,95,1.56,112,0.622,126,1.608,127,3.102,129,1.865,132,1.633,133,1.243,159,2.059,162,2.378,174,1.909,191,2.515,206,1.048,220,2.677,223,1.162,224,2.023,229,2.045,232,4.983,237,0.475,238,1.281,239,1.134,240,1.105,241,1.134,242,0.54,243,0.603,244,0.621,245,0.603,246,1.07,256,1.048,263,0.441,264,0.441,335,1.048,339,1.301,344,0.659,368,1.389,369,1.195,371,1.805,372,1.662,384,1.444,434,2.096,439,2.169,453,1.504,456,1.389,472,1.171,533,5.313,538,1.114,540,1.71,544,1.919,578,4.408,579,1.195,580,1.453,581,4.4,582,1.919,583,1.919,584,1.627,585,1.919,586,3.51,587,1.919,588,4.19,589,2.502,590,2.502,591,3.005,592,7.294,593,5.263,594,7.294,595,2.502,596,3.51,597,4.383,598,2.502,599,3.918,600,2.502,601,2.502,602,3.224,603,2.502,604,4.633,605,2.502,606,2.502,607,3.51,608,2.502,609,2.502,610,3.51,611,3.51,612,2.502,613,2.502,614,6.441,615,3.51,616,3.224,617,2.242,618,2.502,619,4.829,620,3.299,621,3.918,622,3.732,623,3.918,624,3.224,625,3.918,626,3.51,627,2.502,628,2.502,629,3.296,630,2.502,631,3.296,632,1.453,633,2.502,634,2.502,635,2.502,636,2.502,637,2.502,638,2.331,639,1.919,640,2.502,641,2.059,642,1.453,643,1.453,644,1.453,645,1.453,646,1.195,647,1.301,648,1.453,649,1.453,650,1.453]],["component/144",[37,0.539]],["title/145-1",[201,14.919]],["name/145-1",[]],["text/145-1",[]],["component/145-1",[]],["title/145-2",[112,10.214,202,12.473]],["name/145-2",[]],["text/145-2",[]],["component/145-2",[]],["title/145",[198,41.702]],["name/145",[198,3.135]],["text/145",[1,1.346,3,0.986,11,2.444,17,3.292,22,1.47,27,2.39,37,0.691,38,0.556,40,0.556,44,0.642,50,2.691,51,1.17,53,2.1,55,1.053,60,1.715,61,1.921,67,1.108,75,1.227,78,1.699,81,2.038,86,2.967,87,3.344,88,2.24,91,1.108,116,3.698,117,3.838,121,1.369,125,2.274,127,2.521,132,2.791,133,0.695,134,1.553,137,1.736,138,1.578,140,1.074,174,1.387,178,2.444,191,2.423,193,0.935,194,3.17,198,6.305,201,0.532,216,2.816,223,1.421,229,1.221,237,0.602,238,1.283,239,1.572,240,1.316,241,1.35,242,1.46,243,1.63,244,1.677,245,1.63,246,1.677,251,1.613,263,0.929,264,0.559,265,0.663,344,1.78,345,0.855,346,0.883,347,0.883,362,5.962,418,2.064,420,1.613,438,1.516,448,1.413,456,1.699,469,0.912,470,0.912,471,0.912,472,0.862,484,1.651,512,2.31,520,3.221,581,5.271,583,2.347,638,3.609,651,3.42,680,2.679,714,3.436,786,4.123,789,3.17,863,2.472,871,2.072,872,2.072,873,2.072,874,2.072,875,4.413,876,4.413,877,2.072,878,2.072,879,2.072,880,5.702,881,2.072,882,2.072,883,3.441,884,4.916,885,4.001,886,5.139,887,3.441,888,6.151,889,4.413,890,4.413,891,2.679,892,2.679,893,4.413,894,3.441,895,7.659,896,6.151,897,6.151,898,3.441,899,4.413,900,2.967,901,5.702,902,2.072,903,5.702,904,4.413,905,4.413,906,3.441,907,2.072,908,2.072,909,2.072,910,2.072,911,2.072,912,2.072]],["component/145",[37,0.539]],["title/146-1",[201,14.919]],["name/146-1",[]],["text/146-1",[]],["component/146-1",[]],["title/146-2",[112,10.214,202,12.473]],["name/146-2",[]],["text/146-2",[]],["component/146-2",[]],["title/146",[27,14.078,106,15.14,913,29.889]],["name/146",[913,3.398]],["text/146",[1,1.615,2,1.275,15,1.748,22,1.633,26,1.693,27,1.798,38,0.867,40,0.867,44,1.002,77,2.463,88,2.723,91,1.728,106,2.336,129,3.326,132,2.694,133,1.084,134,1.459,140,2.541,148,2.281,172,2.567,174,1.784,178,2.627,191,2.318,216,1.334,223,2.024,229,2.214,237,0.94,238,1.922,240,0.964,263,0.872,264,0.872,265,1.035,309,3.291,372,3.021,392,5.582,431,1.765,434,1.538,439,1.891,444,3.906,520,4.192,584,4.628,659,1.939,676,4.255,884,6.902,885,3.817,913,6.382,914,4.903,915,7.655,916,5.923,917,3.233,918,3.233,919,6.611,920,8.801,921,8.611,922,5.923,923,5.923,924,4.903,925,5.923,926,6.611,927,6.611,928,3.233]],["component/146",[37,0.539]],["title/147-1",[201,14.919]],["name/147-1",[]],["text/147-1",[]],["component/147-1",[]],["title/147-2",[112,10.214,202,12.473]],["name/147-2",[]],["text/147-2",[]],["component/147-2",[]],["title/147",[27,9.335,106,10.04,803,18.287,929,19.819,930,19.819,931,19.819]],["name/147",[106,0.623,803,1.135,929,1.23,930,1.23,931,1.23]],["text/147",[1,0.789,38,0.7,40,0.7,44,0.809,45,2.429,52,1.918,55,1.326,62,1.473,70,2.186,80,4.157,174,0.704,189,5.803,191,2.52,218,4.316,220,3.14,229,1.63,232,3.579,234,3.727,235,4.586,237,0.759,238,0.759,239,0.798,240,1.541,241,0.798,242,0.863,243,0.964,244,0.992,245,0.964,246,0.992,263,0.704,264,0.704,265,0.835,307,1.425,344,2.897,345,2.134,346,1.112,347,1.112,372,2.71,384,2.13,436,2.292,469,1.148,470,1.148,471,1.148,472,1.086,473,1.23,474,1.276,511,1.874,512,1.751,540,3.14,563,3.231,593,3.78,615,5.455,617,3.306,728,2.031,803,5.772,867,2.786,929,6.366,930,6.366,931,3.231,932,2.249,933,5.354,934,2.609,935,4.151,936,5.891,937,5.169,938,4.151,939,4.151,940,6.849,941,6.849,942,4.151,943,6.426,944,4.151,945,7.454,946,4.151,947,6.849,948,4.151,949,5.169,950,5.169,951,5.169,952,4.151,953,4.151,954,4.151,955,6.849,956,5.169,957,5.169,958,5.169,959,4.151,960,5.169,961,2.609,962,2.609,963,2.609,964,5.079,965,2.609,966,4.151,967,2.609,968,4.151,969,2.609,970,2.609,971,2.609,972,2.609]],["component/147",[37,0.539]],["title/148-1",[201,14.919]],["name/148-1",[]],["text/148-1",[]],["component/148-1",[]],["title/148-2",[112,10.214,202,12.473]],["name/148-2",[]],["text/148-2",[]],["component/148-2",[]],["title/148",[95,11.625,130,18.542,456,16.207,520,17.191]],["name/148",[130,1.31,456,1.145,520,1.214]],["text/148",[1,1.685,11,2.34,15,2.386,27,0.806,38,0.59,40,0.59,44,0.681,47,3.335,64,1.14,67,1.175,88,2.144,126,3.045,129,4.057,130,4.853,132,1.752,133,1.543,140,1.873,174,1.886,178,2.777,191,2.45,218,4.691,223,2.885,229,1.474,237,0.639,238,0.639,239,0.673,240,0.656,241,0.673,242,0.727,262,1.391,263,0.593,264,0.593,265,0.704,273,1.319,334,1.712,358,2.814,372,3.043,393,4.005,419,2.814,436,1.214,437,1.591,456,4.417,513,1.712,520,4.947,583,2.465,616,5.114,638,2.819,932,3.116,973,8.276,974,6.025,975,6.989,976,6.691,977,6.691,978,7.452,979,3.614,980,3.614,981,3.614,982,3.614,983,2.426,984,3.116,985,4.595,986,5.459,987,6.332,988,3.305,989,3.614,990,5.889,991,2.199,992,2.199,993,2.199,994,1.896]],["component/148",[37,0.539]],["title/149-1",[201,14.919]],["name/149-1",[]],["text/149-1",[]],["component/149-1",[]],["title/149-2",[112,10.214,202,12.473]],["name/149-2",[]],["text/149-2",[]],["component/149-2",[]],["title/149",[34,23.256,995,39.848]],["name/149",[34,1.167,171,1.467,996,2]],["text/149",[1,1.194,22,0.637,34,1.619,38,0.513,40,0.513,44,0.592,80,5.144,86,2.224,97,1.067,133,0.641,171,3.09,174,0.868,191,2.582,229,2.108,237,0.556,238,0.935,239,0.984,240,1.242,241,1.274,242,1.616,243,1.804,244,1.223,245,1.188,246,1.223,263,0.516,264,0.516,265,0.612,299,1.86,307,1.044,344,1.97,345,1.719,346,1.371,347,1.371,364,1.283,372,1.843,384,3.741,434,0.909,469,1.416,470,0.841,471,0.841,472,0.795,473,0.901,474,0.935,477,1.105,482,1.161,517,2.311,518,1.648,525,4.211,573,1.373,728,3.242,866,2.504,867,3.658,995,6.891,996,2.773,997,3.591,998,2.773,999,3.591,1000,4.165,1001,4.165,1002,5.906,1003,1.912,1004,6.436,1005,7.258,1006,7.197,1007,4.699,1008,4.699,1009,4.699,1010,4.699,1011,4.699,1012,4.699,1013,4.699,1014,4.699,1015,4.211,1016,7.416,1017,6.595,1018,8.602,1019,6.281,1020,5.45,1021,5.45,1022,3.217,1023,4.165,1024,3.217,1025,4.165,1026,3.217,1027,3.509,1028,3.217,1029,1.912,1030,1.648,1031,3.217,1032,1.912,1033,1.488,1034,1.488,1035,1.912,1036,1.912,1037,1.912,1038,1.912]],["component/149",[37,0.539]],["title/150-1",[178,15.254,720,20.102,1039,27.578]],["name/150-1",[]],["text/150-1",[]],["component/150-1",[]],["title/150-2",[178,15.254,720,20.102,1040,25.77]],["name/150-2",[]],["text/150-2",[]],["component/150-2",[]],["title/150-3",[1041,50.053]],["name/150-3",[]],["text/150-3",[]],["component/150-3",[]],["title/150-4",[201,14.919]],["name/150-4",[]],["text/150-4",[]],["component/150-4",[]],["title/150-5",[112,10.214,202,12.473]],["name/150-5",[]],["text/150-5",[]],["component/150-5",[]],["title/150",[178,13.045,720,17.191,1039,23.584,1040,22.038]],["name/150",[720,1.214,1039,1.666,1040,1.557]],["text/150",[1,1.107,2,1.152,15,1.456,22,1.184,27,0.79,38,0.323,40,0.323,44,0.373,47,1.59,49,0.688,51,0.68,52,0.642,95,0.427,127,2.591,133,1.192,134,0.544,153,1.402,157,1.377,164,1.039,172,3.049,174,1.102,178,2.314,191,1.651,207,1.128,218,0.809,229,2.047,237,1.319,250,0.938,257,0.865,260,0.697,262,1.363,263,0.325,264,0.325,265,0.386,270,1.547,276,1.547,288,0.688,311,0.762,324,1.039,418,3.157,434,1.691,437,1.798,439,1.709,478,0.732,481,1.382,502,0.882,512,2.741,544,0.822,567,5.021,620,3.924,659,0.723,665,1.677,689,0.865,720,3.972,724,1.857,726,0.658,729,0.762,814,3.521,866,1.677,892,1.677,988,2.098,998,1.039,1030,3.521,1039,2.934,1040,3.306,1041,1.857,1042,2.921,1043,1.857,1044,1.205,1045,1.205,1046,1.205,1047,1.205,1048,2.154,1049,1.205,1050,1.205,1051,1.039,1052,1.205,1053,1.039,1054,1.205,1055,1.205,1056,1.205,1057,5.561,1058,1.205,1059,1.205,1060,1.205,1061,2.934,1062,1.205,1063,5.264,1064,2.154,1065,5.264,1066,5.264,1067,6.269,1068,5.824,1069,4.538,1070,5.264,1071,5.264,1072,5.264,1073,6.631,1074,9.121,1075,8.995,1076,8.995,1077,4.084,1078,4.084,1079,4.084,1080,4.084,1081,4.084,1082,4.084,1083,4.084,1084,5.824,1085,4.084,1086,4.084,1087,3.521,1088,4.084,1089,4.084,1090,4.084,1091,4.084,1092,4.084,1093,4.084,1094,4.084,1095,4.084,1096,4.084,1097,4.084,1098,4.084,1099,3.521,1100,4.084,1101,4.084,1102,4.084,1103,4.084,1104,4.084,1105,4.084,1106,4.084,1107,4.084,1108,4.084,1109,4.084,1110,4.084,1111,4.084,1112,4.084,1113,4.084,1114,4.084,1115,4.084,1116,4.084,1117,4.084,1118,4.084,1119,4.084,1120,4.084,1121,4.084,1122,4.084,1123,4.084,1124,4.084,1125,4.084,1126,4.084,1127,4.084,1128,3.554,1129,3.554,1130,7.063,1131,6.059,1132,2.154,1133,2.154,1134,2.921,1135,1.205,1136,1.039,1137,1.205,1138,2.154,1139,1.205,1140,1.205,1141,1.205,1142,1.039,1143,1.205,1144,1.205,1145,1.205,1146,1.039,1147,1.039,1148,1.039,1149,1.205,1150,1.205]],["component/150",[37,0.539]],["title/151-1",[201,14.919]],["name/151-1",[]],["text/151-1",[]],["component/151-1",[]],["title/151-2",[112,10.214,202,12.473]],["name/151-2",[]],["text/151-2",[]],["component/151-2",[]],["title/151",[688,33.168]],["name/151",[688,2.493]],["text/151",[1,1.729,15,2.447,22,1.84,38,0.626,40,0.626,44,0.723,63,3.906,65,1.778,78,3.388,86,3.256,88,2.767,110,2.143,128,6.783,129,3.824,132,3,133,1.272,174,1.49,191,1.947,209,1.497,218,2.547,220,3.355,223,2.28,237,0.678,238,1.103,239,1.161,240,1.131,241,1.161,263,0.63,264,0.63,265,0.747,368,1.152,371,3.543,372,2.699,392,1.676,393,4.678,404,3.494,414,1.676,419,1.816,425,2.012,456,3.531,520,3.745,534,7.591,540,2.305,584,3.193,638,3.784,679,1.816,681,1.566,688,4.609,699,1.566,726,3.016,729,1.476,809,4.371,867,3.707,885,4.299,985,3.271,986,2.012,994,2.012,1040,1.566,1151,3.794,1152,5.523,1153,5.523,1154,4.299,1155,4.795,1156,8.806,1157,5.523,1158,7.395,1159,6.077,1160,6.512,1161,4.299,1162,3.794,1163,2.333,1164,2.333,1165,2.012,1166,2.012,1167,1.816,1168,2.333]],["component/151",[37,0.539]],["title/152",[1,11.038]],["name/152",[3,2.076]],["text/152",[0,3.598,1,1.698,8,2.365,11,3.255,27,2.52,36,3.197,47,2.325,48,4.163,50,2.72,55,2.639,61,2.9,67,2.777,75,4.07,78,3.392,83,2.564,87,2.665,88,1.891,91,2.777,95,1.839,97,2.9,112,1.148,113,3.039,115,3.957,116,4.353,117,3.241,118,4.969,119,4.969,120,4.353,121,3.433,122,4.969,123,4.969,124,3.286,125,4.541,126,2.968,127,2.968,128,3.957,129,2.614,130,2.933,131,3.665,132,1.707,133,1.742,134,2.345,135,4.969,136,3.665,137,4.353,138,3.957,139,4.969,140,4.247,141,4.969,142,4.969,143,4.969,144,4.353,145,4.969,146,4.969,147,4.969,148,3.665,149,4.969,150,4.969,151,4.969,152,4.969,153,2.494]],["component/152",[37,0.539]],["title/153-1",[201,14.919]],["name/153-1",[]],["text/153-1",[]],["component/153-1",[]],["title/153-2",[112,10.214,202,12.473]],["name/153-2",[]],["text/153-2",[]],["component/153-2",[]],["title/153",[132,9.426,133,9.617,176,13.402,193,12.946,1169,18.142]],["name/153",[133,0.63,176,0.878,193,0.848,1169,1.189]],["text/153",[1,1.36,8,0.825,15,2.551,22,1.334,26,0.949,27,2.462,38,0.486,40,0.486,44,0.562,51,1.737,53,1.463,60,1.533,62,1.023,78,2.33,81,1.822,83,0.895,87,0.93,88,1.459,95,0.642,97,1.012,102,2.076,106,2.956,121,1.198,129,3.771,132,1.551,133,1.583,134,0.818,140,0.939,153,0.87,171,1.146,174,1.55,176,4.161,178,1.875,191,2.526,193,3.23,194,2.877,209,2.57,216,0.748,223,2.182,229,1.306,237,1.781,238,1.67,239,1.757,240,1.713,241,0.941,242,0.6,243,0.669,244,0.689,245,0.669,246,0.689,248,1.001,260,3.055,263,0.489,264,0.83,265,1.511,279,1.411,286,1.048,299,3.32,309,2.064,329,1.087,342,1.302,344,0.731,345,0.748,346,0.772,347,0.772,372,2.534,393,3.633,405,1.411,423,1.411,426,1.411,436,1.001,437,0.798,469,0.798,470,0.798,471,0.798,472,0.754,473,0.854,474,0.886,475,1.048,476,1.048,477,1.048,478,1.101,479,1.163,520,1.61,542,2.064,584,1.778,587,2.098,624,1.326,638,1.627,651,1.845,652,1.411,655,1.302,657,1.411,681,2.064,689,2.209,699,2.689,723,2.209,786,4.741,983,2.064,1051,1.562,1146,1.562,1154,1.411,1169,4.075,1170,2.651,1171,1.562,1172,1.562,1173,3.454,1174,1.411,1175,1.411,1176,1.562,1177,1.562,1178,1.562,1179,1.562,1180,1.562,1181,1.562,1182,1.562,1183,1.562,1184,6.695,1185,7.766,1186,2.651,1187,4.069,1188,1.562,1189,1.411,1190,1.562,1191,4.069,1192,4.952,1193,6.461,1194,2.651,1195,2.651,1196,6.695,1197,3.075,1198,6.443,1199,5.744,1200,2.651,1201,3.075,1202,4.72,1203,3.075,1204,3.075,1205,1.562,1206,1.812,1207,1.812,1208,1.562,1209,1.562,1210,1.562,1211,1.411,1212,1.562,1213,1.411,1214,1.812,1215,1.812,1216,1.812,1217,1.562]],["component/153",[37,0.539]],["title/154-1",[201,14.919]],["name/154-1",[]],["text/154-1",[]],["component/154-1",[]],["title/154-2",[112,10.214,202,12.473]],["name/154-2",[]],["text/154-2",[]],["component/154-2",[]],["title/154",[176,15.343,193,14.82,983,22.038,1174,25.56]],["name/154",[176,0.878,193,0.848,729,1.189,1169,1.189]],["text/154",[1,1.426,8,0.549,12,0.445,15,2.304,22,0.718,26,0.631,27,1.499,38,0.323,40,0.323,44,0.374,51,1.217,52,0.36,53,1.026,54,0.554,60,0.601,62,0.681,64,2.118,78,2.24,81,1.277,83,0.595,87,0.619,88,2.122,89,0.919,91,1.152,95,0.763,97,0.673,99,2.35,102,1.117,106,2.734,129,2.932,132,1.829,133,2.103,140,0.625,153,0.579,171,1.364,174,1.421,176,4.015,178,1.161,191,2.573,193,3.244,194,3.996,209,1.876,211,0.939,216,0.498,223,2.034,224,0.99,229,1.457,237,0.351,238,1.531,239,1.611,240,1.47,241,0.894,242,0.713,243,0.796,244,0.819,245,0.796,246,0.819,248,1.19,257,0.866,260,3.044,263,0.325,264,0.582,265,1.138,266,0.763,279,0.939,286,0.697,299,2.363,309,0.81,329,0.723,342,0.866,344,0.87,345,0.89,346,0.918,347,0.918,352,1.04,360,1.859,368,1.064,372,2.287,392,1.548,393,4.087,408,1.859,409,0.763,423,0.939,426,0.939,431,1.177,436,0.666,453,1.901,469,0.949,470,0.949,471,0.949,472,0.897,473,1.016,474,1.054,475,1.246,476,1.246,477,1.246,478,1.31,479,1.383,480,1.47,481,1.383,482,1.31,521,1.678,524,1.04,531,2.52,542,0.81,564,1.859,566,3.066,572,1.678,573,1.548,574,1.678,575,1.678,584,1.246,616,1.578,624,0.883,638,3.509,651,1.293,652,0.939,657,0.939,659,0.723,665,1.678,666,1.859,676,2.1,681,1.447,688,0.689,689,1.548,699,1.962,729,2.585,786,4.087,847,1.04,915,1.859,983,1.447,1033,1.678,1034,1.678,1154,0.939,1169,4.95,1170,1.859,1171,1.04,1172,1.04,1173,2.52,1174,1.678,1175,0.939,1176,1.04,1177,1.04,1178,1.04,1179,1.04,1180,1.04,1181,1.04,1182,1.04,1183,1.04,1184,6.292,1186,1.859,1187,4.248,1188,1.04,1189,0.939,1190,1.04,1191,4.248,1192,3.523,1193,5.978,1194,1.859,1195,1.859,1196,5.719,1200,2.52,1208,1.04,1209,1.04,1210,1.04,1212,1.04,1213,0.939,1218,1.859,1219,2.156,1220,4.087,1221,2.156,1222,2.156,1223,2.156,1224,2.156,1225,3.556,1226,3.556,1227,3.556,1228,3.556,1229,2.156,1230,3.556,1231,3.556,1232,2.156,1233,2.156,1234,2.156,1235,2.156,1236,2.156,1237,2.156,1238,2.156,1239,1.206,1240,1.206,1241,4.087,1242,4.087,1243,4.087,1244,2.156,1245,1.206,1246,1.206,1247,1.206,1248,1.206,1249,1.04,1250,1.206,1251,1.206]],["component/154",[37,0.539]],["title/155-1",[201,14.919]],["name/155-1",[]],["text/155-1",[]],["component/155-1",[]],["title/155-2",[112,10.214,202,12.473]],["name/155-2",[]],["text/155-2",[]],["component/155-2",[]],["title/155",[34,23.256,1252,39.848]],["name/155",[34,1.167,1253,2,1254,2]],["text/155",[1,1.154,3,1.309,15,2.164,22,0.917,27,1.009,34,2.178,38,0.738,40,0.738,44,0.853,63,1.503,80,4.944,86,1.971,115,2.096,133,0.923,134,1.242,174,0.743,191,2.567,223,1.787,229,1.825,237,0.8,238,0.8,239,0.842,240,0.821,241,2.144,242,0.91,243,1.016,244,1.046,245,1.016,246,1.046,263,0.743,264,0.743,265,0.881,280,2.372,299,2.503,344,2.662,345,1.136,346,1.172,347,1.172,372,1.634,416,2.372,434,1.309,469,1.211,470,1.211,471,1.211,732,3.732,867,3.592,997,2.372,999,2.372,1004,6.041,1005,4.614,1006,4.614,1007,4.614,1008,4.614,1009,4.614,1010,4.614,1011,4.614,1012,4.614,1013,4.614,1014,4.614,1015,3.732,1016,7.553,1061,3.11,1069,5.232,1189,3.37,1213,2.142,1252,7.418,1253,3.732,1254,5.232,1255,2.752,1256,2.752,1257,2.752,1258,2.752,1259,4.329,1260,2.752,1261,4.329,1262,7.008,1263,5.352,1264,7.008,1265,5.352,1266,5.352,1267,5.352,1268,5.352,1269,5.352,1270,4.329,1271,4.329,1272,4.329,1273,6.069,1274,6.069,1275,4.329,1276,4.329,1277,4.329,1278,4.329,1279,2.752,1280,2.752,1281,2.752,1282,2.752,1283,2.752]],["component/155",[37,0.539]],["title/156-1",[201,14.919]],["name/156-1",[]],["text/156-1",[]],["component/156-1",[]],["title/156-2",[112,10.214,202,12.473]],["name/156-2",[]],["text/156-2",[]],["component/156-2",[]],["title/156",[186,27.578,224,17.63,437,16.899]],["name/156",[224,2.004]],["text/156",[1,1.589,11,0.56,12,0.52,15,1.614,16,2.073,22,0.469,27,0.517,38,0.378,40,0.378,44,0.437,47,1.78,48,2.021,53,1.177,54,0.647,60,1.233,76,0.994,81,1.465,83,0.695,88,1.959,91,1.322,95,2.297,102,0.73,106,1.786,111,2.073,128,3.8,129,3.365,130,3.879,131,4.238,132,2.403,133,1.804,153,1.588,172,3.951,174,1.897,186,1.012,191,2.387,216,2.359,220,2.416,223,2.585,224,3.413,226,2.857,229,1.581,237,0.41,238,1.821,239,1.646,240,1.604,241,1.646,242,1.651,243,1.672,244,1.512,245,0.914,246,0.94,248,2.754,256,0.904,263,0.38,264,0.668,290,1.777,311,0.891,314,0.945,344,0.568,345,0.581,346,0.6,347,0.6,368,1.221,371,1.587,372,2.955,404,1.565,409,0.891,420,1.097,428,2.133,431,2.172,437,0.62,453,1.322,456,1.221,469,0.62,470,0.62,471,0.62,472,0.586,473,0.664,474,0.689,475,2.884,476,0.814,477,0.814,478,0.856,479,0.904,480,0.961,481,0.904,482,0.856,512,1.66,520,3.502,530,1.926,542,1.66,549,1.214,572,1.097,573,1.012,574,1.097,575,1.097,581,2.416,582,4.685,584,1.43,586,1.97,591,3.089,638,3.719,647,1.122,651,1.484,655,1.012,659,0.845,681,1.66,688,2.272,715,1.214,729,2.516,733,4.927,786,4.625,789,1.777,818,1.097,863,1.777,891,1.926,900,2.133,983,1.66,984,1.214,1033,1.097,1034,1.097,1087,1.214,1099,1.214,1161,3.097,1175,1.097,1211,1.097,1218,1.214,1284,7.546,1285,2.474,1286,1.409,1287,2.474,1288,5.379,1289,5.379,1290,3.978,1291,3.307,1292,6.006,1293,5.715,1294,2.474,1295,6.006,1296,3.978,1297,6.006,1298,4.989,1299,3.978,1300,2.474,1301,2.474,1302,2.474,1303,3.978,1304,3.978,1305,2.474,1306,2.474,1307,2.133,1308,2.474,1309,2.474,1310,2.474,1311,2.474,1312,2.474,1313,2.474,1314,5.715,1315,3.978,1316,2.474,1317,6.689,1318,7.031,1319,2.474,1320,2.133,1321,2.474,1322,1.409,1323,1.409,1324,1.409,1325,2.133,1326,2.474,1327,1.409,1328,1.214,1329,1.409,1330,1.409,1331,1.409,1332,1.409,1333,1.409,1334,1.097]],["component/156",[37,0.539]],["title/157-1",[201,14.919]],["name/157-1",[]],["text/157-1",[]],["component/157-1",[]],["title/157-2",[112,10.214,202,12.473]],["name/157-2",[]],["text/157-2",[]],["component/157-2",[]],["title/157",[117,23.953,167,23.325,193,17.33]],["name/157",[117,1.447,167,1.409,193,1.047]],["text/157",[1,1.731,27,1.432,38,1.047,40,1.047,44,1.21,50,4.428,75,4.294,78,1.927,88,3.225,102,2.024,106,1.54,124,2.47,132,2.97,134,3.47,136,2.755,162,3.618,167,4.404,174,1.786,191,2.11,193,3.616,216,1.612,229,1.56,237,1.135,238,1.135,263,1.054,264,1.054,265,1.25,273,2.342,288,3.222,384,2.004,434,1.858,436,2.156,620,3.426,622,4.021,641,4.127,794,4.862,974,4.862,1334,4.39,1335,8.456,1336,5.639,1337,8.26,1338,5.639,1339,8.748,1340,5.639,1341,5.639,1342,5.639,1343,7.688,1344,5.639,1345,5.639,1346,5.639,1347,5.639,1348,3.366]],["component/157",[37,0.539]],["title/158-1",[201,14.919]],["name/158-1",[]],["text/158-1",[]],["component/158-1",[]],["title/158-2",[112,10.214,202,12.473]],["name/158-2",[]],["text/158-2",[]],["component/158-2",[]],["title/158",[71,25.012,110,18.542,1349,28.306,1350,32.834]],["name/158",[71,2.308,1351,2.611]],["text/158",[1,1.362,6,6.656,38,1.485,40,1.485,44,1.716,52,1.651,64,2.87,79,3.024,110,3.127,191,2.211,223,2.286,229,1.982,233,6.177,234,4.532,235,5.577,237,1.61,263,1.494,264,1.494,265,1.773,288,4.537,291,4.311,318,5.146,345,2.286,365,4.311,540,3.364,1043,4.774,1061,3.977,1349,6.177,1351,6.847,1352,5.538,1353,7.165,1354,7.943,1355,7.165,1356,6.847,1357,7.943,1358,5.538,1359,5.538,1360,5.538,1361,5.538,1362,5.538,1363,5.538,1364,4.774]],["component/158",[37,0.539]],["title/159-1",[201,14.919]],["name/159-1",[]],["text/159-1",[]],["component/159-1",[]],["title/159-2",[112,10.214,202,12.473]],["name/159-2",[]],["text/159-2",[]],["component/159-2",[]],["title/159",[206,24.633,229,10.62,437,16.899]],["name/159",[206,1.944,229,0.838]],["text/159",[1,1.657,22,2.264,38,1.371,40,1.371,44,1.584,60,2.547,62,2.886,63,2.791,64,2.648,73,4.282,95,1.809,97,2.853,132,1.68,134,3.068,169,4.405,174,2.287,191,2.143,206,3.279,207,2.676,229,2.46,230,4.882,237,1.486,238,2.221,239,1.563,240,1.524,241,1.563,263,1.379,264,1.379,265,1.636,307,2.791,437,2.992,439,3.977,473,2.409,475,2.954,507,3.43,540,3.104,591,3.485,646,3.74,892,3.978,1142,4.405,1161,6.598,1167,3.978,1211,3.978,1249,4.405,1365,7.637,1366,5.11,1367,6.797,1368,7.637,1369,5.11,1370,5.11,1371,5.11]],["component/159",[37,0.539]],["title/160-1",[201,14.919]],["name/160-1",[]],["text/160-1",[]],["component/160-1",[]],["title/160-2",[112,10.214,202,12.473]],["name/160-2",[]],["text/160-2",[]],["component/160-2",[]],["title/160",[1,8.788,578,30.547]],["name/160",[1,0.576,578,2.002]],["text/160",[1,1.691,12,1.835,15,1.003,34,2.5,37,0.328,38,0.438,40,0.438,44,0.506,47,2.43,50,1.473,52,1.832,75,1.667,79,1.537,86,1.281,88,1.809,94,1.272,95,1.56,112,0.622,126,1.608,127,3.102,129,1.865,132,1.633,133,1.243,159,2.059,162,2.378,174,1.909,191,2.515,206,1.048,220,2.677,223,1.162,224,2.023,229,2.045,232,4.983,237,0.475,238,1.281,239,1.134,240,1.105,241,1.134,242,0.54,243,0.603,244,0.621,245,0.603,246,1.07,256,1.048,263,0.441,264,0.441,335,1.048,339,1.301,344,0.659,368,1.389,369,1.195,371,1.805,372,1.662,384,1.444,434,2.096,439,2.169,453,1.504,456,1.389,472,1.171,533,5.313,538,1.114,540,1.71,544,1.919,578,4.408,579,1.195,580,1.453,581,4.4,582,1.919,583,1.919,584,1.627,585,1.919,586,3.51,587,1.919,588,4.19,589,2.502,590,2.502,591,3.005,592,7.294,593,5.263,594,7.294,595,2.502,596,3.51,597,4.383,598,2.502,599,3.918,600,2.502,601,2.502,602,3.224,603,2.502,604,4.633,605,2.502,606,2.502,607,3.51,608,2.502,609,2.502,610,3.51,611,3.51,612,2.502,613,2.502,614,6.441,615,3.51,616,3.224,617,2.242,618,2.502,619,4.829,620,3.299,621,3.918,622,3.732,623,3.918,624,3.224,625,3.918,626,3.51,627,2.502,628,2.502,629,3.296,630,2.502,631,3.296,632,1.453,633,2.502,634,2.502,635,2.502,636,2.502,637,2.502,638,2.331,639,1.919,640,2.502,641,2.059,642,1.453,643,1.453,644,1.453,645,1.453,646,1.195,647,1.301,648,1.453,649,1.453,650,1.453]],["component/160",[37,0.539]],["title/161-1",[201,14.919]],["name/161-1",[]],["text/161-1",[]],["component/161-1",[]],["title/161-2",[112,10.214,202,12.473]],["name/161-2",[]],["text/161-2",[]],["component/161-2",[]],["title/161",[27,9.335,106,10.04,726,13.904,792,18.287,804,18.287,933,18.287]],["name/161",[106,0.623,726,0.863,792,1.135,804,1.135,933,1.135]],["text/161",[1,0.972,38,1.371,40,1.371,44,1.584,52,1.524,60,2.547,117,5.079,174,1.379,186,3.67,187,3.67,191,2.496,229,2.113,238,1.486,239,1.563,240,1.524,241,1.563,242,1.691,245,1.887,263,1.379,264,1.379,265,2.176,307,2.791,364,3.43,372,1.928,384,3.488,544,3.485,563,3.978,726,2.791,787,3.67,788,3.67,792,5.486,800,4.405,804,5.486,891,3.978,933,5.847,943,7.018,964,4.405,1348,5.86,1372,5.11,1373,7.637,1374,8.14,1375,6.797,1376,6.797,1377,6.797,1378,5.11,1379,5.11]],["component/161",[37,0.539]],["title/162-1",[201,14.919]],["name/162-1",[]],["text/162-1",[]],["component/162-1",[]],["title/162-2",[112,10.214,202,12.473]],["name/162-2",[]],["text/162-2",[]],["component/162-2",[]],["title/162",[132,12.619,372,14.487,539,27.578]],["name/162",[132,0.762,372,0.875,539,1.666]],["text/162",[1,1.559,2,2.234,8,1.37,15,1.073,16,3.889,22,2.292,34,1.514,38,0.807,40,0.807,44,0.932,49,1.719,50,1.575,61,1.68,67,1.608,81,4.306,88,2.063,95,2.006,106,2.234,129,4.446,132,2.82,133,2.937,140,1.559,148,2.123,174,1.719,191,2.159,216,1.242,223,1.916,229,1.762,237,0.875,238,2.001,239,1.733,240,1.384,241,1.42,250,2.342,251,2.342,263,0.812,264,0.812,265,0.963,277,2.594,286,2.683,290,4.574,294,2.594,307,1.643,318,5.621,325,4.884,372,3.305,404,1.903,434,1.431,448,3.165,511,2.161,539,5.443,579,2.202,581,2.819,582,4.693,585,4.693,638,2.997,659,1.804,1147,4.001,1166,2.594,1167,2.342,1356,4.884,1364,2.594,1380,3.008,1381,7.578,1382,6.369,1383,5.666,1384,5.666,1385,5.666,1386,5.666,1387,5.666,1388,5.666,1389,5.666,1390,5.666,1391,5.666,1392,4.641,1393,4.641,1394,4.641,1395,4.641,1396,3.008,1397,2.594,1398,3.008,1399,3.008,1400,3.008,1401,3.008,1402,3.008,1403,3.008]],["component/162",[37,0.539]],["title/163-1",[201,14.919]],["name/163-1",[]],["text/163-1",[]],["component/163-1",[]],["title/163-2",[112,10.214,202,12.473]],["name/163-2",[]],["text/163-2",[]],["component/163-2",[]],["title/163",[110,21.682,1027,27.578,1404,38.394]],["name/163",[110,1.061,130,1.061,131,1.326,1027,1.35]],["text/163",[1,1.671,27,0.945,38,0.691,40,0.691,44,0.799,47,1.84,49,1.472,76,1.818,95,2.263,98,2.16,130,3.847,131,4.806,132,1.351,133,1.378,174,1.838,191,2.208,226,5.633,229,1.977,238,1.981,239,2.084,240,1.745,241,1.568,242,1.696,263,0.695,264,0.695,288,2.348,307,1.407,329,3.075,364,1.73,404,1.63,410,4.42,415,2.222,431,2.245,443,3.274,517,2.952,530,6.105,581,5.095,585,2.803,587,2.803,602,3.752,653,3.2,659,1.546,676,5.331,680,2.006,714,6.234,760,3.543,786,4.309,789,6.024,796,4.42,818,2.006,988,4.893,1027,2.952,1307,6.761,1320,3.543,1325,3.543,1328,2.222,1334,2.006,1397,3.543,1405,2.577,1406,7.147,1407,7.147,1408,5.85,1409,7.843,1410,4.11,1411,5.127,1412,5.127,1413,5.127,1414,7.147,1415,5.85,1416,5.85,1417,5.85,1418,5.85,1419,5.85,1420,4.11,1421,4.11,1422,4.11,1423,4.11,1424,4.11,1425,4.11,1426,4.11,1427,4.11,1428,4.11,1429,4.11,1430,4.11,1431,2.577,1432,4.11,1433,2.577]],["component/163",[37,0.539]],["title/164-1",[201,14.919]],["name/164-1",[]],["text/164-1",[]],["component/164-1",[]],["title/164-2",[112,10.214,202,12.473]],["name/164-2",[]],["text/164-2",[]],["component/164-2",[]],["title/164",[132,12.619,178,15.254,1434,33.1]],["name/164",[132,0.996,1435,2.611]],["text/164",[0,1.233,1,1.161,2,1.508,7,3.657,8,2.528,11,2.737,12,0.87,22,1.607,26,1.233,32,2.253,37,0.473,38,0.632,40,0.632,44,0.73,47,2.16,53,2.296,54,1.081,57,2.912,66,1.794,83,1.163,87,3.133,88,2.613,91,2.044,95,1.966,97,2.134,99,3.67,101,3.204,102,1.981,103,3.204,106,0.929,132,2.817,153,2.316,174,1.032,178,2.852,191,2.512,207,1.233,216,0.972,223,2.844,229,1.057,237,1.112,238,1.112,239,1.699,240,1.14,241,1.17,242,0.779,243,0.87,244,0.895,245,0.87,246,0.895,248,1.3,254,2.566,260,2.789,263,0.636,264,1.032,270,1.692,273,1.413,276,1.692,290,1.692,307,1.286,313,1.692,314,1.581,329,1.413,342,1.692,344,0.95,345,0.972,346,1.003,347,1.003,363,2.03,368,1.887,372,1.442,384,1.962,393,3.513,404,2.418,405,1.833,409,1.49,414,2.746,431,1.286,453,2.969,469,1.037,470,1.037,471,1.037,472,0.98,473,1.11,474,1.152,475,1.361,476,1.361,477,1.361,506,1.692,507,1.581,559,2.03,565,4.788,622,2.931,653,1.833,661,2.03,684,2.03,688,2.184,699,1.581,704,1.833,809,1.581,855,3.296,988,2.746,1053,3.296,1061,4.386,1136,2.03,1148,2.03,1165,2.03,1169,2.418,1205,2.03,1217,3.296,1434,5.264,1435,4.16,1436,2.355,1437,5.553,1438,3.823,1439,3.823,1440,3.823,1441,2.355,1442,5.553,1443,5.553,1444,2.355,1445,2.355,1446,2.355,1447,3.823,1448,2.355,1449,2.355,1450,2.355,1451,2.355,1452,2.355,1453,2.355,1454,2.355,1455,2.355,1456,8.207,1457,3.823,1458,3.823,1459,3.823,1460,5.553,1461,6.54,1462,3.823,1463,3.823,1464,3.823,1465,3.823,1466,3.823,1467,3.823,1468,3.823,1469,3.823,1470,3.823,1471,3.823,1472,2.355,1473,2.355,1474,2.355,1475,2.355,1476,2.355,1477,2.355,1478,2.355]],["component/164",[37,0.539]]],"invertedIndex":[["",{"_index":191,"title":{},"name":{},"text":{"10":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"140":{},"141":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{}},"component":{}}],["0",{"_index":384,"title":{},"name":{},"text":{"18":{},"22":{},"24":{},"30":{},"33":{},"34":{},"37":{},"42":{},"46":{},"48":{},"56":{},"59":{},"60":{},"63":{},"66":{},"68":{},"75":{},"78":{},"81":{},"82":{},"85":{},"87":{},"90":{},"94":{},"97":{},"103":{},"109":{},"113":{},"116":{},"122":{},"128":{},"131":{},"132":{},"135":{},"140":{},"144":{},"147":{},"149":{},"157":{},"160":{},"161":{},"164":{}},"component":{}}],["00",{"_index":964,"title":{},"name":{},"text":{"46":{},"60":{},"66":{},"82":{},"113":{},"132":{},"147":{},"161":{}},"component":{}}],["00501",{"_index":1244,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["00507",{"_index":1248,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["00514",{"_index":1246,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["00515",{"_index":1245,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["00942",{"_index":1164,"title":{},"name":{},"text":{"50":{},"71":{},"118":{},"151":{}},"component":{}}],["00:00",{"_index":966,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["00:00','dd",{"_index":592,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["00:00:00.000000",{"_index":965,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["01",{"_index":512,"title":{},"name":{},"text":{"27":{},"31":{},"44":{},"46":{},"49":{},"55":{},"64":{},"66":{},"69":{},"77":{},"111":{},"113":{},"115":{},"117":{},"127":{},"141":{},"145":{},"147":{},"150":{},"156":{}},"component":{}}],["011",{"_index":1101,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["01407",{"_index":987,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["02",{"_index":891,"title":{},"name":{},"text":{"44":{},"55":{},"60":{},"64":{},"77":{},"82":{},"111":{},"127":{},"132":{},"145":{},"156":{},"161":{}},"component":{}}],["022",{"_index":1092,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["03",{"_index":863,"title":{},"name":{},"text":{"42":{},"43":{},"44":{},"55":{},"64":{},"77":{},"87":{},"88":{},"103":{},"104":{},"109":{},"110":{},"111":{},"127":{},"145":{},"156":{}},"component":{}}],["04",{"_index":900,"title":{},"name":{},"text":{"44":{},"55":{},"64":{},"77":{},"111":{},"127":{},"145":{},"156":{}},"component":{}}],["05",{"_index":247,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["05:30:00.000000",{"_index":1379,"title":{},"name":{},"text":{"60":{},"82":{},"132":{},"161":{}},"component":{}}],["06",{"_index":1360,"title":{},"name":{},"text":{"57":{},"79":{},"129":{},"158":{}},"component":{}}],["07",{"_index":823,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["076",{"_index":1085,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["07:00:00.000000",{"_index":1378,"title":{},"name":{},"text":{"60":{},"82":{},"132":{},"161":{}},"component":{}}],["1",{"_index":15,"title":{},"name":{},"text":{"1":{},"7":{},"8":{},"11":{},"12":{},"18":{},"22":{},"23":{},"24":{},"25":{},"27":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"45":{},"47":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"59":{},"61":{},"65":{},"67":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"81":{},"83":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"112":{},"114":{},"115":{},"117":{},"118":{},"122":{},"124":{},"125":{},"126":{},"127":{},"131":{},"133":{},"140":{},"141":{},"144":{},"146":{},"148":{},"150":{},"151":{},"153":{},"154":{},"155":{},"156":{},"160":{},"162":{}},"component":{}}],["1,'scott",{"_index":1393,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["1..l_changes.count",{"_index":1310,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["1.07",{"_index":1290,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["1.585189",{"_index":990,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["1.608401",{"_index":993,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["10",{"_index":245,"title":{},"name":{},"text":{"15":{},"17":{},"19":{},"21":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"46":{},"48":{},"52":{},"53":{},"54":{},"55":{},"59":{},"60":{},"63":{},"64":{},"66":{},"68":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"81":{},"82":{},"85":{},"86":{},"87":{},"88":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"113":{},"115":{},"116":{},"119":{},"121":{},"123":{},"124":{},"125":{},"126":{},"127":{},"131":{},"132":{},"135":{},"137":{},"139":{},"141":{},"143":{},"144":{},"145":{},"147":{},"149":{},"153":{},"154":{},"155":{},"156":{},"160":{},"161":{},"164":{}},"component":{}}],["100",{"_index":523,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["100,'steven','king',to_date('17",{"_index":590,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["1000",{"_index":1437,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["10000",{"_index":1191,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["10001",{"_index":1202,"title":{},"name":{},"text":{"52":{},"72":{},"124":{},"153":{}},"component":{}}],["101,'neena','yang',to_date('21",{"_index":595,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["102,'lex','garcia',to_date('13",{"_index":598,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["103",{"_index":1291,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["103,'alexander','james',to_date('03",{"_index":601,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["103412,66",{"_index":761,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["104",{"_index":1087,"title":{},"name":{},"text":{"49":{},"55":{},"69":{},"77":{},"117":{},"127":{},"150":{},"156":{}},"component":{}}],["104,'bruce','miller',to_date('21",{"_index":603,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["105",{"_index":1324,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["105,'david','williams',to_date('25",{"_index":605,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["106",{"_index":1099,"title":{},"name":{},"text":{"49":{},"55":{},"69":{},"77":{},"117":{},"127":{},"150":{},"156":{}},"component":{}}],["106,'valli','jackson',to_date('05",{"_index":606,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["107",{"_index":1327,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["107,'diana','nguyen',to_date('07",{"_index":608,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["10747",{"_index":764,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["108,'nancy','gruenberg',to_date('17",{"_index":609,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["109",{"_index":1082,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["109,'daniel','faviet',to_date('16",{"_index":612,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["11",{"_index":246,"title":{},"name":{},"text":{"15":{},"17":{},"19":{},"21":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"46":{},"48":{},"52":{},"53":{},"54":{},"55":{},"59":{},"63":{},"64":{},"66":{},"68":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"81":{},"85":{},"86":{},"87":{},"88":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"113":{},"115":{},"116":{},"119":{},"121":{},"123":{},"124":{},"125":{},"126":{},"127":{},"131":{},"135":{},"137":{},"139":{},"141":{},"143":{},"144":{},"145":{},"147":{},"149":{},"153":{},"154":{},"155":{},"156":{},"160":{},"164":{}},"component":{}}],["11.306",{"_index":1107,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["110,'john','chen',to_date('28",{"_index":613,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["11000",{"_index":821,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["114",{"_index":820,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["11407",{"_index":762,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["115",{"_index":825,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["116",{"_index":834,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["117",{"_index":829,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["11702",{"_index":749,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["118",{"_index":838,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["119",{"_index":843,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["12",{"_index":344,"title":{},"name":{},"text":{"17":{},"21":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"41":{},"42":{},"44":{},"46":{},"48":{},"52":{},"53":{},"54":{},"55":{},"59":{},"63":{},"64":{},"66":{},"68":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"81":{},"85":{},"86":{},"87":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"103":{},"108":{},"109":{},"111":{},"113":{},"115":{},"116":{},"121":{},"123":{},"124":{},"125":{},"126":{},"127":{},"131":{},"135":{},"139":{},"141":{},"143":{},"144":{},"145":{},"147":{},"149":{},"153":{},"154":{},"155":{},"156":{},"160":{},"164":{}},"component":{}}],["12.1.0.1",{"_index":41,"title":{"7":{},"11":{},"23":{},"36":{}},"name":{},"text":{"3":{},"7":{},"11":{},"23":{},"24":{},"33":{},"35":{},"36":{},"37":{},"38":{},"70":{},"75":{},"76":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{}},"component":{}}],["12.1.0.2",{"_index":42,"title":{"8":{},"12":{},"25":{},"39":{}},"name":{},"text":{"3":{},"8":{},"12":{},"25":{},"39":{}},"component":{}}],["12113",{"_index":1383,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["123",{"_index":937,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["124",{"_index":963,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["12783",{"_index":770,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["12:00",{"_index":968,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["12:00:00.000000",{"_index":967,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["12:30:14",{"_index":249,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["12:34:56",{"_index":941,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["12:35:00.000000",{"_index":969,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["12c",{"_index":155,"title":{},"name":{},"text":{"7":{},"8":{},"11":{},"12":{},"23":{},"25":{},"36":{},"38":{},"39":{},"76":{},"91":{},"98":{}},"component":{}}],["13",{"_index":345,"title":{},"name":{},"text":{"17":{},"21":{},"24":{},"27":{},"29":{},"31":{},"32":{},"33":{},"37":{},"38":{},"41":{},"42":{},"44":{},"46":{},"48":{},"52":{},"53":{},"54":{},"55":{},"57":{},"63":{},"64":{},"66":{},"68":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"79":{},"85":{},"86":{},"87":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"103":{},"108":{},"109":{},"111":{},"113":{},"115":{},"116":{},"121":{},"123":{},"124":{},"125":{},"126":{},"127":{},"129":{},"135":{},"139":{},"141":{},"143":{},"145":{},"147":{},"149":{},"153":{},"154":{},"155":{},"156":{},"158":{},"164":{}},"component":{}}],["13000",{"_index":815,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["13500",{"_index":1431,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["14",{"_index":346,"title":{},"name":{},"text":{"17":{},"21":{},"24":{},"27":{},"29":{},"31":{},"32":{},"33":{},"37":{},"38":{},"41":{},"42":{},"44":{},"46":{},"48":{},"52":{},"53":{},"54":{},"55":{},"63":{},"64":{},"66":{},"68":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"85":{},"86":{},"87":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"103":{},"108":{},"109":{},"111":{},"113":{},"115":{},"116":{},"121":{},"123":{},"124":{},"125":{},"126":{},"127":{},"135":{},"139":{},"141":{},"143":{},"145":{},"147":{},"149":{},"153":{},"154":{},"155":{},"156":{},"164":{}},"component":{}}],["14100",{"_index":827,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["15",{"_index":347,"title":{},"name":{},"text":{"17":{},"21":{},"24":{},"27":{},"29":{},"31":{},"32":{},"33":{},"37":{},"38":{},"41":{},"42":{},"44":{},"46":{},"48":{},"52":{},"53":{},"54":{},"55":{},"63":{},"64":{},"66":{},"68":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"85":{},"86":{},"87":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"103":{},"108":{},"109":{},"111":{},"113":{},"115":{},"116":{},"121":{},"123":{},"124":{},"125":{},"126":{},"127":{},"135":{},"139":{},"141":{},"143":{},"145":{},"147":{},"149":{},"153":{},"154":{},"155":{},"156":{},"164":{}},"component":{}}],["15000",{"_index":1224,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["16",{"_index":469,"title":{},"name":{},"text":{"24":{},"27":{},"29":{},"31":{},"32":{},"33":{},"37":{},"38":{},"41":{},"42":{},"44":{},"46":{},"48":{},"52":{},"53":{},"54":{},"55":{},"63":{},"64":{},"66":{},"68":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"85":{},"86":{},"87":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"103":{},"108":{},"109":{},"111":{},"113":{},"115":{},"116":{},"123":{},"124":{},"125":{},"126":{},"127":{},"135":{},"141":{},"143":{},"145":{},"147":{},"149":{},"153":{},"154":{},"155":{},"156":{},"164":{}},"component":{}}],["16.291",{"_index":1115,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["16900",{"_index":832,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["16:50:50",{"_index":1361,"title":{},"name":{},"text":{"57":{},"79":{},"129":{},"158":{}},"component":{}}],["17",{"_index":470,"title":{},"name":{},"text":{"24":{},"27":{},"29":{},"31":{},"32":{},"33":{},"37":{},"38":{},"41":{},"42":{},"44":{},"46":{},"48":{},"52":{},"53":{},"54":{},"55":{},"63":{},"64":{},"66":{},"68":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"85":{},"86":{},"87":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"103":{},"108":{},"109":{},"111":{},"113":{},"115":{},"116":{},"123":{},"124":{},"125":{},"126":{},"127":{},"135":{},"141":{},"143":{},"145":{},"147":{},"149":{},"153":{},"154":{},"155":{},"156":{},"164":{}},"component":{}}],["17.925",{"_index":1111,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["1743",{"_index":778,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["1756381138",{"_index":637,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["18",{"_index":471,"title":{},"name":{},"text":{"24":{},"27":{},"29":{},"31":{},"32":{},"33":{},"37":{},"38":{},"41":{},"42":{},"44":{},"46":{},"48":{},"52":{},"53":{},"54":{},"55":{},"63":{},"64":{},"66":{},"68":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"85":{},"86":{},"87":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"103":{},"108":{},"109":{},"111":{},"113":{},"115":{},"116":{},"123":{},"124":{},"125":{},"126":{},"127":{},"135":{},"141":{},"143":{},"145":{},"147":{},"149":{},"153":{},"154":{},"155":{},"156":{},"164":{}},"component":{}}],["19",{"_index":472,"title":{},"name":{},"text":{"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"46":{},"48":{},"52":{},"53":{},"55":{},"59":{},"63":{},"64":{},"66":{},"68":{},"72":{},"73":{},"75":{},"76":{},"77":{},"81":{},"85":{},"86":{},"87":{},"88":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"113":{},"115":{},"116":{},"123":{},"124":{},"125":{},"127":{},"131":{},"135":{},"141":{},"143":{},"144":{},"145":{},"147":{},"149":{},"153":{},"154":{},"156":{},"160":{},"164":{}},"component":{}}],["19000",{"_index":816,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["19800",{"_index":836,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["1986",{"_index":145,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["1987",{"_index":149,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["1st",{"_index":1412,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["2",{"_index":174,"title":{},"name":{},"text":{"8":{},"12":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"25":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"140":{},"141":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{}},"component":{}}],["2*3",{"_index":1369,"title":{},"name":{},"text":{"58":{},"80":{},"130":{},"159":{}},"component":{}}],["2,'jame",{"_index":1394,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["2..c_num_col",{"_index":1463,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["20",{"_index":473,"title":{},"name":{},"text":{"24":{},"29":{},"32":{},"33":{},"37":{},"38":{},"41":{},"42":{},"46":{},"48":{},"52":{},"53":{},"55":{},"58":{},"63":{},"66":{},"68":{},"72":{},"73":{},"75":{},"76":{},"77":{},"80":{},"85":{},"86":{},"87":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"103":{},"108":{},"109":{},"113":{},"116":{},"123":{},"124":{},"125":{},"127":{},"130":{},"135":{},"143":{},"147":{},"149":{},"153":{},"154":{},"156":{},"159":{},"164":{}},"component":{}}],["20.06.2023",{"_index":1370,"title":{},"name":{},"text":{"58":{},"80":{},"130":{},"159":{}},"component":{}}],["200",{"_index":812,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["20000",{"_index":1468,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["201",{"_index":814,"title":{},"name":{},"text":{"41":{},"49":{},"69":{},"86":{},"102":{},"108":{},"117":{},"150":{}},"component":{}}],["2011",{"_index":600,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["2012",{"_index":611,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"59":{},"81":{},"86":{},"102":{},"108":{},"131":{},"144":{},"160":{}},"component":{}}],["2013",{"_index":159,"title":{},"name":{},"text":{"7":{},"11":{},"23":{},"30":{},"34":{},"36":{},"41":{},"59":{},"81":{},"86":{},"102":{},"108":{},"131":{},"144":{},"160":{}},"component":{}}],["2014",{"_index":175,"title":{},"name":{},"text":{"8":{},"12":{},"25":{},"39":{},"41":{},"86":{},"102":{},"108":{}},"component":{}}],["2015",{"_index":597,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"42":{},"43":{},"59":{},"81":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"131":{},"144":{},"160":{}},"component":{}}],["2016",{"_index":602,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"59":{},"62":{},"81":{},"84":{},"86":{},"102":{},"108":{},"131":{},"134":{},"144":{},"160":{},"163":{}},"component":{}}],["2017",{"_index":604,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"59":{},"81":{},"86":{},"102":{},"108":{},"131":{},"144":{},"160":{}},"component":{}}],["202",{"_index":817,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["2021",{"_index":183,"title":{},"name":{},"text":{"9":{},"13":{},"26":{},"40":{}},"component":{}}],["2023",{"_index":189,"title":{},"name":{},"text":{"10":{},"14":{},"15":{},"19":{},"28":{},"46":{},"51":{},"66":{},"113":{},"119":{},"137":{},"147":{}},"component":{}}],["2024",{"_index":1359,"title":{},"name":{},"text":{"57":{},"79":{},"129":{},"158":{}},"component":{}}],["203",{"_index":846,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["208.847",{"_index":1109,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["20966",{"_index":757,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["21",{"_index":474,"title":{},"name":{},"text":{"24":{},"29":{},"32":{},"33":{},"37":{},"38":{},"41":{},"42":{},"46":{},"48":{},"52":{},"53":{},"55":{},"63":{},"66":{},"68":{},"72":{},"73":{},"75":{},"76":{},"77":{},"85":{},"86":{},"87":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"103":{},"108":{},"109":{},"113":{},"116":{},"123":{},"124":{},"125":{},"127":{},"135":{},"143":{},"147":{},"149":{},"153":{},"154":{},"156":{},"164":{}},"component":{}}],["21.3",{"_index":43,"title":{"9":{},"13":{},"26":{},"40":{}},"name":{},"text":{"3":{},"41":{},"42":{},"43":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{}},"component":{}}],["21c",{"_index":181,"title":{},"name":{},"text":{"9":{},"13":{},"26":{},"40":{}},"component":{}}],["22",{"_index":248,"title":{},"name":{},"text":{"15":{},"19":{},"24":{},"29":{},"32":{},"33":{},"37":{},"41":{},"52":{},"53":{},"55":{},"63":{},"72":{},"73":{},"75":{},"77":{},"85":{},"86":{},"90":{},"94":{},"97":{},"102":{},"108":{},"119":{},"123":{},"124":{},"125":{},"127":{},"135":{},"137":{},"143":{},"153":{},"154":{},"156":{},"164":{}},"component":{}}],["22400",{"_index":841,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["23",{"_index":475,"title":{},"name":{},"text":{"24":{},"29":{},"32":{},"33":{},"37":{},"52":{},"53":{},"55":{},"58":{},"63":{},"72":{},"73":{},"75":{},"77":{},"80":{},"85":{},"90":{},"94":{},"97":{},"123":{},"124":{},"125":{},"127":{},"130":{},"135":{},"143":{},"153":{},"154":{},"156":{},"159":{},"164":{}},"component":{}}],["23.0.0",{"_index":1444,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["23.2",{"_index":44,"title":{"10":{},"14":{},"28":{},"51":{}},"name":{},"text":{"3":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"27":{},"29":{},"30":{},"31":{},"32":{},"34":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"71":{},"72":{},"73":{},"74":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"140":{},"141":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{}},"component":{}}],["23.47",{"_index":1078,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["23c",{"_index":66,"title":{},"name":{},"text":{"4":{},"10":{},"14":{},"28":{},"51":{},"63":{},"85":{},"92":{},"99":{},"105":{},"135":{},"136":{},"164":{}},"component":{}}],["24",{"_index":476,"title":{},"name":{},"text":{"24":{},"29":{},"32":{},"33":{},"37":{},"41":{},"52":{},"53":{},"55":{},"63":{},"72":{},"73":{},"75":{},"77":{},"85":{},"86":{},"90":{},"94":{},"97":{},"102":{},"108":{},"123":{},"124":{},"125":{},"127":{},"135":{},"143":{},"153":{},"154":{},"156":{},"164":{}},"component":{}}],["24900",{"_index":822,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["25",{"_index":477,"title":{},"name":{},"text":{"24":{},"29":{},"32":{},"33":{},"37":{},"48":{},"52":{},"53":{},"55":{},"63":{},"68":{},"72":{},"73":{},"75":{},"77":{},"85":{},"90":{},"94":{},"97":{},"116":{},"123":{},"124":{},"125":{},"127":{},"135":{},"143":{},"149":{},"153":{},"154":{},"156":{},"164":{}},"component":{}}],["2500",{"_index":844,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["25939",{"_index":753,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["26",{"_index":478,"title":{},"name":{},"text":{"24":{},"29":{},"32":{},"33":{},"37":{},"49":{},"52":{},"53":{},"55":{},"69":{},"72":{},"73":{},"75":{},"77":{},"90":{},"94":{},"97":{},"117":{},"123":{},"124":{},"125":{},"127":{},"143":{},"150":{},"153":{},"154":{},"156":{}},"component":{}}],["2600",{"_index":839,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["27",{"_index":479,"title":{},"name":{},"text":{"24":{},"29":{},"32":{},"33":{},"37":{},"52":{},"53":{},"55":{},"72":{},"73":{},"75":{},"77":{},"90":{},"94":{},"97":{},"123":{},"124":{},"125":{},"127":{},"143":{},"153":{},"154":{},"156":{}},"component":{}}],["2700",{"_index":845,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["28",{"_index":480,"title":{},"name":{},"text":{"24":{},"29":{},"32":{},"33":{},"37":{},"53":{},"55":{},"73":{},"75":{},"77":{},"90":{},"94":{},"97":{},"123":{},"125":{},"127":{},"143":{},"154":{},"156":{}},"component":{}}],["2800",{"_index":830,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["2850",{"_index":842,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["288",{"_index":1103,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["29",{"_index":481,"title":{},"name":{},"text":{"24":{},"29":{},"32":{},"33":{},"37":{},"49":{},"53":{},"55":{},"69":{},"73":{},"75":{},"77":{},"90":{},"94":{},"97":{},"117":{},"123":{},"125":{},"127":{},"143":{},"150":{},"154":{},"156":{}},"component":{}}],["2900",{"_index":835,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["2994",{"_index":774,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["2nd",{"_index":488,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["3",{"_index":238,"title":{},"name":{},"text":{"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"118":{},"119":{},"120":{},"121":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"141":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{}},"component":{}}],["3,'john",{"_index":1395,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["3.0",{"_index":496,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["3.369",{"_index":1125,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["30",{"_index":482,"title":{},"name":{},"text":{"24":{},"29":{},"32":{},"33":{},"37":{},"41":{},"48":{},"53":{},"55":{},"68":{},"73":{},"75":{},"77":{},"86":{},"90":{},"94":{},"97":{},"102":{},"108":{},"116":{},"123":{},"125":{},"127":{},"143":{},"149":{},"154":{},"156":{}},"component":{}}],["31",{"_index":572,"title":{},"name":{},"text":{"29":{},"32":{},"53":{},"55":{},"73":{},"77":{},"123":{},"125":{},"127":{},"143":{},"154":{},"156":{}},"component":{}}],["31.331",{"_index":1121,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["31.689",{"_index":1127,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["3100",{"_index":826,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["32",{"_index":573,"title":{},"name":{},"text":{"29":{},"32":{},"48":{},"53":{},"55":{},"68":{},"73":{},"77":{},"116":{},"123":{},"125":{},"127":{},"143":{},"149":{},"154":{},"156":{}},"component":{}}],["33",{"_index":574,"title":{},"name":{},"text":{"29":{},"32":{},"53":{},"55":{},"73":{},"77":{},"123":{},"125":{},"127":{},"143":{},"154":{},"156":{}},"component":{}}],["34",{"_index":575,"title":{},"name":{},"text":{"29":{},"32":{},"53":{},"55":{},"73":{},"77":{},"123":{},"125":{},"127":{},"143":{},"154":{},"156":{}},"component":{}}],["3453",{"_index":759,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["35",{"_index":1034,"title":{},"name":{},"text":{"48":{},"53":{},"55":{},"68":{},"73":{},"77":{},"116":{},"125":{},"127":{},"149":{},"154":{},"156":{}},"component":{}}],["36",{"_index":1033,"title":{},"name":{},"text":{"48":{},"53":{},"55":{},"68":{},"73":{},"77":{},"116":{},"125":{},"127":{},"149":{},"154":{},"156":{}},"component":{}}],["37",{"_index":1238,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["37.556",{"_index":1132,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["38",{"_index":1239,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["38172",{"_index":1389,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["39",{"_index":1240,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["3rd",{"_index":258,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["4",{"_index":239,"title":{},"name":{},"text":{"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"46":{},"47":{},"48":{},"50":{},"52":{},"53":{},"54":{},"55":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"66":{},"67":{},"68":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"113":{},"114":{},"115":{},"116":{},"118":{},"119":{},"120":{},"121":{},"123":{},"124":{},"125":{},"126":{},"127":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"141":{},"143":{},"144":{},"145":{},"147":{},"148":{},"149":{},"151":{},"153":{},"154":{},"155":{},"156":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{}},"component":{}}],["4.546",{"_index":1090,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["40",{"_index":847,"title":{},"name":{},"text":{"41":{},"53":{},"73":{},"86":{},"102":{},"108":{},"125":{},"154":{}},"component":{}}],["4090",{"_index":743,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["4096",{"_index":1434,"title":{"63":{},"85":{},"135":{},"164":{}},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["41",{"_index":1038,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["4200",{"_index":1328,"title":{},"name":{},"text":{"55":{},"62":{},"77":{},"84":{},"127":{},"134":{},"156":{},"163":{}},"component":{}}],["421.986",{"_index":1133,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["42167",{"_index":766,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["429",{"_index":776,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["44",{"_index":1035,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["44.694",{"_index":1105,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["4400",{"_index":813,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["4494",{"_index":1329,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["459.542",{"_index":1134,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["4759",{"_index":739,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["48.169",{"_index":1113,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["4800",{"_index":1325,"title":{},"name":{},"text":{"55":{},"62":{},"77":{},"84":{},"127":{},"134":{},"156":{},"163":{}},"component":{}}],["49",{"_index":1036,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["4950",{"_index":837,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["4974",{"_index":768,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["4gl",{"_index":118,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["5",{"_index":240,"title":{},"name":{},"text":{"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"50":{},"52":{},"53":{},"54":{},"55":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"118":{},"119":{},"120":{},"121":{},"123":{},"124":{},"125":{},"126":{},"127":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"141":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"151":{},"153":{},"154":{},"155":{},"156":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{}},"component":{}}],["50",{"_index":517,"title":{},"name":{},"text":{"27":{},"31":{},"41":{},"48":{},"62":{},"68":{},"84":{},"86":{},"102":{},"108":{},"115":{},"116":{},"134":{},"141":{},"149":{},"163":{}},"component":{}}],["512gb",{"_index":494,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["5136",{"_index":1326,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["53",{"_index":1143,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["56",{"_index":1037,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["5633",{"_index":833,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["57",{"_index":1031,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["598",{"_index":1123,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["6",{"_index":241,"title":{},"name":{},"text":{"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"46":{},"47":{},"48":{},"50":{},"52":{},"53":{},"54":{},"55":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"66":{},"67":{},"68":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"113":{},"114":{},"115":{},"116":{},"118":{},"119":{},"120":{},"121":{},"123":{},"124":{},"125":{},"126":{},"127":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"141":{},"143":{},"144":{},"145":{},"147":{},"148":{},"149":{},"151":{},"153":{},"154":{},"155":{},"156":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{}},"component":{}}],["60",{"_index":529,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["6000",{"_index":818,"title":{},"name":{},"text":{"41":{},"55":{},"62":{},"77":{},"84":{},"86":{},"102":{},"108":{},"127":{},"134":{},"156":{},"163":{}},"component":{}}],["62",{"_index":1032,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["62361",{"_index":1385,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["6265",{"_index":751,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["6279",{"_index":747,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["6300",{"_index":1433,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["6395",{"_index":772,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["6420",{"_index":1323,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["6500",{"_index":848,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["66",{"_index":1030,"title":{},"name":{},"text":{"48":{},"49":{},"68":{},"69":{},"116":{},"117":{},"149":{},"150":{}},"component":{}}],["7",{"_index":242,"title":{},"name":{},"text":{"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"46":{},"47":{},"48":{},"52":{},"53":{},"54":{},"55":{},"59":{},"60":{},"62":{},"63":{},"64":{},"66":{},"67":{},"68":{},"70":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"81":{},"82":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"113":{},"114":{},"115":{},"116":{},"119":{},"120":{},"121":{},"123":{},"124":{},"125":{},"126":{},"127":{},"131":{},"132":{},"134":{},"135":{},"137":{},"138":{},"139":{},"141":{},"143":{},"144":{},"145":{},"147":{},"148":{},"149":{},"153":{},"154":{},"155":{},"156":{},"160":{},"161":{},"163":{},"164":{}},"component":{}}],["7.026",{"_index":1119,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["7.027",{"_index":1095,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["70",{"_index":528,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["7050",{"_index":828,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["7178",{"_index":745,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["7200",{"_index":1432,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["741",{"_index":1117,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["75",{"_index":518,"title":{},"name":{},"text":{"27":{},"31":{},"48":{},"68":{},"115":{},"116":{},"141":{},"149":{}},"component":{}}],["7994",{"_index":755,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["8",{"_index":243,"title":{},"name":{},"text":{"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"46":{},"48":{},"52":{},"53":{},"54":{},"55":{},"59":{},"63":{},"64":{},"66":{},"68":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"81":{},"85":{},"86":{},"87":{},"88":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"113":{},"115":{},"116":{},"119":{},"120":{},"121":{},"123":{},"124":{},"125":{},"126":{},"127":{},"131":{},"135":{},"137":{},"138":{},"139":{},"141":{},"143":{},"144":{},"145":{},"147":{},"149":{},"153":{},"154":{},"155":{},"156":{},"160":{},"164":{}},"component":{}}],["8.99",{"_index":558,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["80",{"_index":526,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["81970,44",{"_index":758,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["83461,16",{"_index":756,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["83833,3",{"_index":754,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["84261,92",{"_index":752,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["849",{"_index":562,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["849.00",{"_index":576,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["85200,78",{"_index":750,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["85278,17",{"_index":748,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["86440,63",{"_index":746,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["89018,86",{"_index":744,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["9",{"_index":244,"title":{},"name":{},"text":{"15":{},"17":{},"19":{},"21":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"46":{},"48":{},"52":{},"53":{},"54":{},"55":{},"59":{},"63":{},"64":{},"66":{},"68":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"81":{},"85":{},"86":{},"87":{},"88":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"113":{},"115":{},"116":{},"119":{},"121":{},"123":{},"124":{},"125":{},"126":{},"127":{},"131":{},"135":{},"137":{},"139":{},"141":{},"143":{},"144":{},"145":{},"147":{},"149":{},"153":{},"154":{},"155":{},"156":{},"160":{},"164":{}},"component":{}}],["9.99",{"_index":555,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["90",{"_index":525,"title":{},"name":{},"text":{"27":{},"31":{},"48":{},"68":{},"115":{},"116":{},"141":{},"149":{}},"component":{}}],["9000",{"_index":1320,"title":{},"name":{},"text":{"55":{},"62":{},"77":{},"84":{},"127":{},"134":{},"156":{},"163":{}},"component":{}}],["9038",{"_index":741,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["90908,24",{"_index":742,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["92",{"_index":1029,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["926",{"_index":1080,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["92671,18",{"_index":740,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["93644,32",{"_index":738,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["94786,13",{"_index":777,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["94819,41",{"_index":775,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["94862,61",{"_index":773,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["9500",{"_index":819,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["9630",{"_index":1321,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["97010,48",{"_index":771,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["97573,55",{"_index":769,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["98006,16",{"_index":767,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["98585,96",{"_index":765,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["99",{"_index":519,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["990.00",{"_index":571,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["99578,09",{"_index":763,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["9999",{"_index":1200,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["_____",{"_index":737,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["_________",{"_index":1421,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["__________",{"_index":736,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["___________",{"_index":735,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["____________",{"_index":760,"title":{},"name":{},"text":{"38":{},"62":{},"76":{},"84":{},"91":{},"98":{},"134":{},"163":{}},"component":{}}],["_____________",{"_index":1420,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["______________",{"_index":484,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"44":{},"64":{},"75":{},"90":{},"94":{},"97":{},"111":{},"145":{}},"component":{}}],["________________",{"_index":907,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["__________________",{"_index":908,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["___________________",{"_index":909,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["________________________________",{"_index":483,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["___________________________________________",{"_index":1206,"title":{},"name":{},"text":{"52":{},"72":{},"124":{},"153":{}},"component":{}}],["___________________________________________________________________",{"_index":1358,"title":{},"name":{},"text":{"57":{},"79":{},"129":{},"158":{}},"component":{}}],["_______________________________________________________________________________________",{"_index":485,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["_licens",{"_index":698,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["abil",{"_index":1330,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["abov",{"_index":405,"title":{},"name":{},"text":{"18":{},"22":{},"52":{},"63":{},"72":{},"85":{},"122":{},"124":{},"135":{},"140":{},"153":{},"164":{}},"component":{}}],["absenc",{"_index":666,"title":{},"name":{},"text":{"35":{},"53":{},"70":{},"73":{},"89":{},"95":{},"125":{},"154":{}},"component":{}}],["accept",{"_index":541,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["access",{"_index":75,"title":{},"name":{},"text":{"5":{},"6":{},"16":{},"20":{},"30":{},"34":{},"44":{},"56":{},"59":{},"64":{},"78":{},"81":{},"93":{},"96":{},"100":{},"101":{},"106":{},"107":{},"111":{},"120":{},"128":{},"131":{},"138":{},"142":{},"144":{},"145":{},"152":{},"157":{},"160":{}},"component":{}}],["accord",{"_index":1256,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["accordingli",{"_index":1446,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["accru",{"_index":649,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["activ",{"_index":921,"title":{},"name":{},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["actual",{"_index":352,"title":{},"name":{},"text":{"17":{},"21":{},"53":{},"73":{},"121":{},"125":{},"139":{},"154":{}},"component":{}}],["ad",{"_index":892,"title":{},"name":{},"text":{"44":{},"49":{},"58":{},"64":{},"69":{},"80":{},"111":{},"117":{},"130":{},"145":{},"150":{},"159":{}},"component":{}}],["add",{"_index":981,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["addit",{"_index":61,"title":{},"name":{},"text":{"4":{},"6":{},"16":{},"20":{},"35":{},"38":{},"43":{},"44":{},"61":{},"64":{},"70":{},"76":{},"83":{},"88":{},"89":{},"91":{},"92":{},"95":{},"96":{},"98":{},"99":{},"101":{},"104":{},"105":{},"107":{},"110":{},"111":{},"120":{},"133":{},"136":{},"138":{},"145":{},"152":{},"162":{}},"component":{}}],["address",{"_index":927,"title":{},"name":{},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["advanc",{"_index":179,"title":{},"name":{},"text":{"8":{},"12":{},"25":{},"39":{}},"component":{}}],["advantag",{"_index":424,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["affect",{"_index":1285,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["against",{"_index":1183,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["aggreg",{"_index":544,"title":{},"name":{},"text":{"29":{},"30":{},"32":{},"34":{},"49":{},"59":{},"60":{},"69":{},"81":{},"82":{},"117":{},"123":{},"131":{},"132":{},"143":{},"144":{},"150":{},"160":{},"161":{}},"component":{}}],["aid",{"_index":1363,"title":{},"name":{},"text":{"57":{},"79":{},"129":{},"158":{}},"component":{}}],["airpod",{"_index":486,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["alexand",{"_index":1422,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["algorithm",{"_index":999,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["alia",{"_index":1039,"title":{"49":{},"69":{},"117":{},"150":{},"49-1":{},"69-1":{},"117-1":{},"150-1":{}},"name":{"49":{},"69":{},"117":{},"150":{}},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["allow",{"_index":102,"title":{},"name":{},"text":{"5":{},"15":{},"16":{},"18":{},"19":{},"20":{},"22":{},"27":{},"31":{},"52":{},"53":{},"55":{},"56":{},"63":{},"72":{},"73":{},"77":{},"78":{},"85":{},"93":{},"100":{},"106":{},"115":{},"119":{},"120":{},"122":{},"124":{},"125":{},"127":{},"128":{},"135":{},"137":{},"138":{},"140":{},"141":{},"142":{},"153":{},"154":{},"156":{},"157":{},"164":{}},"component":{}}],["almiray",{"_index":672,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["along",{"_index":910,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["alreadi",{"_index":1152,"title":{},"name":{},"text":{"50":{},"71":{},"118":{},"151":{}},"component":{}}],["alter",{"_index":127,"title":{},"name":{},"text":{"6":{},"30":{},"34":{},"41":{},"42":{},"43":{},"44":{},"49":{},"59":{},"64":{},"69":{},"81":{},"86":{},"87":{},"88":{},"96":{},"101":{},"102":{},"103":{},"104":{},"107":{},"108":{},"109":{},"110":{},"111":{},"117":{},"131":{},"144":{},"145":{},"150":{},"152":{},"160":{}},"component":{}}],["although",{"_index":667,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["alway",{"_index":681,"title":{},"name":{},"text":{"35":{},"50":{},"52":{},"53":{},"55":{},"70":{},"71":{},"72":{},"73":{},"77":{},"89":{},"95":{},"118":{},"124":{},"125":{},"127":{},"151":{},"153":{},"154":{},"156":{}},"component":{}}],["amend",{"_index":1140,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["america",{"_index":1076,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["american",{"_index":141,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["amount",{"_index":549,"title":{},"name":{},"text":{"29":{},"32":{},"55":{},"77":{},"123":{},"127":{},"143":{},"156":{}},"component":{}}],["amount_sold",{"_index":717,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["analysi",{"_index":168,"title":{},"name":{},"text":{"7":{},"11":{},"23":{},"36":{}},"component":{}}],["analyt",{"_index":187,"title":{},"name":{},"text":{"9":{},"13":{},"26":{},"38":{},"40":{},"41":{},"60":{},"76":{},"82":{},"86":{},"91":{},"98":{},"102":{},"108":{},"132":{},"161":{}},"component":{}}],["analyz",{"_index":135,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["and/or",{"_index":1046,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["andr",{"_index":671,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["annot",{"_index":198,"title":{"44":{},"64":{},"111":{},"145":{}},"name":{"44":{},"64":{},"111":{},"145":{}},"text":{"10":{},"14":{},"28":{},"44":{},"51":{},"64":{},"111":{},"145":{}},"component":{}}],["annotation_nam",{"_index":904,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["annotation_valu",{"_index":905,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["anonym",{"_index":92,"title":{},"name":{},"text":{"5":{},"24":{},"33":{},"37":{},"75":{},"90":{},"93":{},"94":{},"97":{},"100":{},"106":{},"142":{}},"component":{}}],["anoth",{"_index":1336,"title":{},"name":{},"text":{"56":{},"78":{},"128":{},"157":{}},"component":{}}],["ansi",{"_index":144,"title":{},"name":{},"text":{"6":{},"38":{},"76":{},"91":{},"96":{},"98":{},"101":{},"107":{},"152":{}},"component":{}}],["ansi/iso",{"_index":151,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["antrtk",{"_index":1275,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["antrtksntt",{"_index":1276,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["appear",{"_index":93,"title":{},"name":{},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["appl",{"_index":490,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["appli",{"_index":984,"title":{},"name":{},"text":{"47":{},"55":{},"67":{},"77":{},"114":{},"127":{},"148":{},"156":{}},"component":{}}],["applic",{"_index":87,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"11":{},"16":{},"17":{},"18":{},"20":{},"21":{},"22":{},"23":{},"36":{},"44":{},"52":{},"53":{},"63":{},"64":{},"72":{},"73":{},"85":{},"93":{},"96":{},"100":{},"101":{},"106":{},"107":{},"111":{},"120":{},"121":{},"122":{},"124":{},"125":{},"135":{},"138":{},"139":{},"140":{},"142":{},"145":{},"152":{},"153":{},"154":{},"164":{}},"component":{}}],["approach",{"_index":1333,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["apr",{"_index":945,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["april",{"_index":188,"title":{},"name":{},"text":{"10":{},"14":{},"28":{},"51":{}},"component":{}}],["apstrt",{"_index":1277,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["apstrtfk",{"_index":1278,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["architectur",{"_index":161,"title":{},"name":{},"text":{"7":{},"11":{},"23":{},"36":{}},"component":{}}],["aren’t",{"_index":253,"title":{},"name":{},"text":{"15":{},"17":{},"19":{},"21":{},"119":{},"121":{},"137":{},"139":{}},"component":{}}],["argentina",{"_index":1104,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["argument",{"_index":934,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["array",{"_index":109,"title":{},"name":{},"text":{"5":{},"29":{},"32":{},"93":{},"100":{},"106":{},"123":{},"142":{},"143":{}},"component":{}}],["aspect",{"_index":780,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["assign",{"_index":513,"title":{},"name":{},"text":{"27":{},"31":{},"35":{},"47":{},"67":{},"70":{},"89":{},"95":{},"114":{},"115":{},"141":{},"148":{}},"component":{}}],["assum",{"_index":1136,"title":{},"name":{},"text":{"49":{},"63":{},"69":{},"85":{},"117":{},"135":{},"150":{},"164":{}},"component":{}}],["athlet",{"_index":1014,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["attribut",{"_index":661,"title":{},"name":{},"text":{"35":{},"63":{},"70":{},"85":{},"89":{},"95":{},"135":{},"164":{}},"component":{}}],["audit",{"_index":428,"title":{},"name":{},"text":{"18":{},"22":{},"55":{},"77":{},"122":{},"127":{},"140":{},"156":{}},"component":{}}],["aug",{"_index":610,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"59":{},"81":{},"86":{},"102":{},"108":{},"131":{},"144":{},"160":{}},"component":{}}],["augment",{"_index":24,"title":{},"name":{},"text":{"1":{}},"component":{}}],["august",{"_index":182,"title":{},"name":{},"text":{"9":{},"13":{},"26":{},"40":{}},"component":{}}],["australia",{"_index":1077,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["authent",{"_index":1338,"title":{},"name":{},"text":{"56":{},"78":{},"128":{},"157":{}},"component":{}}],["autoincr",{"_index":658,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["automat",{"_index":162,"title":{},"name":{},"text":{"7":{},"11":{},"23":{},"29":{},"30":{},"32":{},"34":{},"35":{},"36":{},"56":{},"59":{},"70":{},"78":{},"81":{},"89":{},"95":{},"123":{},"128":{},"131":{},"143":{},"144":{},"157":{},"160":{}},"component":{}}],["avail",{"_index":263,"title":{},"name":{},"text":{"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"140":{},"141":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{}},"component":{}}],["averag",{"_index":800,"title":{},"name":{},"text":{"41":{},"60":{},"82":{},"86":{},"102":{},"108":{},"132":{},"161":{}},"component":{}}],["avg",{"_index":804,"title":{"60":{},"82":{},"132":{},"161":{}},"name":{"60":{},"82":{},"132":{},"161":{}},"text":{"41":{},"60":{},"82":{},"86":{},"102":{},"108":{},"132":{},"161":{}},"component":{}}],["avoid",{"_index":1399,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["awar",{"_index":1055,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["b",{"_index":527,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["back",{"_index":577,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["base",{"_index":115,"title":{},"name":{},"text":{"6":{},"17":{},"21":{},"54":{},"74":{},"96":{},"101":{},"107":{},"121":{},"126":{},"139":{},"152":{},"155":{}},"component":{}}],["basic",{"_index":625,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["batch",{"_index":730,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["be",{"_index":502,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"42":{},"49":{},"69":{},"75":{},"87":{},"90":{},"94":{},"97":{},"103":{},"109":{},"117":{},"150":{}},"component":{}}],["becam",{"_index":139,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["befor",{"_index":329,"title":{},"name":{},"text":{"17":{},"21":{},"38":{},"43":{},"52":{},"53":{},"62":{},"63":{},"72":{},"73":{},"76":{},"84":{},"85":{},"88":{},"91":{},"98":{},"104":{},"110":{},"121":{},"124":{},"125":{},"134":{},"135":{},"139":{},"153":{},"154":{},"163":{},"164":{}},"component":{}}],["begin",{"_index":368,"title":{},"name":{},"text":{"18":{},"22":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"50":{},"53":{},"55":{},"59":{},"63":{},"71":{},"73":{},"75":{},"76":{},"77":{},"81":{},"85":{},"90":{},"91":{},"94":{},"97":{},"98":{},"115":{},"118":{},"122":{},"123":{},"125":{},"127":{},"131":{},"135":{},"140":{},"141":{},"143":{},"144":{},"151":{},"154":{},"156":{},"160":{},"164":{}},"component":{}}],["behavior",{"_index":878,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["behind",{"_index":1060,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["below",{"_index":442,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["benefit",{"_index":201,"title":{"15-1":{},"16-1":{},"17-1":{},"18-1":{},"19-1":{},"20-1":{},"21-1":{},"22-1":{},"24-1":{},"27-1":{},"29-1":{},"30-1":{},"31-1":{},"32-1":{},"33-1":{},"34-1":{},"35-1":{},"37-1":{},"38-1":{},"41-1":{},"42-1":{},"43-1":{},"44-1":{},"45-1":{},"46-1":{},"47-1":{},"48-1":{},"49-4":{},"50-1":{},"52-1":{},"53-1":{},"54-1":{},"55-1":{},"56-1":{},"57-1":{},"58-1":{},"59-1":{},"60-1":{},"61-1":{},"62-1":{},"63-1":{},"64-1":{},"65-1":{},"66-1":{},"67-1":{},"68-1":{},"69-4":{},"70-1":{},"71-1":{},"72-1":{},"73-1":{},"74-1":{},"75-1":{},"76-1":{},"77-1":{},"78-1":{},"79-1":{},"80-1":{},"81-1":{},"82-1":{},"83-1":{},"84-1":{},"85-1":{},"86-1":{},"87-1":{},"88-1":{},"89-1":{},"90-1":{},"91-1":{},"94-1":{},"95-1":{},"97-1":{},"98-1":{},"102-1":{},"103-1":{},"104-1":{},"108-1":{},"109-1":{},"110-1":{},"111-1":{},"112-1":{},"113-1":{},"114-1":{},"115-1":{},"116-1":{},"117-4":{},"118-1":{},"119-1":{},"120-1":{},"121-1":{},"122-1":{},"123-1":{},"124-1":{},"125-1":{},"126-1":{},"127-1":{},"128-1":{},"129-1":{},"130-1":{},"131-1":{},"132-1":{},"133-1":{},"134-1":{},"135-1":{},"137-1":{},"138-1":{},"139-1":{},"140-1":{},"141-1":{},"143-1":{},"144-1":{},"145-1":{},"146-1":{},"147-1":{},"148-1":{},"149-1":{},"150-4":{},"151-1":{},"153-1":{},"154-1":{},"155-1":{},"156-1":{},"157-1":{},"158-1":{},"159-1":{},"160-1":{},"161-1":{},"162-1":{},"163-1":{},"164-1":{}},"name":{},"text":{"38":{},"44":{},"64":{},"76":{},"91":{},"98":{},"111":{},"145":{}},"component":{}}],["berlin",{"_index":1390,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["bestbuy",{"_index":497,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["better",{"_index":1212,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["between",{"_index":335,"title":{},"name":{},"text":{"17":{},"18":{},"21":{},"22":{},"27":{},"30":{},"31":{},"34":{},"43":{},"59":{},"81":{},"88":{},"104":{},"110":{},"115":{},"121":{},"122":{},"131":{},"139":{},"140":{},"141":{},"144":{},"160":{}},"component":{}}],["bigram",{"_index":1020,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["binary_integ",{"_index":459,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["black/6422265.p",{"_index":501,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["block",{"_index":85,"title":{},"name":{},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["blockchain",{"_index":184,"title":{},"name":{},"text":{"9":{},"13":{},"26":{},"40":{}},"component":{}}],["blog",{"_index":313,"title":{},"name":{},"text":{"16":{},"17":{},"20":{},"21":{},"38":{},"63":{},"76":{},"85":{},"91":{},"98":{},"120":{},"121":{},"135":{},"138":{},"139":{},"164":{}},"component":{}}],["blogs.oracle.com",{"_index":1478,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["bolivia",{"_index":1106,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["book",{"_index":1381,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["bool",{"_index":916,"title":{},"name":{},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["boolean",{"_index":913,"title":{"45":{},"65":{},"112":{},"146":{}},"name":{"45":{},"65":{},"112":{},"146":{}},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["both",{"_index":1146,"title":{},"name":{},"text":{"49":{},"52":{},"69":{},"72":{},"117":{},"124":{},"150":{},"153":{}},"component":{}}],["bound",{"_index":972,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["brazil",{"_index":1108,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["bruce",{"_index":1423,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["build",{"_index":363,"title":{},"name":{},"text":{"18":{},"22":{},"63":{},"85":{},"122":{},"135":{},"140":{},"164":{}},"component":{}}],["built",{"_index":255,"title":{},"name":{},"text":{"15":{},"19":{},"29":{},"32":{},"119":{},"123":{},"137":{},"143":{}},"component":{}}],["bulk",{"_index":1308,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["busi",{"_index":1388,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["c",{"_index":57,"title":{},"name":{},"text":{"4":{},"27":{},"31":{},"63":{},"85":{},"92":{},"99":{},"105":{},"115":{},"135":{},"136":{},"141":{},"164":{}},"component":{}}],["c0001",{"_index":1462,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["c1",{"_index":974,"title":{},"name":{},"text":{"47":{},"56":{},"67":{},"78":{},"114":{},"128":{},"148":{},"157":{}},"component":{}}],["c2",{"_index":976,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["c3",{"_index":977,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["c4",{"_index":978,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["c_num_col",{"_index":1457,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["calcul",{"_index":787,"title":{},"name":{},"text":{"41":{},"42":{},"43":{},"60":{},"82":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"132":{},"161":{}},"component":{}}],["call",{"_index":79,"title":{"16":{},"20":{},"120":{},"138":{}},"name":{"16":{},"20":{},"120":{},"138":{}},"text":{"5":{},"16":{},"17":{},"18":{},"20":{},"21":{},"22":{},"30":{},"34":{},"57":{},"59":{},"79":{},"81":{},"93":{},"100":{},"106":{},"120":{},"121":{},"122":{},"129":{},"131":{},"138":{},"139":{},"140":{},"142":{},"144":{},"158":{},"160":{}},"component":{}}],["capabl",{"_index":10,"title":{},"name":{},"text":{"1":{}},"component":{}}],["capit",{"_index":445,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["capitalize(get_domain_name(url",{"_index":466,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["capitalize(nam",{"_index":465,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["car",{"_index":696,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["case",{"_index":507,"title":{"27":{},"31":{},"115":{},"141":{}},"name":{"27":{},"31":{},"115":{},"141":{}},"text":{"27":{},"31":{},"58":{},"63":{},"80":{},"85":{},"115":{},"130":{},"135":{},"141":{},"159":{},"164":{}},"component":{}}],["categor",{"_index":82,"title":{},"name":{},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["categori",{"_index":38,"title":{"2":{}},"name":{},"text":{"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"140":{},"141":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{}},"component":{}}],["caution",{"_index":1041,"title":{"49-3":{},"69-3":{},"117-3":{},"150-3":{}},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["ceil",{"_index":929,"title":{"46":{},"66":{},"113":{},"147":{}},"name":{"46":{},"66":{},"113":{},"147":{}},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["central",{"_index":873,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["certain",{"_index":1473,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["champion",{"_index":1005,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["chang",{"_index":988,"title":{},"name":{},"text":{"47":{},"49":{},"62":{},"63":{},"67":{},"69":{},"84":{},"85":{},"114":{},"117":{},"134":{},"135":{},"148":{},"150":{},"163":{},"164":{}},"component":{}}],["changed_o",{"_index":1322,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["changed_on",{"_index":1298,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["char",{"_index":886,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["char(3",{"_index":548,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["charact",{"_index":1189,"title":{},"name":{},"text":{"52":{},"53":{},"54":{},"72":{},"73":{},"74":{},"124":{},"125":{},"126":{},"153":{},"154":{},"155":{}},"component":{}}],["check",{"_index":1174,"title":{"53":{},"73":{},"125":{},"154":{}},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["chile",{"_index":1110,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["choic",{"_index":215,"title":{},"name":{},"text":{"15":{},"19":{},"27":{},"31":{},"115":{},"119":{},"137":{},"141":{}},"component":{}}],["chr(13",{"_index":1461,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["chri",{"_index":673,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["chris\".\"default_values\".\"c2",{"_index":991,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["chris\".\"default_values\".\"c3",{"_index":992,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["citi",{"_index":1006,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["claus",{"_index":437,"title":{"41":{},"55":{},"58":{},"77":{},"80":{},"86":{},"102":{},"108":{},"127":{},"130":{},"156":{},"159":{}},"name":{"41":{},"86":{},"102":{},"108":{}},"text":{"24":{},"27":{},"29":{},"31":{},"32":{},"33":{},"37":{},"38":{},"41":{},"47":{},"49":{},"52":{},"55":{},"58":{},"67":{},"69":{},"72":{},"75":{},"76":{},"77":{},"80":{},"86":{},"90":{},"91":{},"94":{},"97":{},"98":{},"102":{},"108":{},"114":{},"115":{},"117":{},"123":{},"124":{},"127":{},"130":{},"141":{},"143":{},"148":{},"150":{},"153":{},"156":{},"159":{}},"component":{}}],["clean",{"_index":1158,"title":{},"name":{},"text":{"50":{},"71":{},"118":{},"151":{}},"component":{}}],["client",{"_index":277,"title":{},"name":{},"text":{"16":{},"20":{},"61":{},"83":{},"120":{},"133":{},"138":{},"162":{}},"component":{}}],["clob",{"_index":565,"title":{},"name":{},"text":{"29":{},"32":{},"63":{},"85":{},"123":{},"135":{},"143":{},"164":{}},"component":{}}],["co",{"_index":1070,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["co.nam",{"_index":1065,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["co.region_id",{"_index":1072,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["code",{"_index":64,"title":{},"name":{},"text":{"4":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"27":{},"31":{},"47":{},"53":{},"57":{},"58":{},"67":{},"73":{},"79":{},"80":{},"92":{},"99":{},"105":{},"114":{},"115":{},"119":{},"120":{},"121":{},"122":{},"125":{},"129":{},"130":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"148":{},"154":{},"158":{},"159":{}},"component":{}}],["collect",{"_index":111,"title":{},"name":{},"text":{"5":{},"55":{},"77":{},"93":{},"100":{},"106":{},"127":{},"142":{},"156":{}},"component":{}}],["colombia",{"_index":1112,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["column",{"_index":178,"title":{"35":{},"49":{},"63":{},"69":{},"70":{},"85":{},"89":{},"95":{},"117":{},"135":{},"150":{},"164":{},"49-1":{},"49-2":{},"69-1":{},"69-2":{},"117-1":{},"117-2":{},"150-1":{},"150-2":{}},"name":{"35":{},"70":{},"89":{},"95":{}},"text":{"8":{},"12":{},"25":{},"35":{},"38":{},"39":{},"42":{},"43":{},"44":{},"45":{},"47":{},"49":{},"52":{},"53":{},"63":{},"64":{},"65":{},"67":{},"69":{},"70":{},"72":{},"73":{},"76":{},"85":{},"87":{},"88":{},"89":{},"91":{},"95":{},"98":{},"103":{},"104":{},"109":{},"110":{},"111":{},"112":{},"114":{},"117":{},"124":{},"125":{},"135":{},"145":{},"146":{},"148":{},"150":{},"153":{},"154":{},"164":{}},"component":{}}],["column_nam",{"_index":903,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["combined_nam",{"_index":1063,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["come",{"_index":426,"title":{},"name":{},"text":{"18":{},"22":{},"52":{},"53":{},"72":{},"73":{},"122":{},"124":{},"125":{},"140":{},"153":{},"154":{}},"component":{}}],["command",{"_index":1163,"title":{},"name":{},"text":{"50":{},"71":{},"118":{},"151":{}},"component":{}}],["command’",{"_index":1331,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["comment",{"_index":1177,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["commit",{"_index":676,"title":{},"name":{},"text":{"35":{},"45":{},"53":{},"62":{},"65":{},"70":{},"73":{},"84":{},"89":{},"95":{},"112":{},"125":{},"134":{},"146":{},"154":{},"163":{}},"component":{}}],["common",{"_index":438,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"41":{},"44":{},"64":{},"75":{},"86":{},"90":{},"94":{},"97":{},"102":{},"108":{},"111":{},"145":{}},"component":{}}],["commonli",{"_index":21,"title":{},"name":{},"text":{"1":{},"18":{},"22":{},"122":{},"140":{}},"component":{}}],["commun",{"_index":361,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["compar",{"_index":997,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["comparison",{"_index":1144,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["compat",{"_index":1443,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["compil",{"_index":632,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["complet",{"_index":431,"title":{},"name":{},"text":{"18":{},"22":{},"27":{},"31":{},"35":{},"38":{},"45":{},"53":{},"55":{},"62":{},"63":{},"65":{},"70":{},"73":{},"76":{},"77":{},"84":{},"85":{},"89":{},"91":{},"95":{},"98":{},"112":{},"115":{},"122":{},"125":{},"127":{},"134":{},"135":{},"140":{},"141":{},"146":{},"154":{},"156":{},"163":{},"164":{}},"component":{}}],["complex",{"_index":212,"title":{},"name":{},"text":{"15":{},"18":{},"19":{},"22":{},"119":{},"122":{},"137":{},"140":{}},"component":{}}],["compli",{"_index":379,"title":{},"name":{},"text":{"18":{},"22":{},"38":{},"76":{},"91":{},"98":{},"122":{},"140":{}},"component":{}}],["compress",{"_index":180,"title":{},"name":{},"text":{"8":{},"12":{},"25":{},"39":{}},"component":{}}],["comput",{"_index":119,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["concat",{"_index":1351,"title":{},"name":{"57":{},"79":{},"129":{},"158":{}},"text":{"57":{},"79":{},"129":{},"158":{}},"component":{}}],["concat('hello",{"_index":1353,"title":{},"name":{},"text":{"57":{},"79":{},"129":{},"158":{}},"component":{}}],["concat(r.nam",{"_index":1064,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["concat(upper(substr(p_string,1,1",{"_index":451,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["concaten",{"_index":1349,"title":{"57":{},"79":{},"129":{},"158":{}},"name":{},"text":{"57":{},"79":{},"129":{},"158":{}},"component":{}}],["concept",{"_index":912,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["concis",{"_index":1147,"title":{},"name":{},"text":{"49":{},"61":{},"69":{},"83":{},"117":{},"133":{},"150":{},"162":{}},"component":{}}],["conclus",{"_index":1052,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["condit",{"_index":98,"title":{},"name":{},"text":{"5":{},"62":{},"84":{},"93":{},"100":{},"106":{},"134":{},"142":{},"163":{}},"component":{}}],["conform",{"_index":1172,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["conn",{"_index":1345,"title":{},"name":{},"text":{"56":{},"78":{},"128":{},"157":{}},"component":{}}],["connect",{"_index":1348,"title":{},"name":{},"text":{"56":{},"60":{},"78":{},"82":{},"128":{},"132":{},"157":{},"161":{}},"component":{}}],["consid",{"_index":1182,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["consist",{"_index":125,"title":{},"name":{},"text":{"6":{},"16":{},"18":{},"20":{},"22":{},"27":{},"31":{},"44":{},"64":{},"96":{},"101":{},"107":{},"111":{},"115":{},"120":{},"122":{},"138":{},"140":{},"141":{},"145":{},"152":{}},"component":{}}],["const",{"_index":333,"title":{},"name":{},"text":{"17":{},"18":{},"21":{},"22":{},"121":{},"122":{},"139":{},"140":{}},"component":{}}],["constant",{"_index":103,"title":{},"name":{},"text":{"5":{},"63":{},"85":{},"93":{},"100":{},"106":{},"135":{},"142":{},"164":{}},"component":{}}],["constraint",{"_index":983,"title":{"53":{},"73":{},"125":{},"154":{}},"name":{},"text":{"47":{},"52":{},"53":{},"55":{},"67":{},"72":{},"73":{},"77":{},"114":{},"124":{},"125":{},"127":{},"148":{},"153":{},"154":{},"156":{}},"component":{}}],["construct",{"_index":1459,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["constructor",{"_index":539,"title":{"61":{},"83":{},"133":{},"162":{}},"name":{"61":{},"83":{},"133":{},"162":{}},"text":{"29":{},"32":{},"61":{},"83":{},"123":{},"133":{},"143":{},"162":{}},"component":{}}],["contain",{"_index":309,"title":{},"name":{},"text":{"16":{},"20":{},"35":{},"45":{},"52":{},"53":{},"65":{},"70":{},"72":{},"73":{},"89":{},"95":{},"112":{},"120":{},"124":{},"125":{},"138":{},"146":{},"153":{},"154":{}},"component":{}}],["content",{"_index":1220,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["context",{"_index":630,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["continu",{"_index":169,"title":{},"name":{},"text":{"7":{},"11":{},"23":{},"36":{},"58":{},"80":{},"130":{},"159":{}},"component":{}}],["control",{"_index":136,"title":{"27":{},"31":{},"115":{},"141":{}},"name":{"27":{},"31":{},"115":{},"141":{}},"text":{"6":{},"56":{},"78":{},"96":{},"101":{},"107":{},"128":{},"152":{},"157":{}},"component":{}}],["conveni",{"_index":250,"title":{},"name":{},"text":{"15":{},"19":{},"49":{},"61":{},"69":{},"83":{},"117":{},"119":{},"133":{},"137":{},"150":{},"162":{}},"component":{}}],["convers",{"_index":538,"title":{"29":{},"32":{},"123":{},"143":{}},"name":{"29":{},"32":{},"123":{},"143":{}},"text":{"29":{},"30":{},"32":{},"34":{},"59":{},"81":{},"123":{},"131":{},"143":{},"144":{},"160":{}},"component":{}}],["convert",{"_index":369,"title":{},"name":{},"text":{"18":{},"22":{},"29":{},"30":{},"32":{},"34":{},"59":{},"81":{},"122":{},"123":{},"131":{},"140":{},"143":{},"144":{},"160":{}},"component":{}}],["correctli",{"_index":1204,"title":{},"name":{},"text":{"52":{},"72":{},"124":{},"153":{}},"component":{}}],["count",{"_index":622,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"42":{},"43":{},"56":{},"59":{},"63":{},"78":{},"81":{},"85":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"128":{},"131":{},"135":{},"144":{},"157":{},"160":{},"164":{}},"component":{}}],["countri",{"_index":567,"title":{},"name":{},"text":{"29":{},"32":{},"49":{},"69":{},"117":{},"123":{},"143":{},"150":{}},"component":{}}],["country_nam",{"_index":1131,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["country_pric",{"_index":552,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["country_price_arr",{"_index":550,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["cover",{"_index":779,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["covert",{"_index":217,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["creat",{"_index":88,"title":{},"name":{},"text":{"5":{},"6":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"30":{},"33":{},"34":{},"35":{},"37":{},"44":{},"45":{},"47":{},"50":{},"52":{},"53":{},"55":{},"56":{},"59":{},"61":{},"63":{},"64":{},"65":{},"67":{},"70":{},"71":{},"72":{},"73":{},"75":{},"77":{},"78":{},"81":{},"83":{},"85":{},"89":{},"90":{},"93":{},"94":{},"95":{},"96":{},"97":{},"100":{},"101":{},"106":{},"107":{},"111":{},"112":{},"114":{},"118":{},"119":{},"120":{},"121":{},"122":{},"124":{},"125":{},"127":{},"128":{},"131":{},"133":{},"135":{},"137":{},"138":{},"139":{},"140":{},"142":{},"144":{},"145":{},"146":{},"148":{},"151":{},"152":{},"153":{},"154":{},"156":{},"157":{},"160":{},"162":{},"164":{}},"component":{}}],["created_tm",{"_index":1160,"title":{},"name":{},"text":{"50":{},"71":{},"118":{},"151":{}},"component":{}}],["creation",{"_index":269,"title":{},"name":{},"text":{"16":{},"18":{},"20":{},"22":{},"120":{},"122":{},"138":{},"140":{}},"component":{}}],["cross",{"_index":1026,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["crucial",{"_index":349,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["cte",{"_index":440,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["cumul_s",{"_index":798,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["currency_cod",{"_index":547,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["current",{"_index":288,"title":{},"name":{},"text":{"16":{},"20":{},"41":{},"42":{},"43":{},"49":{},"56":{},"57":{},"62":{},"69":{},"78":{},"79":{},"84":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"117":{},"120":{},"128":{},"129":{},"134":{},"138":{},"150":{},"157":{},"158":{},"163":{}},"component":{}}],["cust_id",{"_index":719,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["custom",{"_index":362,"title":{},"name":{},"text":{"18":{},"22":{},"38":{},"44":{},"64":{},"76":{},"91":{},"98":{},"111":{},"122":{},"140":{},"145":{}},"component":{}}],["customer_account",{"_index":692,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["customer_id",{"_index":883,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["d",{"_index":226,"title":{},"name":{},"text":{"15":{},"19":{},"27":{},"31":{},"55":{},"62":{},"77":{},"84":{},"115":{},"119":{},"127":{},"134":{},"137":{},"141":{},"156":{},"163":{}},"component":{}}],["d.department_id",{"_index":1305,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["d.department_nam",{"_index":1307,"title":{},"name":{},"text":{"55":{},"62":{},"77":{},"84":{},"127":{},"134":{},"156":{},"163":{}},"component":{}}],["d.setutcseconds(p_epoch",{"_index":228,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["dangl",{"_index":532,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["data",{"_index":27,"title":{"45":{},"46":{},"60":{},"65":{},"66":{},"82":{},"112":{},"113":{},"132":{},"146":{},"147":{},"161":{}},"name":{},"text":{"1":{},"5":{},"6":{},"7":{},"9":{},"11":{},"13":{},"18":{},"22":{},"23":{},"26":{},"29":{},"32":{},"35":{},"36":{},"40":{},"44":{},"45":{},"47":{},"49":{},"52":{},"53":{},"54":{},"55":{},"56":{},"62":{},"64":{},"65":{},"67":{},"69":{},"70":{},"72":{},"73":{},"74":{},"77":{},"78":{},"84":{},"89":{},"93":{},"95":{},"96":{},"100":{},"101":{},"106":{},"107":{},"111":{},"112":{},"114":{},"117":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"134":{},"140":{},"142":{},"143":{},"145":{},"146":{},"148":{},"150":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"163":{}},"component":{}}],["data_own",{"_index":1337,"title":{},"name":{},"text":{"56":{},"78":{},"128":{},"157":{}},"component":{}}],["data_owner.tab",{"_index":1343,"title":{},"name":{},"text":{"56":{},"78":{},"128":{},"157":{}},"component":{}}],["databas",{"_index":11,"title":{},"name":{},"text":{"1":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"18":{},"20":{},"21":{},"22":{},"23":{},"25":{},"26":{},"27":{},"28":{},"31":{},"35":{},"36":{},"38":{},"39":{},"40":{},"44":{},"47":{},"51":{},"55":{},"63":{},"64":{},"67":{},"70":{},"76":{},"77":{},"85":{},"89":{},"91":{},"92":{},"93":{},"95":{},"96":{},"98":{},"99":{},"100":{},"101":{},"105":{},"106":{},"107":{},"111":{},"114":{},"115":{},"120":{},"121":{},"122":{},"127":{},"135":{},"136":{},"138":{},"139":{},"140":{},"141":{},"142":{},"145":{},"148":{},"152":{},"156":{},"164":{}},"component":{}}],["datatyp",{"_index":1372,"title":{},"name":{},"text":{"60":{},"82":{},"132":{},"161":{}},"component":{}}],["date",{"_index":220,"title":{},"name":{},"text":{"15":{},"19":{},"30":{},"34":{},"41":{},"46":{},"50":{},"55":{},"59":{},"66":{},"71":{},"77":{},"81":{},"86":{},"102":{},"108":{},"113":{},"118":{},"119":{},"127":{},"131":{},"137":{},"144":{},"147":{},"151":{},"156":{},"160":{}},"component":{}}],["date'2015",{"_index":862,"title":{},"name":{},"text":{"42":{},"43":{},"87":{},"88":{},"103":{},"104":{},"109":{},"110":{}},"component":{}}],["date(0",{"_index":227,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["datetim",{"_index":931,"title":{"46":{},"66":{},"113":{},"147":{}},"name":{"46":{},"66":{},"113":{},"147":{}},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["david",{"_index":1425,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["day",{"_index":942,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["day_ceil",{"_index":949,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["dbms_json_schema.validate_report",{"_index":1227,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["dbms_output.put_lin",{"_index":521,"title":{},"name":{},"text":{"27":{},"29":{},"31":{},"32":{},"53":{},"73":{},"115":{},"123":{},"125":{},"141":{},"143":{},"154":{}},"component":{}}],["dbms_output.put_line('valid",{"_index":1232,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["dbms_xplan.display_cursor",{"_index":623,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["dd",{"_index":234,"title":{},"name":{},"text":{"15":{},"19":{},"41":{},"42":{},"43":{},"46":{},"57":{},"66":{},"79":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"113":{},"119":{},"129":{},"137":{},"147":{},"158":{}},"component":{}}],["dd.mm.yyyi",{"_index":1367,"title":{},"name":{},"text":{"58":{},"80":{},"130":{},"159":{}},"component":{}}],["de",{"_index":559,"title":{},"name":{},"text":{"29":{},"32":{},"63":{},"85":{},"123":{},"135":{},"143":{},"164":{}},"component":{}}],["dec",{"_index":824,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["declar",{"_index":91,"title":{},"name":{},"text":{"5":{},"6":{},"29":{},"32":{},"35":{},"44":{},"45":{},"53":{},"55":{},"63":{},"64":{},"65":{},"70":{},"73":{},"77":{},"85":{},"89":{},"93":{},"95":{},"96":{},"100":{},"101":{},"106":{},"107":{},"111":{},"112":{},"123":{},"125":{},"127":{},"135":{},"142":{},"143":{},"145":{},"146":{},"152":{},"154":{},"156":{},"164":{}},"component":{}}],["deep",{"_index":31,"title":{},"name":{},"text":{"1":{}},"component":{}}],["default",{"_index":456,"title":{"47":{},"67":{},"114":{},"148":{}},"name":{"47":{},"67":{},"114":{},"148":{}},"text":{"24":{},"30":{},"33":{},"34":{},"35":{},"37":{},"42":{},"44":{},"47":{},"50":{},"55":{},"59":{},"64":{},"67":{},"70":{},"71":{},"75":{},"77":{},"81":{},"87":{},"89":{},"90":{},"94":{},"95":{},"97":{},"103":{},"109":{},"111":{},"114":{},"118":{},"127":{},"131":{},"144":{},"145":{},"148":{},"151":{},"156":{},"160":{}},"component":{}}],["default_valu",{"_index":973,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["defin",{"_index":51,"title":{},"name":{},"text":{"4":{},"16":{},"17":{},"20":{},"21":{},"41":{},"44":{},"49":{},"52":{},"53":{},"64":{},"69":{},"72":{},"73":{},"86":{},"92":{},"99":{},"102":{},"105":{},"108":{},"111":{},"117":{},"120":{},"121":{},"124":{},"125":{},"136":{},"138":{},"139":{},"145":{},"150":{},"153":{},"154":{}},"component":{}}],["definit",{"_index":357,"title":{},"name":{},"text":{"17":{},"18":{},"21":{},"22":{},"27":{},"31":{},"115":{},"121":{},"122":{},"139":{},"140":{},"141":{}},"component":{}}],["delet",{"_index":131,"title":{},"name":{"62":{},"84":{},"134":{},"163":{}},"text":{"6":{},"55":{},"62":{},"77":{},"84":{},"96":{},"101":{},"107":{},"127":{},"134":{},"152":{},"156":{},"163":{}},"component":{}}],["delimit",{"_index":370,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["deliveri",{"_index":889,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["demo",{"_index":1319,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["demonstr",{"_index":286,"title":{},"name":{},"text":{"16":{},"17":{},"18":{},"20":{},"21":{},"22":{},"24":{},"33":{},"37":{},"52":{},"53":{},"61":{},"72":{},"73":{},"75":{},"83":{},"90":{},"94":{},"97":{},"120":{},"121":{},"122":{},"124":{},"125":{},"133":{},"138":{},"139":{},"140":{},"153":{},"154":{},"162":{}},"component":{}}],["demot",{"_index":1460,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["deno",{"_index":321,"title":{},"name":{},"text":{"17":{},"18":{},"21":{},"22":{},"121":{},"122":{},"139":{},"140":{}},"component":{}}],["depart",{"_index":789,"title":{},"name":{},"text":{"41":{},"44":{},"55":{},"62":{},"64":{},"77":{},"84":{},"86":{},"102":{},"108":{},"111":{},"127":{},"134":{},"145":{},"156":{},"163":{}},"component":{}}],["department_id",{"_index":785,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["dept_w",{"_index":790,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["desc",{"_index":721,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["design",{"_index":652,"title":{},"name":{},"text":{"35":{},"52":{},"53":{},"70":{},"72":{},"73":{},"89":{},"95":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["detail",{"_index":342,"title":{},"name":{},"text":{"17":{},"21":{},"52":{},"53":{},"63":{},"72":{},"73":{},"85":{},"121":{},"124":{},"125":{},"135":{},"139":{},"153":{},"154":{},"164":{}},"component":{}}],["determin",{"_index":1405,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["develop",{"_index":60,"title":{},"name":{},"text":{"4":{},"10":{},"14":{},"17":{},"18":{},"21":{},"22":{},"28":{},"35":{},"44":{},"51":{},"52":{},"53":{},"55":{},"58":{},"60":{},"64":{},"70":{},"72":{},"73":{},"77":{},"80":{},"82":{},"89":{},"92":{},"95":{},"99":{},"105":{},"111":{},"121":{},"122":{},"124":{},"125":{},"127":{},"130":{},"132":{},"136":{},"139":{},"140":{},"145":{},"153":{},"154":{},"156":{},"159":{},"161":{}},"component":{}}],["diana",{"_index":1429,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["dictat",{"_index":685,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["dictionari",{"_index":876,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["differ",{"_index":866,"title":{},"name":{},"text":{"43":{},"48":{},"49":{},"68":{},"69":{},"88":{},"104":{},"110":{},"116":{},"117":{},"149":{},"150":{}},"component":{}}],["direct",{"_index":1149,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["directli",{"_index":205,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["disabl",{"_index":619,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["disappear",{"_index":1366,"title":{},"name":{},"text":{"58":{},"80":{},"130":{},"159":{}},"component":{}}],["discuss",{"_index":1477,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["display",{"_index":713,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["display_a",{"_index":895,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["distanc",{"_index":1003,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["dml",{"_index":1286,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["document",{"_index":265,"title":{},"name":{},"text":{"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"29":{},"32":{},"33":{},"35":{},"37":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"56":{},"57":{},"58":{},"60":{},"61":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"78":{},"79":{},"80":{},"82":{},"83":{},"86":{},"87":{},"88":{},"89":{},"90":{},"94":{},"95":{},"97":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"128":{},"129":{},"130":{},"132":{},"133":{},"137":{},"138":{},"139":{},"140":{},"143":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"153":{},"154":{},"155":{},"157":{},"158":{},"159":{},"161":{},"162":{}},"component":{}}],["domain",{"_index":197,"title":{},"name":{},"text":{"10":{},"14":{},"24":{},"28":{},"33":{},"37":{},"51":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["domain_nam",{"_index":467,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["doubl",{"_index":1260,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["double_metaphon",{"_index":1262,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["double_metaphone_alt",{"_index":1264,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["down",{"_index":952,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["draft",{"_index":1179,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["drive",{"_index":500,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["driver",{"_index":306,"title":{},"name":{},"text":{"16":{},"20":{},"35":{},"70":{},"89":{},"95":{},"120":{},"138":{}},"component":{}}],["drop",{"_index":128,"title":{},"name":{},"text":{"6":{},"50":{},"55":{},"71":{},"77":{},"96":{},"101":{},"107":{},"118":{},"127":{},"151":{},"152":{},"156":{}},"component":{}}],["dsi",{"_index":943,"title":{},"name":{},"text":{"46":{},"60":{},"66":{},"82":{},"113":{},"132":{},"147":{},"161":{}},"component":{}}],["dsi_hour_floor",{"_index":956,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["dsi_minute_round",{"_index":960,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["dt",{"_index":615,"title":{},"name":{},"text":{"30":{},"34":{},"46":{},"59":{},"66":{},"81":{},"113":{},"131":{},"144":{},"147":{},"160":{}},"component":{}}],["dt_day_ceil",{"_index":950,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["dt_hour_floor",{"_index":957,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["dual",{"_index":1365,"title":{},"name":{},"text":{"58":{},"80":{},"130":{},"159":{}},"component":{}}],["dualiti",{"_index":192,"title":{},"name":{},"text":{"10":{},"14":{},"28":{},"51":{}},"component":{}}],["due",{"_index":1162,"title":{},"name":{},"text":{"50":{},"71":{},"118":{},"151":{}},"component":{}}],["duplic",{"_index":537,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["dure",{"_index":351,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["dynam",{"_index":1452,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["e",{"_index":530,"title":{},"name":{},"text":{"27":{},"31":{},"55":{},"62":{},"77":{},"84":{},"115":{},"127":{},"134":{},"141":{},"156":{},"163":{}},"component":{}}],["e.department_id",{"_index":1306,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["e.department_id=d.department_id",{"_index":1409,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["e.first_nam",{"_index":1406,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["e.g",{"_index":1167,"title":{},"name":{},"text":{"50":{},"58":{},"61":{},"71":{},"80":{},"83":{},"118":{},"130":{},"133":{},"151":{},"159":{},"162":{}},"component":{}}],["e.hire_d",{"_index":1414,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["e.job_id=j.job_id",{"_index":1417,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["e.last_nam",{"_index":1407,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["e.salari",{"_index":1408,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["e.salary=e.salary*1.5",{"_index":1410,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["each",{"_index":655,"title":{},"name":{},"text":{"35":{},"38":{},"52":{},"55":{},"70":{},"72":{},"76":{},"77":{},"89":{},"91":{},"95":{},"98":{},"124":{},"127":{},"153":{},"156":{}},"component":{}}],["eas",{"_index":1371,"title":{},"name":{},"text":{"58":{},"80":{},"130":{},"159":{}},"component":{}}],["easi",{"_index":70,"title":{},"name":{},"text":{"5":{},"46":{},"66":{},"93":{},"100":{},"106":{},"113":{},"142":{},"147":{}},"component":{}}],["easier",{"_index":364,"title":{},"name":{},"text":{"18":{},"22":{},"41":{},"48":{},"60":{},"62":{},"68":{},"82":{},"84":{},"86":{},"102":{},"108":{},"116":{},"122":{},"132":{},"134":{},"140":{},"149":{},"161":{},"163":{}},"component":{}}],["ecmascript",{"_index":359,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["ecuador",{"_index":1114,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["element",{"_index":96,"title":{},"name":{},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["email",{"_index":920,"title":{},"name":{},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["email_address",{"_index":884,"title":{},"name":{},"text":{"44":{},"45":{},"64":{},"65":{},"111":{},"112":{},"145":{},"146":{}},"component":{}}],["emb",{"_index":204,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["emili",{"_index":1223,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["emp_info",{"_index":897,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["employe",{"_index":581,"title":{},"name":{},"text":{"30":{},"34":{},"35":{},"44":{},"55":{},"59":{},"61":{},"62":{},"64":{},"70":{},"77":{},"81":{},"83":{},"84":{},"89":{},"95":{},"111":{},"127":{},"131":{},"133":{},"134":{},"144":{},"145":{},"156":{},"160":{},"162":{},"163":{}},"component":{}}],["employee_id",{"_index":582,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"55":{},"59":{},"61":{},"77":{},"81":{},"83":{},"86":{},"102":{},"108":{},"127":{},"131":{},"133":{},"144":{},"156":{},"160":{},"162":{}},"component":{}}],["employee_id,first_name,last_name,hire_d",{"_index":589,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["employees_histori",{"_index":1293,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["employees_history.employee_id%typ",{"_index":1302,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["employees_history.new_salary%typ",{"_index":1301,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["employees_history.old_salary%typ",{"_index":1300,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["emps_per_dept",{"_index":791,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["enabl",{"_index":434,"title":{},"name":{},"text":{"24":{},"29":{},"30":{},"32":{},"33":{},"34":{},"37":{},"41":{},"43":{},"45":{},"48":{},"49":{},"54":{},"56":{},"59":{},"61":{},"65":{},"68":{},"69":{},"74":{},"75":{},"78":{},"81":{},"83":{},"86":{},"88":{},"90":{},"94":{},"97":{},"102":{},"104":{},"108":{},"110":{},"112":{},"116":{},"117":{},"123":{},"126":{},"128":{},"131":{},"133":{},"143":{},"144":{},"146":{},"149":{},"150":{},"155":{},"157":{},"160":{},"162":{}},"component":{}}],["encod",{"_index":1254,"title":{},"name":{"54":{},"74":{},"126":{},"155":{}},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["end",{"_index":453,"title":{},"name":{},"text":{"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"53":{},"55":{},"59":{},"63":{},"73":{},"75":{},"76":{},"77":{},"81":{},"85":{},"90":{},"91":{},"94":{},"97":{},"98":{},"115":{},"123":{},"125":{},"127":{},"131":{},"135":{},"141":{},"143":{},"144":{},"154":{},"156":{},"160":{},"164":{}},"component":{}}],["engin",{"_index":13,"title":{},"name":{},"text":{"1":{},"4":{},"92":{},"99":{},"105":{},"136":{}},"component":{}}],["english",{"_index":1257,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["enhanc",{"_index":186,"title":{"55":{},"77":{},"127":{},"156":{}},"name":{},"text":{"9":{},"13":{},"26":{},"40":{},"55":{},"60":{},"77":{},"82":{},"127":{},"132":{},"156":{},"161":{}},"component":{}}],["ensur",{"_index":699,"title":{},"name":{},"text":{"35":{},"50":{},"52":{},"53":{},"63":{},"70":{},"71":{},"72":{},"73":{},"85":{},"89":{},"95":{},"118":{},"124":{},"125":{},"135":{},"151":{},"153":{},"154":{},"164":{}},"component":{}}],["entiti",{"_index":356,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["env",{"_index":336,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["environ",{"_index":261,"title":{"17":{},"21":{},"121":{},"139":{}},"name":{"17":{},"21":{},"121":{},"139":{}},"text":{"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"119":{},"120":{},"121":{},"137":{},"138":{},"139":{}},"component":{}}],["epoch",{"_index":219,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["epoch_to_d",{"_index":221,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["epoch_to_date(1684758614",{"_index":231,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["equal",{"_index":535,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["equival",{"_index":358,"title":{},"name":{},"text":{"18":{},"22":{},"27":{},"31":{},"47":{},"67":{},"114":{},"115":{},"122":{},"140":{},"141":{},"148":{}},"component":{}}],["error",{"_index":393,"title":{},"name":{},"text":{"18":{},"22":{},"47":{},"50":{},"52":{},"53":{},"63":{},"67":{},"71":{},"72":{},"73":{},"85":{},"114":{},"118":{},"122":{},"124":{},"125":{},"135":{},"140":{},"148":{},"151":{},"153":{},"154":{},"164":{}},"component":{}}],["especi",{"_index":425,"title":{},"name":{},"text":{"18":{},"22":{},"50":{},"71":{},"118":{},"122":{},"140":{},"151":{}},"component":{}}],["essenti",{"_index":355,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["eur",{"_index":560,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["evalu",{"_index":683,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["evangelist",{"_index":675,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["even",{"_index":283,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["event",{"_index":33,"title":{},"name":{},"text":{"1":{}},"component":{}}],["exactli",{"_index":394,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["exampl",{"_index":216,"title":{},"name":{},"text":{"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"27":{},"31":{},"33":{},"35":{},"37":{},"38":{},"44":{},"45":{},"52":{},"53":{},"55":{},"56":{},"61":{},"63":{},"64":{},"65":{},"70":{},"72":{},"73":{},"75":{},"76":{},"77":{},"78":{},"83":{},"85":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"111":{},"112":{},"115":{},"119":{},"120":{},"121":{},"122":{},"124":{},"125":{},"127":{},"128":{},"133":{},"135":{},"137":{},"138":{},"139":{},"140":{},"141":{},"145":{},"146":{},"153":{},"154":{},"156":{},"157":{},"162":{},"164":{}},"component":{}}],["example_env",{"_index":337,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["example_modul",{"_index":367,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["except",{"_index":101,"title":{},"name":{},"text":{"5":{},"63":{},"85":{},"93":{},"100":{},"106":{},"135":{},"142":{},"164":{}},"component":{}}],["exchang",{"_index":1209,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["exclud",{"_index":851,"title":{},"name":{},"text":{"42":{},"87":{},"103":{},"109":{}},"component":{}}],["exclus",{"_index":849,"title":{"42":{},"87":{},"103":{},"109":{}},"name":{"42":{},"87":{},"103":{},"109":{}},"text":{"42":{},"87":{},"103":{},"109":{}},"component":{}}],["execut",{"_index":404,"title":{},"name":{},"text":{"18":{},"22":{},"50":{},"55":{},"61":{},"62":{},"63":{},"71":{},"77":{},"83":{},"84":{},"85":{},"118":{},"122":{},"127":{},"133":{},"134":{},"135":{},"140":{},"151":{},"156":{},"162":{},"163":{},"164":{}},"component":{}}],["exist",{"_index":688,"title":{"50":{},"71":{},"118":{},"151":{}},"name":{"50":{},"71":{},"118":{},"151":{}},"text":{"35":{},"43":{},"50":{},"53":{},"55":{},"63":{},"70":{},"71":{},"73":{},"77":{},"85":{},"88":{},"89":{},"95":{},"104":{},"110":{},"118":{},"125":{},"127":{},"135":{},"151":{},"154":{},"156":{},"164":{}},"component":{}}],["expect",{"_index":1249,"title":{},"name":{},"text":{"53":{},"58":{},"73":{},"80":{},"125":{},"130":{},"154":{},"159":{}},"component":{}}],["explain",{"_index":634,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["explor",{"_index":30,"title":{},"name":{},"text":{"1":{}},"component":{}}],["export",{"_index":300,"title":{},"name":{},"text":{"16":{},"17":{},"18":{},"20":{},"21":{},"22":{},"120":{},"121":{},"122":{},"138":{},"139":{},"140":{}},"component":{}}],["expos",{"_index":252,"title":{},"name":{},"text":{"15":{},"16":{},"19":{},"20":{},"119":{},"120":{},"137":{},"138":{}},"component":{}}],["express",{"_index":439,"title":{},"name":{},"text":{"24":{},"27":{},"30":{},"31":{},"33":{},"34":{},"37":{},"45":{},"49":{},"58":{},"59":{},"65":{},"69":{},"75":{},"80":{},"81":{},"90":{},"94":{},"97":{},"112":{},"115":{},"117":{},"130":{},"131":{},"141":{},"144":{},"146":{},"150":{},"159":{},"160":{}},"component":{}}],["extend",{"_index":506,"title":{"27":{},"31":{},"115":{},"141":{}},"name":{"27":{},"31":{},"115":{},"141":{}},"text":{"27":{},"31":{},"63":{},"85":{},"115":{},"135":{},"141":{},"164":{}},"component":{}}],["extens",{"_index":150,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["extra",{"_index":1148,"title":{},"name":{},"text":{"49":{},"63":{},"69":{},"85":{},"117":{},"135":{},"150":{},"164":{}},"component":{}}],["extract",{"_index":616,"title":{},"name":{},"text":{"30":{},"34":{},"47":{},"53":{},"59":{},"67":{},"73":{},"81":{},"114":{},"125":{},"131":{},"144":{},"148":{},"154":{},"160":{}},"component":{}}],["extract(year",{"_index":627,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["f_greet",{"_index":343,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["f_hello",{"_index":292,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["f_hello('javascript",{"_index":304,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["facil",{"_index":872,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["fail",{"_index":531,"title":{},"name":{},"text":{"27":{},"31":{},"53":{},"73":{},"115":{},"125":{},"141":{},"154":{}},"component":{}}],["fals",{"_index":392,"title":{},"name":{},"text":{"18":{},"22":{},"45":{},"50":{},"53":{},"65":{},"71":{},"73":{},"112":{},"118":{},"122":{},"125":{},"140":{},"146":{},"151":{},"154":{}},"component":{}}],["famili",{"_index":1384,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["far",{"_index":165,"title":{},"name":{},"text":{"7":{},"11":{},"23":{},"36":{}},"component":{}}],["fc",{"_index":1012,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["featur",{"_index":2,"title":{"1":{},"7-1":{},"8-1":{},"9-1":{},"10-1":{},"11-1":{},"12-1":{},"13-1":{},"14-1":{},"23-1":{},"25-1":{},"26-1":{},"28-1":{},"36-1":{},"39-1":{},"40-1":{},"51-1":{}},"name":{},"text":{"1":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"22":{},"23":{},"24":{},"25":{},"26":{},"28":{},"33":{},"35":{},"36":{},"37":{},"39":{},"40":{},"45":{},"49":{},"51":{},"61":{},"63":{},"65":{},"69":{},"70":{},"75":{},"83":{},"85":{},"89":{},"90":{},"94":{},"95":{},"97":{},"112":{},"117":{},"119":{},"120":{},"122":{},"133":{},"135":{},"137":{},"138":{},"140":{},"146":{},"150":{},"162":{},"164":{}},"component":{}}],["feb",{"_index":607,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"59":{},"81":{},"86":{},"102":{},"108":{},"131":{},"144":{},"160":{}},"component":{}}],["fetch",{"_index":723,"title":{},"name":{},"text":{"38":{},"42":{},"43":{},"52":{},"72":{},"76":{},"87":{},"88":{},"91":{},"98":{},"103":{},"104":{},"109":{},"110":{},"124":{},"153":{}},"component":{}}],["few",{"_index":1219,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["field",{"_index":1186,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["fiji",{"_index":1079,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["file",{"_index":323,"title":{},"name":{},"text":{"17":{},"18":{},"21":{},"22":{},"121":{},"122":{},"139":{},"140":{}},"component":{}}],["fill",{"_index":678,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["filter(\"get_year\"(\"hire_date\")=2015",{"_index":642,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["filter(extract(year",{"_index":643,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["find",{"_index":728,"title":{},"name":{},"text":{"38":{},"46":{},"48":{},"66":{},"68":{},"76":{},"91":{},"98":{},"113":{},"116":{},"147":{},"149":{}},"component":{}}],["fine",{"_index":1205,"title":{},"name":{},"text":{"52":{},"63":{},"72":{},"85":{},"124":{},"135":{},"153":{},"164":{}},"component":{}}],["first",{"_index":157,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"19":{},"20":{},"23":{},"24":{},"25":{},"26":{},"28":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"42":{},"43":{},"49":{},"51":{},"69":{},"70":{},"75":{},"76":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"103":{},"104":{},"109":{},"110":{},"117":{},"119":{},"120":{},"137":{},"138":{},"150":{}},"component":{}}],["first_nam",{"_index":585,"title":{},"name":{},"text":{"30":{},"34":{},"35":{},"59":{},"61":{},"62":{},"70":{},"81":{},"83":{},"84":{},"89":{},"95":{},"131":{},"133":{},"134":{},"144":{},"160":{},"162":{},"163":{}},"component":{}}],["firstnam",{"_index":1184,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["firstname\":\"steven\",\"lastname\":\"k",{"_index":1207,"title":{},"name":{},"text":{"52":{},"72":{},"124":{},"153":{}},"component":{}}],["flash",{"_index":499,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["flexibl",{"_index":1170,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["floor",{"_index":930,"title":{"46":{},"66":{},"113":{},"147":{}},"name":{"46":{},"66":{},"113":{},"147":{}},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["follow",{"_index":83,"title":{},"name":{},"text":{"5":{},"6":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"38":{},"52":{},"53":{},"55":{},"63":{},"72":{},"73":{},"76":{},"77":{},"85":{},"91":{},"93":{},"96":{},"98":{},"100":{},"101":{},"106":{},"107":{},"119":{},"120":{},"121":{},"122":{},"124":{},"125":{},"127":{},"135":{},"137":{},"138":{},"139":{},"140":{},"142":{},"152":{},"153":{},"154":{},"156":{},"164":{}},"component":{}}],["foral",{"_index":1309,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["forget",{"_index":1139,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["form",{"_index":380,"title":{},"name":{},"text":{"18":{},"22":{},"35":{},"70":{},"89":{},"95":{},"122":{},"140":{}},"component":{}}],["format",{"_index":624,"title":{},"name":{},"text":{"30":{},"34":{},"52":{},"53":{},"59":{},"72":{},"73":{},"81":{},"124":{},"125":{},"131":{},"144":{},"153":{},"154":{},"160":{}},"component":{}}],["found",{"_index":360,"title":{},"name":{},"text":{"18":{},"22":{},"53":{},"73":{},"122":{},"125":{},"140":{},"154":{}},"component":{}}],["four",{"_index":801,"title":{},"name":{},"text":{"41":{},"42":{},"86":{},"87":{},"102":{},"103":{},"108":{},"109":{}},"component":{}}],["frame",{"_index":783,"title":{"42":{},"43":{},"87":{},"88":{},"103":{},"104":{},"109":{},"110":{}},"name":{"42":{},"43":{},"87":{},"88":{},"103":{},"104":{},"109":{},"110":{}},"text":{"41":{},"42":{},"43":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{}},"component":{}}],["francisco",{"_index":1387,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["free",{"_index":190,"title":{},"name":{},"text":{"10":{},"14":{},"15":{},"19":{},"28":{},"51":{},"119":{},"137":{}},"component":{}}],["friendli",{"_index":296,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["frontoffic",{"_index":890,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["full",{"_index":640,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["full_nam",{"_index":887,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["function",{"_index":52,"title":{"24":{},"33":{},"37":{},"42":{},"43":{},"75":{},"87":{},"88":{},"90":{},"94":{},"97":{},"103":{},"104":{},"109":{},"110":{}},"name":{"24":{},"33":{},"37":{},"42":{},"43":{},"75":{},"87":{},"88":{},"90":{},"94":{},"97":{},"103":{},"104":{},"109":{},"110":{}},"text":{"4":{},"5":{},"9":{},"13":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"26":{},"29":{},"30":{},"32":{},"33":{},"34":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"46":{},"49":{},"53":{},"57":{},"59":{},"60":{},"66":{},"69":{},"73":{},"75":{},"76":{},"79":{},"81":{},"82":{},"86":{},"87":{},"88":{},"90":{},"91":{},"92":{},"93":{},"94":{},"97":{},"98":{},"99":{},"100":{},"102":{},"103":{},"104":{},"105":{},"106":{},"108":{},"109":{},"110":{},"113":{},"117":{},"119":{},"120":{},"121":{},"122":{},"123":{},"125":{},"129":{},"131":{},"132":{},"136":{},"137":{},"138":{},"139":{},"140":{},"142":{},"143":{},"144":{},"147":{},"150":{},"154":{},"158":{},"160":{},"161":{}},"component":{}}],["function’",{"_index":274,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["further",{"_index":202,"title":{"15-2":{},"16-2":{},"17-2":{},"18-2":{},"19-2":{},"20-2":{},"21-2":{},"22-2":{},"24-2":{},"27-2":{},"29-2":{},"30-2":{},"31-2":{},"32-2":{},"33-2":{},"34-2":{},"35-2":{},"37-2":{},"38-2":{},"41-2":{},"42-2":{},"43-2":{},"44-2":{},"45-2":{},"46-2":{},"47-2":{},"48-2":{},"49-5":{},"50-2":{},"52-2":{},"53-2":{},"54-2":{},"55-2":{},"56-2":{},"57-2":{},"58-2":{},"59-2":{},"60-2":{},"61-2":{},"62-2":{},"63-2":{},"64-2":{},"65-2":{},"66-2":{},"67-2":{},"68-2":{},"69-5":{},"70-2":{},"71-2":{},"72-2":{},"73-2":{},"74-2":{},"75-2":{},"76-2":{},"77-2":{},"78-2":{},"79-2":{},"80-2":{},"81-2":{},"82-2":{},"83-2":{},"84-2":{},"85-2":{},"86-2":{},"87-2":{},"88-2":{},"89-2":{},"90-2":{},"91-2":{},"94-2":{},"95-2":{},"97-2":{},"98-2":{},"102-2":{},"103-2":{},"104-2":{},"108-2":{},"109-2":{},"110-2":{},"111-2":{},"112-2":{},"113-2":{},"114-2":{},"115-2":{},"116-2":{},"117-5":{},"118-2":{},"119-2":{},"120-2":{},"121-2":{},"122-2":{},"123-2":{},"124-2":{},"125-2":{},"126-2":{},"127-2":{},"128-2":{},"129-2":{},"130-2":{},"131-2":{},"132-2":{},"133-2":{},"134-2":{},"135-2":{},"137-2":{},"138-2":{},"139-2":{},"140-2":{},"141-2":{},"143-2":{},"144-2":{},"145-2":{},"146-2":{},"147-2":{},"148-2":{},"149-2":{},"150-5":{},"151-2":{},"153-2":{},"154-2":{},"155-2":{},"156-2":{},"157-2":{},"158-2":{},"159-2":{},"160-2":{},"161-2":{},"162-2":{},"163-2":{},"164-2":{}},"name":{},"text":{},"component":{}}],["furthermor",{"_index":354,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["futur",{"_index":1341,"title":{},"name":{},"text":{"56":{},"78":{},"128":{},"157":{}},"component":{}}],["fuzzi",{"_index":996,"title":{},"name":{"48":{},"68":{},"116":{},"149":{}},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["fuzzy_match",{"_index":995,"title":{"48":{},"68":{},"116":{},"149":{}},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["gb",{"_index":556,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["gbp",{"_index":557,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["gen",{"_index":489,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["gener",{"_index":81,"title":{},"name":{},"text":{"5":{},"35":{},"44":{},"52":{},"53":{},"55":{},"61":{},"64":{},"70":{},"72":{},"73":{},"77":{},"83":{},"89":{},"93":{},"95":{},"100":{},"106":{},"111":{},"124":{},"125":{},"127":{},"133":{},"142":{},"145":{},"153":{},"154":{},"156":{},"162":{}},"component":{}}],["gerald",{"_index":669,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["get",{"_index":794,"title":{},"name":{},"text":{"41":{},"56":{},"78":{},"86":{},"102":{},"108":{},"128":{},"157":{}},"component":{}}],["get_domain_nam",{"_index":447,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["get_year",{"_index":614,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["give",{"_index":1340,"title":{},"name":{},"text":{"56":{},"78":{},"128":{},"157":{}},"component":{}}],["given",{"_index":689,"title":{},"name":{},"text":{"35":{},"49":{},"52":{},"53":{},"69":{},"70":{},"72":{},"73":{},"89":{},"95":{},"117":{},"124":{},"125":{},"150":{},"153":{},"154":{}},"component":{}}],["good",{"_index":214,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["grade",{"_index":514,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["grant",{"_index":1335,"title":{},"name":{},"text":{"56":{},"78":{},"128":{},"157":{}},"component":{}}],["graph",{"_index":195,"title":{},"name":{},"text":{"10":{},"14":{},"28":{},"51":{}},"component":{}}],["great",{"_index":1047,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["greater",{"_index":1190,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["greet",{"_index":297,"title":{},"name":{},"text":{"16":{},"17":{},"20":{},"21":{},"120":{},"121":{},"138":{},"139":{}},"component":{}}],["group",{"_index":720,"title":{"43":{},"49":{},"69":{},"88":{},"104":{},"110":{},"117":{},"150":{},"49-1":{},"49-2":{},"69-1":{},"69-2":{},"117-1":{},"117-2":{},"150-1":{},"150-2":{}},"name":{"43":{},"49":{},"69":{},"88":{},"104":{},"110":{},"117":{},"150":{}},"text":{"38":{},"42":{},"43":{},"49":{},"69":{},"76":{},"87":{},"88":{},"91":{},"98":{},"103":{},"104":{},"109":{},"110":{},"117":{},"150":{}},"component":{}}],["group_by_posit",{"_index":1128,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["group_by_position_en",{"_index":1062,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["group_by_position_enabled=tru",{"_index":1129,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["group_nam",{"_index":896,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["guarante",{"_index":137,"title":{},"name":{},"text":{"6":{},"44":{},"64":{},"96":{},"101":{},"107":{},"111":{},"145":{},"152":{}},"component":{}}],["guard",{"_index":164,"title":{},"name":{},"text":{"7":{},"11":{},"23":{},"36":{},"49":{},"69":{},"117":{},"150":{}},"component":{}}],["guid",{"_index":37,"title":{},"name":{},"text":{"30":{},"34":{},"44":{},"59":{},"63":{},"64":{},"81":{},"85":{},"111":{},"131":{},"135":{},"144":{},"145":{},"160":{},"164":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"51":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"92":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{}}}],["guinea",{"_index":1094,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["guyana",{"_index":1116,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["handl",{"_index":100,"title":{},"name":{},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["happen",{"_index":1145,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["hash",{"_index":636,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["have",{"_index":1043,"title":{},"name":{},"text":{"49":{},"57":{},"69":{},"79":{},"117":{},"129":{},"150":{},"158":{}},"component":{}}],["hello",{"_index":291,"title":{},"name":{},"text":{"16":{},"17":{},"20":{},"21":{},"57":{},"79":{},"120":{},"121":{},"129":{},"138":{},"139":{},"158":{}},"component":{}}],["hello('javascript",{"_index":305,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["hello(who",{"_index":301,"title":{},"name":{},"text":{"16":{},"17":{},"20":{},"21":{},"120":{},"121":{},"138":{},"139":{}},"component":{}}],["hello_modul",{"_index":287,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["help",{"_index":429,"title":{},"name":{},"text":{"18":{},"22":{},"35":{},"70":{},"89":{},"95":{},"122":{},"140":{}},"component":{}}],["henc",{"_index":1059,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["here",{"_index":6,"title":{},"name":{},"text":{"1":{},"16":{},"20":{},"57":{},"79":{},"120":{},"129":{},"138":{},"158":{}},"component":{}}],["hh24",{"_index":955,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["hh24:mi",{"_index":594,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["hh24:mi:ss",{"_index":235,"title":{},"name":{},"text":{"15":{},"19":{},"46":{},"57":{},"66":{},"79":{},"113":{},"119":{},"129":{},"137":{},"147":{},"158":{}},"component":{}}],["high",{"_index":116,"title":{},"name":{},"text":{"6":{},"44":{},"64":{},"96":{},"101":{},"107":{},"111":{},"145":{},"152":{}},"component":{}}],["higher",{"_index":1445,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["highest",{"_index":893,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["hire",{"_index":796,"title":{},"name":{},"text":{"41":{},"62":{},"84":{},"86":{},"102":{},"108":{},"134":{},"163":{}},"component":{}}],["hire_d",{"_index":588,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"42":{},"43":{},"59":{},"81":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"131":{},"144":{},"160":{}},"component":{}}],["hire_w",{"_index":856,"title":{},"name":{},"text":{"42":{},"87":{},"103":{},"109":{}},"component":{}}],["hired_w",{"_index":797,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["hires/dept",{"_index":802,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["hoc",{"_index":1048,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["hour",{"_index":1374,"title":{},"name":{},"text":{"60":{},"82":{},"132":{},"161":{}},"component":{}}],["hr.employe",{"_index":807,"title":{},"name":{},"text":{"41":{},"42":{},"43":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{}},"component":{}}],["https://www.apple.com/shop/product/mqd83am/a/airpod",{"_index":491,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["https://www.bestbuy.com/site/sandisk",{"_index":498,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["i.",{"_index":687,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["i.id",{"_index":1231,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["i.jcol",{"_index":1229,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["id",{"_index":638,"title":{},"name":{},"text":{"30":{},"34":{},"35":{},"44":{},"47":{},"50":{},"52":{},"53":{},"55":{},"59":{},"61":{},"64":{},"67":{},"70":{},"71":{},"72":{},"73":{},"77":{},"81":{},"83":{},"89":{},"95":{},"111":{},"114":{},"118":{},"124":{},"125":{},"127":{},"131":{},"133":{},"144":{},"145":{},"148":{},"151":{},"153":{},"154":{},"156":{},"160":{},"162":{}},"component":{}}],["ident",{"_index":651,"title":{"35":{},"70":{},"89":{},"95":{}},"name":{"35":{},"70":{},"89":{},"95":{}},"text":{"35":{},"44":{},"52":{},"53":{},"55":{},"64":{},"70":{},"72":{},"73":{},"77":{},"89":{},"95":{},"111":{},"124":{},"125":{},"127":{},"145":{},"153":{},"154":{},"156":{}},"component":{}}],["identif",{"_index":695,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["identifi",{"_index":641,"title":{},"name":{},"text":{"30":{},"34":{},"35":{},"56":{},"59":{},"70":{},"78":{},"81":{},"89":{},"95":{},"128":{},"131":{},"144":{},"157":{},"160":{}},"component":{}}],["identity_claus",{"_index":703,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["ignor",{"_index":1151,"title":{},"name":{},"text":{"50":{},"71":{},"118":{},"151":{}},"component":{}}],["immedi",{"_index":1465,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["impact",{"_index":979,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["implement",{"_index":210,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["implic",{"_index":1450,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["implicit",{"_index":982,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["import",{"_index":257,"title":{},"name":{},"text":{"15":{},"17":{},"19":{},"21":{},"49":{},"53":{},"69":{},"73":{},"117":{},"119":{},"121":{},"125":{},"137":{},"139":{},"150":{},"154":{}},"component":{}}],["improv",{"_index":646,"title":{},"name":{},"text":{"30":{},"34":{},"38":{},"58":{},"59":{},"76":{},"80":{},"81":{},"91":{},"98":{},"130":{},"131":{},"144":{},"159":{},"160":{}},"component":{}}],["includ",{"_index":55,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"15":{},"19":{},"38":{},"41":{},"42":{},"43":{},"44":{},"46":{},"64":{},"66":{},"76":{},"86":{},"87":{},"88":{},"91":{},"92":{},"93":{},"96":{},"98":{},"99":{},"100":{},"101":{},"102":{},"103":{},"104":{},"105":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"113":{},"119":{},"136":{},"137":{},"142":{},"145":{},"147":{},"152":{}},"component":{}}],["include_al",{"_index":858,"title":{},"name":{},"text":{"42":{},"87":{},"103":{},"109":{}},"component":{}}],["incomplet",{"_index":1154,"title":{},"name":{},"text":{"50":{},"52":{},"53":{},"71":{},"72":{},"73":{},"118":{},"124":{},"125":{},"151":{},"153":{},"154":{}},"component":{}}],["incorrect",{"_index":1251,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["increas",{"_index":653,"title":{},"name":{},"text":{"35":{},"62":{},"63":{},"70":{},"84":{},"85":{},"89":{},"95":{},"134":{},"135":{},"163":{},"164":{}},"component":{}}],["increment",{"_index":700,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["index",{"_index":3,"title":{},"name":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"23":{},"25":{},"26":{},"28":{},"36":{},"39":{},"40":{},"51":{},"92":{},"93":{},"96":{},"99":{},"100":{},"101":{},"105":{},"106":{},"107":{},"136":{},"142":{},"152":{}},"text":{"8":{},"12":{},"25":{},"29":{},"32":{},"39":{},"44":{},"54":{},"64":{},"74":{},"111":{},"123":{},"126":{},"143":{},"145":{},"155":{}},"component":{}}],["influenc",{"_index":1150,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["inform",{"_index":112,"title":{"15-2":{},"16-2":{},"17-2":{},"18-2":{},"19-2":{},"20-2":{},"21-2":{},"22-2":{},"24-2":{},"27-2":{},"29-2":{},"30-2":{},"31-2":{},"32-2":{},"33-2":{},"34-2":{},"35-2":{},"37-2":{},"38-2":{},"41-2":{},"42-2":{},"43-2":{},"44-2":{},"45-2":{},"46-2":{},"47-2":{},"48-2":{},"49-5":{},"50-2":{},"52-2":{},"53-2":{},"54-2":{},"55-2":{},"56-2":{},"57-2":{},"58-2":{},"59-2":{},"60-2":{},"61-2":{},"62-2":{},"63-2":{},"64-2":{},"65-2":{},"66-2":{},"67-2":{},"68-2":{},"69-5":{},"70-2":{},"71-2":{},"72-2":{},"73-2":{},"74-2":{},"75-2":{},"76-2":{},"77-2":{},"78-2":{},"79-2":{},"80-2":{},"81-2":{},"82-2":{},"83-2":{},"84-2":{},"85-2":{},"86-2":{},"87-2":{},"88-2":{},"89-2":{},"90-2":{},"91-2":{},"94-2":{},"95-2":{},"97-2":{},"98-2":{},"102-2":{},"103-2":{},"104-2":{},"108-2":{},"109-2":{},"110-2":{},"111-2":{},"112-2":{},"113-2":{},"114-2":{},"115-2":{},"116-2":{},"117-5":{},"118-2":{},"119-2":{},"120-2":{},"121-2":{},"122-2":{},"123-2":{},"124-2":{},"125-2":{},"126-2":{},"127-2":{},"128-2":{},"129-2":{},"130-2":{},"131-2":{},"132-2":{},"133-2":{},"134-2":{},"135-2":{},"137-2":{},"138-2":{},"139-2":{},"140-2":{},"141-2":{},"143-2":{},"144-2":{},"145-2":{},"146-2":{},"147-2":{},"148-2":{},"149-2":{},"150-5":{},"151-2":{},"153-2":{},"154-2":{},"155-2":{},"156-2":{},"157-2":{},"158-2":{},"159-2":{},"160-2":{},"161-2":{},"162-2":{},"163-2":{},"164-2":{}},"name":{},"text":{"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"23":{},"25":{},"26":{},"28":{},"30":{},"34":{},"36":{},"39":{},"40":{},"51":{},"59":{},"81":{},"93":{},"96":{},"100":{},"101":{},"106":{},"107":{},"131":{},"142":{},"144":{},"152":{},"160":{}},"component":{}}],["initi",{"_index":1442,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["inlin",{"_index":203,"title":{"15":{},"19":{},"119":{},"137":{}},"name":{"15":{},"19":{},"119":{},"137":{}},"text":{"15":{},"18":{},"19":{},"22":{},"38":{},"76":{},"91":{},"98":{},"119":{},"122":{},"137":{},"140":{}},"component":{}}],["input",{"_index":375,"title":{},"name":{},"text":{"18":{},"22":{},"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{},"122":{},"140":{}},"component":{}}],["inputobject",{"_index":396,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["inputstr",{"_index":374,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["inputstring.length",{"_index":383,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["inputstring.split",{"_index":386,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["inr",{"_index":561,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["insert",{"_index":129,"title":{},"name":{},"text":{"6":{},"30":{},"34":{},"35":{},"45":{},"47":{},"50":{},"52":{},"53":{},"55":{},"59":{},"61":{},"65":{},"67":{},"70":{},"71":{},"72":{},"73":{},"77":{},"81":{},"83":{},"89":{},"95":{},"96":{},"101":{},"107":{},"112":{},"114":{},"118":{},"124":{},"125":{},"127":{},"131":{},"133":{},"144":{},"146":{},"148":{},"151":{},"152":{},"153":{},"154":{},"156":{},"160":{},"162":{}},"component":{}}],["insert_demo",{"_index":1314,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["insid",{"_index":77,"title":{},"name":{},"text":{"5":{},"18":{},"22":{},"45":{},"65":{},"93":{},"100":{},"106":{},"112":{},"122":{},"140":{},"142":{},"146":{}},"component":{}}],["instancepath",{"_index":1242,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["instead",{"_index":262,"title":{},"name":{},"text":{"15":{},"17":{},"18":{},"19":{},"21":{},"22":{},"35":{},"47":{},"49":{},"67":{},"69":{},"70":{},"89":{},"95":{},"114":{},"117":{},"119":{},"121":{},"122":{},"137":{},"139":{},"140":{},"148":{},"150":{}},"component":{}}],["institut",{"_index":143,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["instr(p_url",{"_index":461,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["instr(substr(p_url",{"_index":463,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["int",{"_index":1344,"title":{},"name":{},"text":{"56":{},"78":{},"128":{},"157":{}},"component":{}}],["integ",{"_index":583,"title":{},"name":{},"text":{"30":{},"34":{},"35":{},"44":{},"47":{},"59":{},"64":{},"67":{},"70":{},"81":{},"89":{},"95":{},"111":{},"114":{},"131":{},"144":{},"145":{},"148":{},"160":{}},"component":{}}],["integr",{"_index":138,"title":{},"name":{},"text":{"6":{},"18":{},"22":{},"44":{},"64":{},"96":{},"101":{},"107":{},"111":{},"122":{},"140":{},"145":{},"152":{}},"component":{}}],["intellig",{"_index":35,"title":{},"name":{},"text":{"1":{}},"component":{}}],["interfac",{"_index":882,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["intern",{"_index":146,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["internal_function(\"hire_d",{"_index":628,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["internal_function(\"hire_date\"))=2017",{"_index":644,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["internet",{"_index":1474,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["interpret",{"_index":879,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["interv",{"_index":933,"title":{"60":{},"82":{},"132":{},"161":{}},"name":{"60":{},"82":{},"132":{},"161":{}},"text":{"46":{},"60":{},"66":{},"82":{},"113":{},"132":{},"147":{},"161":{}},"component":{}}],["intervent",{"_index":580,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["introduc",{"_index":711,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["introduct",{"_index":432,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["introductori",{"_index":312,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["invalid",{"_index":524,"title":{},"name":{},"text":{"27":{},"31":{},"53":{},"73":{},"115":{},"125":{},"141":{},"154":{}},"component":{}}],["invoc",{"_index":294,"title":{},"name":{},"text":{"16":{},"20":{},"61":{},"83":{},"120":{},"133":{},"138":{},"162":{}},"component":{}}],["invok",{"_index":340,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["involv",{"_index":317,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["inx",{"_index":516,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["iot",{"_index":1439,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["island",{"_index":1084,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["isn't",{"_index":400,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["iso",{"_index":148,"title":{},"name":{},"text":{"6":{},"35":{},"45":{},"61":{},"65":{},"70":{},"83":{},"89":{},"95":{},"96":{},"101":{},"107":{},"112":{},"133":{},"146":{},"152":{},"162":{}},"component":{}}],["iso03a",{"_index":509,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["iso03b",{"_index":510,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["iter",{"_index":725,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["itself",{"_index":353,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["it’",{"_index":280,"title":{},"name":{},"text":{"16":{},"20":{},"54":{},"74":{},"120":{},"126":{},"138":{},"155":{}},"component":{}}],["j",{"_index":1416,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["j.job_titl",{"_index":1418,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["jackson",{"_index":1428,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["jame",{"_index":1397,"title":{},"name":{},"text":{"61":{},"62":{},"83":{},"84":{},"133":{},"134":{},"162":{},"163":{}},"component":{}}],["jan",{"_index":599,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["jane.smith@gmail.com",{"_index":923,"title":{},"name":{},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["januari",{"_index":1413,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["jaro",{"_index":1000,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["jaro_winkl",{"_index":1019,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["java",{"_index":56,"title":{},"name":{},"text":{"4":{},"16":{},"18":{},"20":{},"22":{},"92":{},"99":{},"105":{},"120":{},"122":{},"136":{},"138":{},"140":{}},"component":{}}],["javascript",{"_index":39,"title":{"4":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"92":{},"99":{},"105":{},"119":{},"120":{},"121":{},"122":{},"136":{},"137":{},"138":{},"139":{},"140":{}},"name":{"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"119":{},"120":{},"121":{},"122":{},"137":{},"138":{},"139":{},"140":{}},"text":{"2":{},"4":{},"10":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"28":{},"51":{},"92":{},"99":{},"105":{},"119":{},"120":{},"121":{},"122":{},"136":{},"137":{},"138":{},"139":{},"140":{}},"component":{}}],["jcol",{"_index":1196,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["job",{"_index":1415,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["job_titl",{"_index":663,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["john",{"_index":1398,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["join",{"_index":1027,"title":{"62":{},"84":{},"134":{},"163":{}},"name":{"62":{},"84":{},"134":{},"163":{}},"text":{"48":{},"62":{},"68":{},"84":{},"116":{},"134":{},"149":{},"163":{}},"component":{}}],["jon.doe@example.com",{"_index":922,"title":{},"name":{},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["jsmith@gmail.com",{"_index":924,"title":{},"name":{},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["json",{"_index":176,"title":{"29":{},"32":{},"52":{},"53":{},"72":{},"73":{},"123":{},"124":{},"125":{},"143":{},"153":{},"154":{}},"name":{"29":{},"32":{},"52":{},"53":{},"72":{},"73":{},"123":{},"124":{},"125":{},"143":{},"153":{},"154":{}},"text":{"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"18":{},"22":{},"25":{},"26":{},"28":{},"29":{},"32":{},"39":{},"40":{},"51":{},"52":{},"53":{},"72":{},"73":{},"122":{},"123":{},"124":{},"125":{},"140":{},"143":{},"153":{},"154":{}},"component":{}}],["json.stringify(inputobject",{"_index":401,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["json_data",{"_index":1228,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["json_demo",{"_index":1193,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["json_schema",{"_index":1230,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["json_seri",{"_index":564,"title":{},"name":{},"text":{"29":{},"32":{},"53":{},"73":{},"123":{},"125":{},"143":{},"154":{}},"component":{}}],["json_serialize(l_validation_report",{"_index":1233,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["json_valu",{"_index":545,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["jul",{"_index":831,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["juli",{"_index":158,"title":{},"name":{},"text":{"7":{},"8":{},"11":{},"12":{},"23":{},"25":{},"36":{},"39":{}},"component":{}}],["jun",{"_index":591,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"55":{},"58":{},"59":{},"77":{},"80":{},"81":{},"86":{},"102":{},"108":{},"127":{},"130":{},"131":{},"144":{},"156":{},"159":{},"160":{}},"component":{}}],["jzn",{"_index":1243,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["key",{"_index":371,"title":{},"name":{},"text":{"18":{},"22":{},"30":{},"34":{},"35":{},"50":{},"55":{},"59":{},"70":{},"71":{},"77":{},"81":{},"89":{},"95":{},"118":{},"122":{},"127":{},"131":{},"140":{},"144":{},"151":{},"156":{},"160":{}},"component":{}}],["key(id",{"_index":1195,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["key1=value1;...;keyn=valuen",{"_index":381,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["keyword",{"_index":917,"title":{},"name":{},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["king",{"_index":1199,"title":{},"name":{},"text":{"52":{},"72":{},"124":{},"153":{}},"component":{}}],["kiribati",{"_index":1081,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["kvpair",{"_index":385,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["kvpairs.foreach",{"_index":387,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["l_chang",{"_index":1304,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["l_changes(i).employee_id",{"_index":1311,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["l_changes(i).new_salari",{"_index":1313,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["l_changes(i).old_salari",{"_index":1312,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["l_json_schema",{"_index":1225,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["l_new_id",{"_index":1318,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["l_new_salari",{"_index":1289,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["l_old_id",{"_index":1317,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["l_old_salari",{"_index":1288,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["l_sql",{"_index":1456,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["l_validation_report",{"_index":1226,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["languag",{"_index":48,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"27":{},"31":{},"38":{},"55":{},"76":{},"77":{},"91":{},"92":{},"93":{},"96":{},"98":{},"99":{},"100":{},"101":{},"105":{},"106":{},"107":{},"115":{},"119":{},"120":{},"121":{},"122":{},"127":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"152":{},"156":{}},"component":{}}],["language_nam",{"_index":412,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["last",{"_index":626,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"59":{},"81":{},"86":{},"102":{},"108":{},"131":{},"144":{},"160":{}},"component":{}}],["last_four",{"_index":805,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["last_nam",{"_index":587,"title":{},"name":{},"text":{"30":{},"34":{},"35":{},"52":{},"59":{},"62":{},"70":{},"72":{},"81":{},"84":{},"89":{},"95":{},"124":{},"131":{},"134":{},"144":{},"153":{},"160":{},"163":{}},"component":{}}],["lastnam",{"_index":1185,"title":{},"name":{},"text":{"52":{},"72":{},"124":{},"153":{}},"component":{}}],["latenc",{"_index":427,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["lc",{"_index":1025,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["lead",{"_index":1049,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["learn",{"_index":7,"title":{},"name":{},"text":{"1":{},"63":{},"85":{},"135":{},"164":{}},"component":{}}],["left",{"_index":1153,"title":{},"name":{},"text":{"50":{},"71":{},"118":{},"151":{}},"component":{}}],["leisur",{"_index":1391,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["length",{"_index":1188,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["length(p_sub_domain",{"_index":462,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["lengthi",{"_index":1045,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["less",{"_index":211,"title":{},"name":{},"text":{"15":{},"19":{},"27":{},"31":{},"53":{},"73":{},"115":{},"119":{},"125":{},"137":{},"141":{},"154":{}},"component":{}}],["letter",{"_index":446,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["let’",{"_index":1135,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["level",{"_index":117,"title":{"56":{},"78":{},"128":{},"157":{}},"name":{"56":{},"78":{},"128":{},"157":{}},"text":{"6":{},"10":{},"14":{},"28":{},"44":{},"51":{},"60":{},"64":{},"82":{},"96":{},"101":{},"107":{},"111":{},"132":{},"145":{},"152":{},"161":{}},"component":{}}],["levenshtein",{"_index":1002,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["leverag",{"_index":443,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"62":{},"75":{},"84":{},"90":{},"94":{},"97":{},"134":{},"163":{}},"component":{}}],["licens",{"_index":697,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["lifetim",{"_index":435,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["lightweight",{"_index":871,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["limit",{"_index":254,"title":{"38":{},"76":{},"91":{},"98":{}},"name":{"38":{},"76":{},"91":{},"98":{}},"text":{"15":{},"19":{},"38":{},"63":{},"76":{},"85":{},"91":{},"98":{},"119":{},"135":{},"137":{},"164":{}},"component":{}}],["line",{"_index":419,"title":{},"name":{},"text":{"18":{},"22":{},"47":{},"50":{},"67":{},"71":{},"114":{},"118":{},"122":{},"140":{},"148":{},"151":{}},"component":{}}],["list",{"_index":1138,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["locat",{"_index":325,"title":{},"name":{},"text":{"17":{},"21":{},"61":{},"83":{},"121":{},"133":{},"139":{},"162":{}},"component":{}}],["lock",{"_index":199,"title":{},"name":{},"text":{"10":{},"14":{},"28":{},"51":{}},"component":{}}],["logic",{"_index":420,"title":{},"name":{},"text":{"18":{},"22":{},"44":{},"55":{},"64":{},"77":{},"111":{},"122":{},"127":{},"140":{},"145":{},"156":{}},"component":{}}],["long",{"_index":1451,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["longer",{"_index":1142,"title":{},"name":{},"text":{"49":{},"58":{},"69":{},"80":{},"117":{},"130":{},"150":{},"159":{}},"component":{}}],["longest_common_substr",{"_index":1024,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["look",{"_index":877,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["loop",{"_index":99,"title":{},"name":{},"text":{"5":{},"27":{},"29":{},"31":{},"32":{},"53":{},"63":{},"73":{},"85":{},"93":{},"100":{},"106":{},"115":{},"123":{},"125":{},"135":{},"141":{},"142":{},"143":{},"154":{},"164":{}},"component":{}}],["low",{"_index":1197,"title":{},"name":{},"text":{"52":{},"72":{},"124":{},"153":{}},"component":{}}],["lower",{"_index":971,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["lpad(i",{"_index":1464,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["m",{"_index":732,"title":{},"name":{},"text":{"38":{},"54":{},"74":{},"76":{},"91":{},"98":{},"126":{},"155":{}},"component":{}}],["machin",{"_index":1438,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["macro",{"_index":185,"title":{},"name":{},"text":{"9":{},"13":{},"26":{},"40":{}},"component":{}}],["made",{"_index":366,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["maintain",{"_index":365,"title":{},"name":{},"text":{"18":{},"22":{},"41":{},"57":{},"79":{},"86":{},"102":{},"108":{},"122":{},"129":{},"140":{},"158":{}},"component":{}}],["major",{"_index":1441,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["make",{"_index":307,"title":{},"name":{},"text":{"16":{},"20":{},"41":{},"46":{},"48":{},"58":{},"60":{},"61":{},"62":{},"63":{},"66":{},"68":{},"80":{},"82":{},"83":{},"84":{},"85":{},"86":{},"102":{},"108":{},"113":{},"116":{},"120":{},"130":{},"132":{},"133":{},"134":{},"135":{},"138":{},"147":{},"149":{},"159":{},"161":{},"162":{},"163":{},"164":{}},"component":{}}],["manag",{"_index":18,"title":{},"name":{},"text":{"1":{}},"component":{}}],["mani",{"_index":36,"title":{},"name":{},"text":{"1":{},"5":{},"6":{},"18":{},"22":{},"24":{},"33":{},"37":{},"38":{},"75":{},"76":{},"90":{},"91":{},"93":{},"94":{},"96":{},"97":{},"98":{},"100":{},"101":{},"106":{},"107":{},"122":{},"140":{},"142":{},"152":{}},"component":{}}],["manipul",{"_index":76,"title":{},"name":{},"text":{"5":{},"15":{},"19":{},"55":{},"62":{},"77":{},"84":{},"93":{},"100":{},"106":{},"119":{},"127":{},"134":{},"137":{},"142":{},"156":{},"163":{}},"component":{}}],["manual",{"_index":1403,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["map",{"_index":334,"title":{},"name":{},"text":{"17":{},"21":{},"29":{},"32":{},"47":{},"67":{},"114":{},"121":{},"123":{},"139":{},"143":{},"148":{}},"component":{}}],["mar",{"_index":864,"title":{},"name":{},"text":{"42":{},"43":{},"87":{},"88":{},"103":{},"104":{},"109":{},"110":{}},"component":{}}],["market",{"_index":20,"title":{},"name":{},"text":{"1":{}},"component":{}}],["marque",{"_index":154,"title":{"7-1":{},"8-1":{},"9-1":{},"10-1":{},"11-1":{},"12-1":{},"13-1":{},"14-1":{},"23-1":{},"25-1":{},"26-1":{},"28-1":{},"36-1":{},"39-1":{},"40-1":{},"51-1":{}},"name":{},"text":{},"component":{}}],["marshal",{"_index":1083,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["martin",{"_index":1221,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["match",{"_index":171,"title":{},"name":{"48":{},"68":{},"116":{},"149":{}},"text":{"7":{},"11":{},"17":{},"21":{},"23":{},"36":{},"48":{},"52":{},"53":{},"68":{},"72":{},"73":{},"116":{},"121":{},"124":{},"125":{},"139":{},"149":{},"153":{},"154":{}},"component":{}}],["match_team",{"_index":1018,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["match_valu",{"_index":1017,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["max.well@example.com",{"_index":925,"title":{},"name":{},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["max_column",{"_index":1447,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["maximum",{"_index":1436,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["mean",{"_index":331,"title":{},"name":{},"text":{"17":{},"18":{},"21":{},"22":{},"121":{},"122":{},"139":{},"140":{}},"component":{}}],["mean_dur",{"_index":1377,"title":{},"name":{},"text":{"60":{},"82":{},"132":{},"161":{}},"component":{}}],["memori",{"_index":177,"title":{},"name":{},"text":{"8":{},"12":{},"25":{},"39":{}},"component":{}}],["mention",{"_index":1453,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["messag",{"_index":408,"title":{},"name":{},"text":{"18":{},"22":{},"53":{},"73":{},"122":{},"125":{},"140":{},"154":{}},"component":{}}],["met",{"_index":1455,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["metadata",{"_index":880,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["metaphon",{"_index":1259,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["mi",{"_index":959,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["micronesia",{"_index":1086,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["middl",{"_index":421,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["midtabl",{"_index":1008,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["miller",{"_index":1424,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["minimum",{"_index":1187,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["minlength",{"_index":1192,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["mle",{"_index":59,"title":{},"name":{},"text":{"4":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"92":{},"99":{},"105":{},"119":{},"120":{},"121":{},"122":{},"136":{},"137":{},"138":{},"139":{},"140":{}},"component":{}}],["mm",{"_index":233,"title":{},"name":{},"text":{"15":{},"19":{},"57":{},"79":{},"119":{},"129":{},"137":{},"158":{}},"component":{}}],["model",{"_index":17,"title":{},"name":{},"text":{"1":{},"44":{},"64":{},"111":{},"145":{}},"component":{}}],["modifi",{"_index":680,"title":{},"name":{},"text":{"35":{},"44":{},"62":{},"64":{},"70":{},"84":{},"89":{},"95":{},"111":{},"134":{},"145":{},"163":{}},"component":{}}],["modul",{"_index":208,"title":{"18":{},"22":{},"122":{},"140":{}},"name":{"18":{},"22":{},"122":{},"140":{}},"text":{"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"119":{},"120":{},"121":{},"122":{},"137":{},"138":{},"139":{},"140":{}},"component":{}}],["module1",{"_index":332,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["module_1'",{"_index":330,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["module_2'",{"_index":327,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["module_nam",{"_index":411,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["module_on",{"_index":326,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["module_two",{"_index":328,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["mon",{"_index":593,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"42":{},"43":{},"46":{},"59":{},"66":{},"81":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"113":{},"131":{},"144":{},"147":{},"160":{}},"component":{}}],["money_rec",{"_index":546,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["month",{"_index":939,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["more",{"_index":8,"title":{},"name":{},"text":{"1":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"17":{},"18":{},"19":{},"21":{},"22":{},"23":{},"25":{},"26":{},"28":{},"36":{},"39":{},"40":{},"51":{},"52":{},"53":{},"61":{},"63":{},"72":{},"73":{},"83":{},"85":{},"93":{},"96":{},"100":{},"101":{},"106":{},"107":{},"119":{},"121":{},"122":{},"124":{},"125":{},"133":{},"135":{},"137":{},"139":{},"140":{},"142":{},"152":{},"153":{},"154":{},"162":{},"164":{}},"component":{}}],["move",{"_index":799,"title":{},"name":{},"text":{"41":{},"42":{},"86":{},"87":{},"102":{},"103":{},"108":{},"109":{}},"component":{}}],["mtpltn",{"_index":1274,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["much",{"_index":14,"title":{},"name":{},"text":{"1":{}},"component":{}}],["multi",{"_index":16,"title":{},"name":{},"text":{"1":{},"55":{},"61":{},"77":{},"83":{},"127":{},"133":{},"156":{},"162":{}},"component":{}}],["multilingu",{"_index":58,"title":{},"name":{},"text":{"4":{},"92":{},"99":{},"105":{},"136":{}},"component":{}}],["multipl",{"_index":318,"title":{},"name":{},"text":{"17":{},"21":{},"27":{},"31":{},"57":{},"61":{},"79":{},"83":{},"115":{},"121":{},"129":{},"133":{},"139":{},"141":{},"158":{},"162":{}},"component":{}}],["multiten",{"_index":160,"title":{},"name":{},"text":{"7":{},"11":{},"23":{},"36":{}},"component":{}}],["mwell@gmail.com",{"_index":926,"title":{},"name":{},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["my_str",{"_index":1357,"title":{},"name":{},"text":{"57":{},"79":{},"129":{},"158":{}},"component":{}}],["my_test",{"_index":1156,"title":{},"name":{},"text":{"50":{},"71":{},"118":{},"151":{}},"component":{}}],["myobject",{"_index":382,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["myobject[tuple[0",{"_index":395,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["n",{"_index":707,"title":{},"name":{},"text":{"38":{},"43":{},"76":{},"88":{},"91":{},"98":{},"104":{},"110":{}},"component":{}}],["name",{"_index":86,"title":{},"name":{},"text":{"5":{},"16":{},"17":{},"18":{},"20":{},"21":{},"22":{},"24":{},"30":{},"33":{},"34":{},"35":{},"37":{},"41":{},"44":{},"48":{},"50":{},"54":{},"59":{},"64":{},"68":{},"70":{},"71":{},"74":{},"75":{},"81":{},"86":{},"89":{},"90":{},"93":{},"94":{},"95":{},"97":{},"100":{},"102":{},"106":{},"108":{},"111":{},"116":{},"118":{},"120":{},"121":{},"122":{},"126":{},"131":{},"138":{},"139":{},"140":{},"142":{},"144":{},"145":{},"149":{},"151":{},"155":{},"160":{}},"component":{}}],["nation",{"_index":142,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["nativ",{"_index":704,"title":{"38":{},"76":{},"91":{},"98":{}},"name":{},"text":{"38":{},"63":{},"76":{},"85":{},"91":{},"98":{},"135":{},"164":{}},"component":{}}],["natur",{"_index":690,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["nauru",{"_index":1088,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["necessari",{"_index":504,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["need",{"_index":207,"title":{},"name":{},"text":{"15":{},"17":{},"18":{},"19":{},"21":{},"22":{},"35":{},"38":{},"42":{},"43":{},"49":{},"58":{},"63":{},"69":{},"70":{},"76":{},"80":{},"85":{},"87":{},"88":{},"89":{},"91":{},"95":{},"98":{},"103":{},"104":{},"109":{},"110":{},"117":{},"119":{},"121":{},"122":{},"130":{},"135":{},"137":{},"139":{},"140":{},"150":{},"159":{},"164":{}},"component":{}}],["nest",{"_index":1362,"title":{},"name":{},"text":{"57":{},"79":{},"129":{},"158":{}},"component":{}}],["never",{"_index":701,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["new",{"_index":172,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"19":{},"23":{},"25":{},"26":{},"28":{},"35":{},"36":{},"38":{},"39":{},"40":{},"45":{},"49":{},"51":{},"55":{},"65":{},"69":{},"70":{},"76":{},"77":{},"89":{},"91":{},"95":{},"98":{},"112":{},"117":{},"119":{},"127":{},"137":{},"146":{},"150":{},"156":{}},"component":{}}],["new_salari",{"_index":1297,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["newli",{"_index":1392,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["next",{"_index":724,"title":{},"name":{},"text":{"38":{},"49":{},"69":{},"76":{},"91":{},"98":{},"117":{},"150":{}},"component":{}}],["nguyen",{"_index":1430,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["nls_date_format",{"_index":784,"title":{},"name":{},"text":{"41":{},"42":{},"43":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{}},"component":{}}],["node",{"_index":284,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["node.j",{"_index":320,"title":{},"name":{},"text":{"17":{},"18":{},"21":{},"22":{},"121":{},"122":{},"139":{},"140":{}},"component":{}}],["non",{"_index":994,"title":{},"name":{},"text":{"47":{},"50":{},"67":{},"71":{},"114":{},"118":{},"148":{},"151":{}},"component":{}}],["none",{"_index":682,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["normal",{"_index":684,"title":{},"name":{},"text":{"35":{},"63":{},"70":{},"85":{},"89":{},"95":{},"135":{},"164":{}},"component":{}}],["note",{"_index":665,"title":{},"name":{},"text":{"35":{},"49":{},"53":{},"69":{},"70":{},"73":{},"89":{},"95":{},"117":{},"125":{},"150":{},"154":{}},"component":{}}],["notifi",{"_index":1466,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["nov",{"_index":840,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["novic",{"_index":1050,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["now",{"_index":540,"title":{},"name":{},"text":{"29":{},"30":{},"32":{},"34":{},"46":{},"50":{},"57":{},"58":{},"59":{},"66":{},"71":{},"79":{},"80":{},"81":{},"113":{},"118":{},"123":{},"129":{},"130":{},"131":{},"143":{},"144":{},"147":{},"151":{},"158":{},"159":{},"160":{}},"component":{}}],["null",{"_index":520,"title":{"47":{},"67":{},"114":{},"148":{}},"name":{"47":{},"67":{},"114":{},"148":{}},"text":{"27":{},"31":{},"35":{},"44":{},"45":{},"47":{},"50":{},"52":{},"55":{},"64":{},"65":{},"67":{},"70":{},"71":{},"72":{},"77":{},"89":{},"95":{},"111":{},"112":{},"114":{},"115":{},"118":{},"124":{},"127":{},"141":{},"145":{},"146":{},"148":{},"151":{},"153":{},"156":{}},"component":{}}],["number",{"_index":223,"title":{},"name":{},"text":{"15":{},"19":{},"29":{},"30":{},"32":{},"34":{},"35":{},"38":{},"44":{},"45":{},"47":{},"50":{},"52":{},"53":{},"54":{},"55":{},"57":{},"59":{},"61":{},"63":{},"64":{},"65":{},"67":{},"70":{},"71":{},"72":{},"73":{},"74":{},"76":{},"77":{},"79":{},"81":{},"83":{},"85":{},"89":{},"91":{},"95":{},"98":{},"111":{},"112":{},"114":{},"118":{},"119":{},"123":{},"124":{},"125":{},"126":{},"127":{},"129":{},"131":{},"133":{},"135":{},"137":{},"143":{},"144":{},"145":{},"146":{},"148":{},"151":{},"153":{},"154":{},"155":{},"156":{},"158":{},"160":{},"162":{},"164":{}},"component":{}}],["number(5",{"_index":894,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["number(6",{"_index":1294,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["number(8",{"_index":1296,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["numer",{"_index":423,"title":{},"name":{},"text":{"18":{},"22":{},"52":{},"53":{},"72":{},"73":{},"122":{},"124":{},"125":{},"140":{},"153":{},"154":{}},"component":{}}],["numtodsinterv",{"_index":1375,"title":{},"name":{},"text":{"60":{},"82":{},"132":{},"161":{}},"component":{}}],["nvl",{"_index":522,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["obj2str",{"_index":403,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["obj2string(inputobject",{"_index":398,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["object",{"_index":78,"title":{},"name":{},"text":{"5":{},"6":{},"15":{},"17":{},"18":{},"19":{},"21":{},"22":{},"29":{},"32":{},"44":{},"50":{},"52":{},"53":{},"56":{},"64":{},"71":{},"72":{},"73":{},"78":{},"93":{},"96":{},"100":{},"101":{},"106":{},"107":{},"111":{},"118":{},"119":{},"121":{},"122":{},"123":{},"124":{},"125":{},"128":{},"137":{},"139":{},"140":{},"142":{},"143":{},"145":{},"151":{},"152":{},"153":{},"154":{},"157":{}},"component":{}}],["object_nam",{"_index":901,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["object_typ",{"_index":902,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["obtain",{"_index":1287,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["occur",{"_index":1469,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["oceania",{"_index":1074,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["offer",{"_index":264,"title":{},"name":{},"text":{"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"140":{},"141":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{}},"component":{}}],["offset",{"_index":705,"title":{"38":{},"76":{},"91":{},"98":{}},"name":{"38":{},"76":{},"91":{},"98":{}},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["old",{"_index":1284,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["old_salari",{"_index":1295,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["omit",{"_index":850,"title":{},"name":{},"text":{"42":{},"87":{},"103":{},"109":{}},"component":{}}],["omit_curr",{"_index":859,"title":{},"name":{},"text":{"42":{},"87":{},"103":{},"109":{}},"component":{}}],["omit_group",{"_index":860,"title":{},"name":{},"text":{"42":{},"87":{},"103":{},"109":{}},"component":{}}],["omit_ti",{"_index":861,"title":{},"name":{},"text":{"42":{},"87":{},"103":{},"109":{}},"component":{}}],["on",{"_index":124,"title":{},"name":{},"text":{"6":{},"18":{},"22":{},"24":{},"33":{},"35":{},"37":{},"56":{},"70":{},"75":{},"78":{},"89":{},"90":{},"94":{},"95":{},"96":{},"97":{},"101":{},"107":{},"122":{},"128":{},"140":{},"152":{},"157":{}},"component":{}}],["onc",{"_index":270,"title":{},"name":{},"text":{"16":{},"20":{},"41":{},"49":{},"63":{},"69":{},"85":{},"86":{},"102":{},"108":{},"117":{},"120":{},"135":{},"138":{},"150":{},"164":{}},"component":{}}],["onward",{"_index":722,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["oper",{"_index":34,"title":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"name":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"text":{"1":{},"10":{},"14":{},"27":{},"28":{},"30":{},"31":{},"34":{},"48":{},"51":{},"54":{},"59":{},"61":{},"68":{},"74":{},"81":{},"83":{},"115":{},"116":{},"126":{},"131":{},"133":{},"141":{},"144":{},"149":{},"155":{},"160":{},"162":{}},"component":{}}],["optim",{"_index":163,"title":{},"name":{},"text":{"7":{},"11":{},"23":{},"36":{}},"component":{}}],["option",{"_index":62,"title":{},"name":{},"text":{"4":{},"16":{},"20":{},"35":{},"42":{},"46":{},"52":{},"53":{},"58":{},"66":{},"70":{},"72":{},"73":{},"80":{},"87":{},"89":{},"92":{},"95":{},"99":{},"103":{},"105":{},"109":{},"113":{},"120":{},"124":{},"125":{},"130":{},"136":{},"138":{},"147":{},"153":{},"154":{},"159":{}},"component":{}}],["ora",{"_index":986,"title":{},"name":{},"text":{"47":{},"50":{},"67":{},"71":{},"114":{},"118":{},"148":{},"151":{}},"component":{}}],["oracl",{"_index":0,"title":{"1":{}},"name":{},"text":{"1":{},"4":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"19":{},"23":{},"25":{},"26":{},"28":{},"36":{},"38":{},"39":{},"40":{},"51":{},"63":{},"76":{},"85":{},"91":{},"92":{},"96":{},"98":{},"99":{},"101":{},"105":{},"107":{},"119":{},"135":{},"136":{},"137":{},"152":{},"164":{}},"component":{}}],["oracledb",{"_index":285,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["order",{"_index":418,"title":{},"name":{},"text":{"18":{},"22":{},"38":{},"41":{},"42":{},"43":{},"44":{},"49":{},"64":{},"69":{},"76":{},"86":{},"87":{},"88":{},"91":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"117":{},"122":{},"140":{},"145":{},"150":{}},"component":{}}],["organ",{"_index":147,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["origin",{"_index":310,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["other",{"_index":855,"title":{},"name":{},"text":{"42":{},"63":{},"85":{},"87":{},"103":{},"109":{},"135":{},"164":{}},"component":{}}],["otherwis",{"_index":1250,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["over",{"_index":726,"title":{"60":{},"82":{},"132":{},"161":{}},"name":{"60":{},"82":{},"132":{},"161":{}},"text":{"38":{},"41":{},"42":{},"43":{},"49":{},"50":{},"60":{},"69":{},"71":{},"76":{},"82":{},"86":{},"87":{},"88":{},"91":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"117":{},"118":{},"132":{},"150":{},"151":{},"161":{}},"component":{}}],["overhead",{"_index":648,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["overview",{"_index":114,"title":{},"name":{},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["own",{"_index":1342,"title":{},"name":{},"text":{"56":{},"78":{},"128":{},"157":{}},"component":{}}],["p_epoch",{"_index":222,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["p_string",{"_index":450,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["p_sub_domain",{"_index":455,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["p_url",{"_index":454,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["p_who",{"_index":302,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["packag",{"_index":105,"title":{},"name":{},"text":{"5":{},"16":{},"20":{},"93":{},"100":{},"106":{},"120":{},"138":{},"142":{}},"component":{}}],["page",{"_index":5,"title":{},"name":{},"text":{"1":{},"38":{},"76":{},"91":{},"98":{}},"component":{}}],["pair",{"_index":373,"title":{},"name":{},"text":{"18":{},"22":{},"29":{},"32":{},"122":{},"123":{},"140":{},"143":{}},"component":{}}],["pair.split",{"_index":389,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["palau",{"_index":1091,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["papua",{"_index":1093,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["paraguay",{"_index":1118,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["param",{"_index":298,"title":{},"name":{},"text":{"16":{},"18":{},"20":{},"22":{},"120":{},"122":{},"138":{},"140":{}},"component":{}}],["paramet",{"_index":1061,"title":{},"name":{},"text":{"49":{},"54":{},"57":{},"63":{},"69":{},"74":{},"79":{},"85":{},"117":{},"126":{},"129":{},"135":{},"150":{},"155":{},"158":{},"164":{}},"component":{}}],["paramt",{"_index":953,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["pars",{"_index":89,"title":{},"name":{},"text":{"5":{},"18":{},"22":{},"53":{},"73":{},"93":{},"100":{},"106":{},"122":{},"125":{},"140":{},"142":{},"154":{}},"component":{}}],["part",{"_index":659,"title":{},"name":{},"text":{"35":{},"45":{},"49":{},"53":{},"55":{},"61":{},"62":{},"65":{},"69":{},"70":{},"73":{},"77":{},"83":{},"84":{},"89":{},"95":{},"112":{},"117":{},"125":{},"127":{},"133":{},"134":{},"146":{},"150":{},"154":{},"156":{},"162":{},"163":{}},"component":{}}],["parti",{"_index":259,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["particularli",{"_index":1056,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["partit",{"_index":782,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["partner",{"_index":1216,"title":{},"name":{},"text":{"52":{},"72":{},"124":{},"153":{}},"component":{}}],["pass",{"_index":563,"title":{},"name":{},"text":{"29":{},"32":{},"46":{},"60":{},"66":{},"82":{},"113":{},"123":{},"132":{},"143":{},"147":{},"161":{}},"component":{}}],["patchset",{"_index":173,"title":{},"name":{},"text":{"8":{},"12":{},"25":{},"39":{}},"component":{}}],["pattern",{"_index":170,"title":{},"name":{},"text":{"7":{},"11":{},"23":{},"36":{}},"component":{}}],["per",{"_index":276,"title":{},"name":{},"text":{"16":{},"20":{},"41":{},"49":{},"63":{},"69":{},"85":{},"86":{},"102":{},"108":{},"117":{},"120":{},"135":{},"138":{},"150":{},"164":{}},"component":{}}],["percentag",{"_index":515,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["perfect",{"_index":1215,"title":{},"name":{},"text":{"52":{},"72":{},"124":{},"153":{}},"component":{}}],["perform",{"_index":256,"title":{},"name":{},"text":{"15":{},"17":{},"19":{},"21":{},"27":{},"30":{},"31":{},"34":{},"55":{},"59":{},"77":{},"81":{},"115":{},"119":{},"121":{},"127":{},"131":{},"137":{},"139":{},"141":{},"144":{},"156":{},"160":{}},"component":{}}],["persist",{"_index":315,"title":{},"name":{},"text":{"17":{},"18":{},"21":{},"22":{},"121":{},"122":{},"139":{},"140":{}},"component":{}}],["peru",{"_index":1120,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["phonic",{"_index":1253,"title":{},"name":{"54":{},"74":{},"126":{},"155":{}},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["phonic_encod",{"_index":1252,"title":{"54":{},"74":{},"126":{},"155":{}},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["pk_insert_demo",{"_index":1316,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["pk_json_demo",{"_index":1194,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["pl/sql",{"_index":12,"title":{"5":{},"24":{},"29":{},"32":{},"33":{},"37":{},"75":{},"90":{},"93":{},"94":{},"97":{},"100":{},"106":{},"123":{},"142":{},"143":{}},"name":{},"text":{"1":{},"2":{},"4":{},"5":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"37":{},"38":{},"53":{},"55":{},"59":{},"63":{},"73":{},"75":{},"76":{},"77":{},"81":{},"85":{},"90":{},"91":{},"92":{},"93":{},"94":{},"97":{},"98":{},"99":{},"100":{},"105":{},"106":{},"115":{},"119":{},"120":{},"121":{},"122":{},"123":{},"125":{},"127":{},"131":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"154":{},"156":{},"160":{},"164":{}},"component":{}}],["place",{"_index":338,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["plan",{"_index":635,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["plan_table_output",{"_index":633,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["play",{"_index":348,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["pleas",{"_index":1448,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["pls_integ",{"_index":1458,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["plsql",{"_index":433,"title":{},"name":{"24":{},"29":{},"32":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{},"123":{},"143":{}},"text":{},"component":{}}],["popul",{"_index":543,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["popular",{"_index":1208,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["population_m",{"_index":1067,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["portabl",{"_index":73,"title":{},"name":{},"text":{"5":{},"58":{},"80":{},"93":{},"100":{},"106":{},"130":{},"142":{},"159":{}},"component":{}}],["portion",{"_index":1234,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["posit",{"_index":1040,"title":{"49":{},"69":{},"117":{},"150":{},"49-2":{},"69-2":{},"117-2":{},"150-2":{}},"name":{"49":{},"69":{},"117":{},"150":{}},"text":{"49":{},"50":{},"69":{},"71":{},"117":{},"118":{},"150":{},"151":{}},"component":{}}],["possibl",{"_index":339,"title":{},"name":{},"text":{"17":{},"21":{},"30":{},"34":{},"59":{},"81":{},"121":{},"131":{},"139":{},"144":{},"160":{}},"component":{}}],["post",{"_index":314,"title":{},"name":{},"text":{"16":{},"17":{},"20":{},"21":{},"38":{},"55":{},"63":{},"76":{},"77":{},"85":{},"91":{},"98":{},"120":{},"121":{},"127":{},"135":{},"138":{},"139":{},"156":{},"164":{}},"component":{}}],["power",{"_index":9,"title":{},"name":{},"text":{"1":{}},"component":{}}],["pre",{"_index":715,"title":{},"name":{},"text":{"38":{},"55":{},"76":{},"77":{},"91":{},"98":{},"127":{},"156":{}},"component":{}}],["preced",{"_index":811,"title":{},"name":{},"text":{"41":{},"42":{},"43":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{}},"component":{}}],["predic",{"_index":533,"title":{},"name":{},"text":{"27":{},"30":{},"31":{},"34":{},"59":{},"81":{},"115":{},"131":{},"141":{},"144":{},"160":{}},"component":{}}],["prerequisit",{"_index":1454,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["present",{"_index":1201,"title":{},"name":{},"text":{"52":{},"72":{},"124":{},"153":{}},"component":{}}],["pretti",{"_index":566,"title":{},"name":{},"text":{"29":{},"32":{},"53":{},"73":{},"123":{},"125":{},"143":{},"154":{}},"component":{}}],["prev3_day",{"_index":869,"title":{},"name":{},"text":{"43":{},"88":{},"104":{},"110":{}},"component":{}}],["prev3_row",{"_index":868,"title":{},"name":{},"text":{"43":{},"88":{},"104":{},"110":{}},"component":{}}],["prev3_valu",{"_index":870,"title":{},"name":{},"text":{"43":{},"88":{},"104":{},"110":{}},"component":{}}],["previou",{"_index":809,"title":{},"name":{},"text":{"41":{},"42":{},"43":{},"50":{},"63":{},"71":{},"85":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"118":{},"135":{},"151":{},"164":{}},"component":{}}],["previous",{"_index":295,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["price",{"_index":568,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["price.amount",{"_index":570,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["price.currency_cod",{"_index":569,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["price_json",{"_index":553,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["primari",{"_index":584,"title":{},"name":{},"text":{"30":{},"34":{},"35":{},"45":{},"50":{},"52":{},"53":{},"55":{},"59":{},"65":{},"70":{},"71":{},"72":{},"73":{},"77":{},"81":{},"89":{},"95":{},"112":{},"118":{},"124":{},"125":{},"127":{},"131":{},"144":{},"146":{},"151":{},"153":{},"154":{},"156":{},"160":{}},"component":{}}],["privileg",{"_index":167,"title":{"56":{},"78":{},"128":{},"157":{}},"name":{"56":{},"78":{},"128":{},"157":{}},"text":{"7":{},"10":{},"11":{},"14":{},"23":{},"24":{},"28":{},"33":{},"36":{},"37":{},"51":{},"56":{},"75":{},"78":{},"90":{},"94":{},"97":{},"128":{},"157":{}},"component":{}}],["pro",{"_index":487,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["procedur",{"_index":54,"title":{"15":{},"19":{},"119":{},"137":{}},"name":{},"text":{"4":{},"5":{},"10":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"27":{},"28":{},"31":{},"38":{},"51":{},"53":{},"55":{},"63":{},"73":{},"76":{},"77":{},"85":{},"91":{},"92":{},"93":{},"98":{},"99":{},"100":{},"105":{},"106":{},"115":{},"119":{},"120":{},"121":{},"122":{},"125":{},"127":{},"135":{},"136":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"154":{},"156":{},"164":{}},"component":{}}],["process",{"_index":26,"title":{},"name":{},"text":{"1":{},"15":{},"18":{},"19":{},"22":{},"24":{},"33":{},"37":{},"42":{},"43":{},"45":{},"52":{},"53":{},"63":{},"65":{},"72":{},"73":{},"75":{},"85":{},"87":{},"88":{},"90":{},"94":{},"97":{},"103":{},"104":{},"109":{},"110":{},"112":{},"119":{},"122":{},"124":{},"125":{},"135":{},"137":{},"140":{},"146":{},"153":{},"154":{},"164":{}},"component":{}}],["produc",{"_index":1155,"title":{},"name":{},"text":{"50":{},"71":{},"118":{},"151":{}},"component":{}}],["product",{"_index":468,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["program",{"_index":120,"title":{},"name":{},"text":{"6":{},"16":{},"20":{},"96":{},"101":{},"107":{},"120":{},"138":{},"152":{}},"component":{}}],["project",{"_index":322,"title":{},"name":{},"text":{"17":{},"18":{},"21":{},"22":{},"121":{},"122":{},"139":{},"140":{}},"component":{}}],["pronunci",{"_index":1258,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["properti",{"_index":194,"title":{},"name":{},"text":{"10":{},"14":{},"28":{},"44":{},"51":{},"52":{},"53":{},"64":{},"72":{},"73":{},"111":{},"124":{},"125":{},"145":{},"153":{},"154":{}},"component":{}}],["properties.salary.minimum",{"_index":1247,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["provid",{"_index":67,"title":{},"name":{},"text":{"5":{},"6":{},"17":{},"18":{},"21":{},"22":{},"35":{},"38":{},"44":{},"47":{},"61":{},"64":{},"67":{},"70":{},"76":{},"83":{},"89":{},"91":{},"93":{},"95":{},"96":{},"98":{},"100":{},"101":{},"106":{},"107":{},"111":{},"114":{},"121":{},"122":{},"133":{},"139":{},"140":{},"142":{},"145":{},"148":{},"152":{},"162":{}},"component":{}}],["pseudo",{"_index":710,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["python",{"_index":282,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["q",{"_index":225,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["qualiti",{"_index":1213,"title":{},"name":{},"text":{"52":{},"53":{},"54":{},"72":{},"73":{},"74":{},"124":{},"125":{},"126":{},"153":{},"154":{},"155":{}},"component":{}}],["queri",{"_index":134,"title":{"38":{},"76":{},"91":{},"98":{}},"name":{"38":{},"76":{},"91":{},"98":{}},"text":{"6":{},"24":{},"33":{},"37":{},"38":{},"41":{},"44":{},"45":{},"49":{},"52":{},"54":{},"56":{},"58":{},"64":{},"65":{},"69":{},"72":{},"74":{},"75":{},"76":{},"78":{},"80":{},"86":{},"90":{},"91":{},"94":{},"96":{},"97":{},"98":{},"101":{},"102":{},"107":{},"108":{},"111":{},"112":{},"117":{},"124":{},"126":{},"128":{},"130":{},"145":{},"146":{},"150":{},"152":{},"153":{},"155":{},"157":{},"159":{}},"component":{}}],["quickli",{"_index":213,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["r",{"_index":1069,"title":{},"name":{},"text":{"49":{},"54":{},"69":{},"74":{},"117":{},"126":{},"150":{},"155":{}},"component":{}}],["r.name",{"_index":1073,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["r.region_id",{"_index":1071,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["rais",{"_index":985,"title":{},"name":{},"text":{"47":{},"50":{},"67":{},"71":{},"114":{},"118":{},"148":{},"151":{}},"component":{}}],["raise_application_error",{"_index":1467,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["rang",{"_index":865,"title":{},"name":{},"text":{"43":{},"88":{},"104":{},"110":{}},"component":{}}],["read",{"_index":1334,"title":{},"name":{},"text":{"55":{},"56":{},"62":{},"77":{},"78":{},"84":{},"127":{},"128":{},"134":{},"156":{},"157":{},"163":{}},"component":{}}],["readabl",{"_index":1364,"title":{},"name":{},"text":{"57":{},"61":{},"79":{},"83":{},"129":{},"133":{},"158":{},"162":{}},"component":{}}],["readi",{"_index":271,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["realis",{"_index":430,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["receiv",{"_index":1168,"title":{},"name":{},"text":{"50":{},"71":{},"118":{},"151":{}},"component":{}}],["record",{"_index":542,"title":{},"name":{},"text":{"29":{},"32":{},"35":{},"52":{},"53":{},"55":{},"70":{},"72":{},"73":{},"77":{},"89":{},"95":{},"123":{},"124":{},"125":{},"127":{},"143":{},"153":{},"154":{},"156":{}},"component":{}}],["recreat",{"_index":1157,"title":{},"name":{},"text":{"50":{},"71":{},"118":{},"151":{}},"component":{}}],["reduc",{"_index":647,"title":{},"name":{},"text":{"30":{},"34":{},"55":{},"59":{},"77":{},"81":{},"127":{},"131":{},"144":{},"156":{},"160":{}},"component":{}}],["refer",{"_index":153,"title":{},"name":{},"text":{"6":{},"16":{},"17":{},"18":{},"20":{},"21":{},"22":{},"27":{},"31":{},"35":{},"38":{},"49":{},"52":{},"53":{},"55":{},"63":{},"69":{},"70":{},"72":{},"73":{},"76":{},"77":{},"85":{},"89":{},"91":{},"95":{},"96":{},"98":{},"101":{},"107":{},"115":{},"117":{},"120":{},"121":{},"122":{},"124":{},"125":{},"127":{},"135":{},"138":{},"139":{},"140":{},"141":{},"150":{},"152":{},"153":{},"154":{},"156":{},"164":{}},"component":{}}],["referenc",{"_index":441,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["regardless",{"_index":278,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["region",{"_index":1068,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["region_nam",{"_index":1130,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["regist",{"_index":874,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["relat",{"_index":121,"title":{},"name":{},"text":{"6":{},"10":{},"14":{},"28":{},"35":{},"44":{},"51":{},"52":{},"64":{},"70":{},"72":{},"89":{},"95":{},"96":{},"101":{},"107":{},"111":{},"124":{},"145":{},"152":{},"153":{}},"component":{}}],["releas",{"_index":156,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"23":{},"25":{},"26":{},"28":{},"36":{},"38":{},"39":{},"40":{},"51":{},"76":{},"91":{},"98":{}},"component":{}}],["releg",{"_index":1013,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["remain",{"_index":980,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["remov",{"_index":852,"title":{},"name":{},"text":{"42":{},"87":{},"103":{},"109":{}},"component":{}}],["render",{"_index":881,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["rep",{"_index":1411,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["repeat",{"_index":1044,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["replac",{"_index":126,"title":{},"name":{},"text":{"6":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"30":{},"34":{},"47":{},"59":{},"67":{},"81":{},"96":{},"101":{},"107":{},"114":{},"119":{},"120":{},"121":{},"122":{},"131":{},"137":{},"138":{},"139":{},"140":{},"144":{},"148":{},"152":{},"160":{}},"component":{}}],["report",{"_index":729,"title":{},"name":{"53":{},"73":{},"125":{},"154":{}},"text":{"38":{},"49":{},"50":{},"53":{},"55":{},"69":{},"71":{},"73":{},"76":{},"77":{},"91":{},"98":{},"117":{},"118":{},"125":{},"127":{},"150":{},"151":{},"154":{},"156":{}},"component":{}}],["reporting_us",{"_index":1339,"title":{},"name":{},"text":{"56":{},"78":{},"128":{},"157":{}},"component":{}}],["reporting_user/reporting_user@23cfre",{"_index":1346,"title":{},"name":{},"text":{"56":{},"78":{},"128":{},"157":{}},"component":{}}],["repres",{"_index":1419,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["represent",{"_index":90,"title":{},"name":{},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["request",{"_index":1176,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["requir",{"_index":260,"title":{},"name":{},"text":{"15":{},"19":{},"24":{},"33":{},"37":{},"38":{},"49":{},"52":{},"53":{},"63":{},"69":{},"72":{},"73":{},"75":{},"76":{},"85":{},"90":{},"91":{},"94":{},"97":{},"98":{},"117":{},"119":{},"124":{},"125":{},"135":{},"137":{},"150":{},"153":{},"154":{},"164":{}},"component":{}}],["reserv",{"_index":200,"title":{},"name":{},"text":{"10":{},"14":{},"28":{},"51":{}},"component":{}}],["respect",{"_index":1175,"title":{},"name":{},"text":{"52":{},"53":{},"55":{},"72":{},"73":{},"77":{},"124":{},"125":{},"127":{},"153":{},"154":{},"156":{}},"component":{}}],["result",{"_index":237,"title":{},"name":{},"text":{"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"61":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"83":{},"85":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"103":{},"104":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"133":{},"135":{},"137":{},"138":{},"139":{},"140":{},"141":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"162":{},"164":{}},"component":{}}],["retain",{"_index":989,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["retriev",{"_index":448,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"38":{},"44":{},"61":{},"64":{},"75":{},"76":{},"83":{},"90":{},"91":{},"94":{},"97":{},"98":{},"111":{},"133":{},"145":{},"162":{}},"component":{}}],["return",{"_index":224,"title":{"55":{},"77":{},"127":{},"156":{}},"name":{"55":{},"77":{},"127":{},"156":{}},"text":{"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"29":{},"30":{},"32":{},"33":{},"34":{},"37":{},"38":{},"53":{},"55":{},"59":{},"73":{},"75":{},"76":{},"77":{},"81":{},"90":{},"91":{},"94":{},"97":{},"98":{},"119":{},"120":{},"121":{},"122":{},"123":{},"125":{},"127":{},"131":{},"137":{},"138":{},"139":{},"140":{},"143":{},"144":{},"154":{},"156":{},"160":{}},"component":{}}],["reus",{"_index":505,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"41":{},"75":{},"86":{},"90":{},"94":{},"97":{},"102":{},"108":{}},"component":{}}],["revenu",{"_index":718,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["rfc",{"_index":1178,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["rich",{"_index":46,"title":{},"name":{},"text":{"4":{},"92":{},"99":{},"105":{},"136":{}},"component":{}}],["risk",{"_index":1210,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["rlktt0",{"_index":1279,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["rlktt0ltk",{"_index":1281,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["rlkttt",{"_index":1280,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["rlktttltk",{"_index":1282,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["rn",{"_index":734,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["rnrpst",{"_index":1273,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["robust",{"_index":72,"title":{},"name":{},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["role",{"_index":350,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["rollback",{"_index":1292,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["rolling_mean",{"_index":806,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["rollup",{"_index":1057,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["round",{"_index":803,"title":{"46":{},"66":{},"113":{},"147":{}},"name":{"46":{},"66":{},"113":{},"147":{}},"text":{"41":{},"46":{},"66":{},"86":{},"102":{},"108":{},"113":{},"147":{}},"component":{}}],["roundtrip",{"_index":1401,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["row",{"_index":133,"title":{"38":{},"52":{},"72":{},"76":{},"91":{},"98":{},"124":{},"153":{}},"name":{"38":{},"52":{},"72":{},"76":{},"91":{},"98":{},"124":{},"153":{}},"text":{"6":{},"30":{},"34":{},"35":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"59":{},"61":{},"62":{},"64":{},"65":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"76":{},"77":{},"81":{},"83":{},"84":{},"86":{},"87":{},"88":{},"89":{},"91":{},"95":{},"96":{},"98":{},"101":{},"102":{},"103":{},"104":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"114":{},"116":{},"117":{},"118":{},"124":{},"125":{},"126":{},"127":{},"131":{},"133":{},"134":{},"144":{},"145":{},"146":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"160":{},"162":{},"163":{}},"component":{}}],["rownum",{"_index":709,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["rule",{"_index":1218,"title":{},"name":{},"text":{"53":{},"55":{},"73":{},"77":{},"125":{},"127":{},"154":{},"156":{}},"component":{}}],["run",{"_index":63,"title":{},"name":{},"text":{"4":{},"24":{},"33":{},"37":{},"41":{},"42":{},"43":{},"50":{},"54":{},"58":{},"71":{},"74":{},"75":{},"80":{},"86":{},"87":{},"88":{},"90":{},"92":{},"94":{},"97":{},"99":{},"102":{},"103":{},"104":{},"105":{},"108":{},"109":{},"110":{},"118":{},"126":{},"130":{},"136":{},"151":{},"155":{},"159":{}},"component":{}}],["runner",{"_index":1007,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["runtim",{"_index":629,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["rw",{"_index":1373,"title":{},"name":{},"text":{"60":{},"82":{},"132":{},"161":{}},"component":{}}],["salari",{"_index":786,"title":{},"name":{},"text":{"41":{},"44":{},"52":{},"53":{},"55":{},"62":{},"64":{},"72":{},"73":{},"77":{},"84":{},"86":{},"102":{},"108":{},"111":{},"124":{},"125":{},"127":{},"134":{},"145":{},"153":{},"154":{},"156":{},"163":{}},"component":{}}],["salaries/dept",{"_index":795,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["sale",{"_index":714,"title":{},"name":{},"text":{"38":{},"44":{},"62":{},"64":{},"76":{},"84":{},"91":{},"98":{},"111":{},"134":{},"145":{},"163":{}},"component":{}}],["same",{"_index":311,"title":{},"name":{},"text":{"16":{},"20":{},"38":{},"42":{},"43":{},"49":{},"55":{},"69":{},"76":{},"77":{},"87":{},"88":{},"91":{},"98":{},"103":{},"104":{},"109":{},"110":{},"117":{},"120":{},"127":{},"138":{},"150":{},"156":{}},"component":{}}],["samoa",{"_index":1096,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["sampl",{"_index":293,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["san",{"_index":1386,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["sandisk",{"_index":492,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["save",{"_index":1402,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["saxon",{"_index":674,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["schema",{"_index":193,"title":{"52":{},"53":{},"56":{},"72":{},"73":{},"78":{},"124":{},"125":{},"128":{},"153":{},"154":{},"157":{}},"name":{"52":{},"53":{},"56":{},"72":{},"73":{},"78":{},"124":{},"125":{},"128":{},"153":{},"154":{},"157":{}},"text":{"10":{},"14":{},"16":{},"17":{},"18":{},"20":{},"21":{},"22":{},"28":{},"44":{},"51":{},"52":{},"53":{},"56":{},"64":{},"72":{},"73":{},"78":{},"111":{},"120":{},"121":{},"122":{},"124":{},"125":{},"128":{},"138":{},"139":{},"140":{},"145":{},"153":{},"154":{},"157":{}},"component":{}}],["schemaless",{"_index":1171,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["schemapath",{"_index":1241,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["scienc",{"_index":29,"title":{},"name":{},"text":{"1":{}},"component":{}}],["score",{"_index":1028,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["scott",{"_index":1396,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["screen",{"_index":731,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["script",{"_index":1166,"title":{},"name":{},"text":{"50":{},"61":{},"71":{},"83":{},"118":{},"133":{},"151":{},"162":{}},"component":{}}],["seamless",{"_index":71,"title":{"57":{},"79":{},"129":{},"158":{}},"name":{"57":{},"79":{},"129":{},"158":{}},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["second",{"_index":218,"title":{},"name":{},"text":{"15":{},"19":{},"46":{},"47":{},"49":{},"50":{},"66":{},"67":{},"69":{},"71":{},"113":{},"114":{},"117":{},"118":{},"119":{},"137":{},"147":{},"148":{},"150":{},"151":{}},"component":{}}],["section",{"_index":341,"title":{},"name":{},"text":{"17":{},"18":{},"21":{},"22":{},"121":{},"122":{},"139":{},"140":{}},"component":{}}],["secur",{"_index":74,"title":{},"name":{},"text":{"5":{},"18":{},"22":{},"93":{},"100":{},"106":{},"122":{},"140":{},"142":{}},"component":{}}],["see",{"_index":113,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"23":{},"25":{},"26":{},"28":{},"36":{},"38":{},"39":{},"40":{},"51":{},"76":{},"91":{},"93":{},"96":{},"98":{},"100":{},"101":{},"106":{},"107":{},"142":{},"152":{}},"component":{}}],["select",{"_index":229,"title":{"58":{},"80":{},"130":{},"159":{}},"name":{"58":{},"80":{},"130":{},"159":{}},"text":{"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"30":{},"33":{},"34":{},"35":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"116":{},"117":{},"119":{},"120":{},"121":{},"122":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"140":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{}},"component":{}}],["sensit",{"_index":888,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["sep",{"_index":596,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"59":{},"81":{},"86":{},"102":{},"108":{},"131":{},"144":{},"160":{}},"component":{}}],["sequenc",{"_index":654,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["server",{"_index":68,"title":{},"name":{},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["serveroutput",{"_index":618,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["session",{"_index":620,"title":{},"name":{},"text":{"30":{},"34":{},"41":{},"42":{},"43":{},"49":{},"56":{},"59":{},"69":{},"78":{},"81":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"117":{},"128":{},"131":{},"144":{},"150":{},"157":{},"160":{}},"component":{}}],["set",{"_index":47,"title":{},"name":{},"text":{"4":{},"6":{},"18":{},"22":{},"30":{},"34":{},"38":{},"41":{},"42":{},"43":{},"47":{},"49":{},"55":{},"59":{},"62":{},"63":{},"67":{},"69":{},"76":{},"77":{},"81":{},"84":{},"85":{},"86":{},"87":{},"88":{},"91":{},"92":{},"96":{},"98":{},"99":{},"101":{},"102":{},"103":{},"104":{},"105":{},"107":{},"108":{},"109":{},"110":{},"114":{},"117":{},"122":{},"127":{},"131":{},"134":{},"135":{},"136":{},"140":{},"144":{},"148":{},"150":{},"152":{},"156":{},"160":{},"163":{},"164":{}},"component":{}}],["shorthand",{"_index":1042,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["show",{"_index":677,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["side",{"_index":69,"title":{},"name":{},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["signatur",{"_index":275,"title":{},"name":{},"text":{"16":{},"17":{},"20":{},"21":{},"120":{},"121":{},"138":{},"139":{}},"component":{}}],["significantli",{"_index":712,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["similar",{"_index":998,"title":{},"name":{},"text":{"48":{},"49":{},"68":{},"69":{},"116":{},"117":{},"149":{},"150":{}},"component":{}}],["simpl",{"_index":536,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["simpli",{"_index":324,"title":{},"name":{},"text":{"17":{},"21":{},"49":{},"69":{},"117":{},"121":{},"139":{},"150":{}},"component":{}}],["simplifi",{"_index":273,"title":{},"name":{},"text":{"16":{},"20":{},"38":{},"42":{},"43":{},"47":{},"56":{},"63":{},"67":{},"76":{},"78":{},"85":{},"87":{},"88":{},"91":{},"98":{},"103":{},"104":{},"109":{},"110":{},"114":{},"120":{},"128":{},"135":{},"138":{},"148":{},"157":{},"164":{}},"component":{}}],["singl",{"_index":290,"title":{},"name":{},"text":{"16":{},"20":{},"55":{},"61":{},"63":{},"77":{},"83":{},"85":{},"120":{},"127":{},"133":{},"135":{},"138":{},"156":{},"162":{},"164":{}},"component":{}}],["solomon",{"_index":1097,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["sometim",{"_index":657,"title":{},"name":{},"text":{"35":{},"52":{},"53":{},"70":{},"72":{},"73":{},"89":{},"95":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["sort",{"_index":639,"title":{},"name":{},"text":{"30":{},"34":{},"38":{},"41":{},"43":{},"59":{},"76":{},"81":{},"86":{},"88":{},"91":{},"98":{},"102":{},"104":{},"108":{},"110":{},"131":{},"144":{},"160":{}},"component":{}}],["sourc",{"_index":415,"title":{},"name":{},"text":{"18":{},"22":{},"62":{},"84":{},"122":{},"134":{},"140":{},"163":{}},"component":{}}],["south",{"_index":1075,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["specif",{"_index":266,"title":{"16":{},"20":{},"120":{},"138":{}},"name":{"16":{},"20":{},"120":{},"138":{}},"text":{"16":{},"17":{},"18":{},"20":{},"21":{},"22":{},"53":{},"73":{},"120":{},"121":{},"122":{},"125":{},"138":{},"139":{},"140":{},"154":{}},"component":{}}],["specifi",{"_index":436,"title":{},"name":{},"text":{"24":{},"29":{},"32":{},"33":{},"37":{},"38":{},"46":{},"47":{},"52":{},"53":{},"56":{},"66":{},"67":{},"72":{},"73":{},"75":{},"76":{},"78":{},"90":{},"91":{},"94":{},"97":{},"98":{},"113":{},"114":{},"123":{},"124":{},"125":{},"128":{},"143":{},"147":{},"148":{},"153":{},"154":{},"157":{}},"component":{}}],["spell",{"_index":1203,"title":{},"name":{},"text":{"52":{},"72":{},"124":{},"153":{}},"component":{}}],["split",{"_index":808,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["spoken",{"_index":1283,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["sql",{"_index":1,"title":{"1":{},"6":{},"24":{},"30":{},"33":{},"34":{},"37":{},"38":{},"59":{},"75":{},"76":{},"81":{},"90":{},"91":{},"94":{},"96":{},"97":{},"98":{},"101":{},"107":{},"131":{},"144":{},"152":{},"160":{}},"name":{"24":{},"30":{},"33":{},"34":{},"37":{},"59":{},"75":{},"81":{},"90":{},"94":{},"97":{},"131":{},"144":{},"160":{}},"text":{"1":{},"2":{},"5":{},"6":{},"7":{},"9":{},"11":{},"13":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"93":{},"94":{},"95":{},"96":{},"97":{},"98":{},"100":{},"101":{},"102":{},"103":{},"104":{},"106":{},"107":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"140":{},"141":{},"142":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"152":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{}},"component":{}}],["sql/pgq",{"_index":196,"title":{},"name":{},"text":{"10":{},"14":{},"28":{},"51":{}},"component":{}}],["sql:1992",{"_index":1380,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["sql:1999",{"_index":918,"title":{},"name":{},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["sql:2003",{"_index":508,"title":{},"name":{},"text":{"27":{},"31":{},"115":{},"141":{}},"component":{}}],["sql:2016",{"_index":660,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["sql_transpil",{"_index":621,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["sqlcl",{"_index":407,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["sqlerrm",{"_index":1470,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["sqlplu",{"_index":406,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["standalon",{"_index":308,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["standard",{"_index":140,"title":{},"name":{},"text":{"6":{},"27":{},"31":{},"35":{},"38":{},"44":{},"45":{},"47":{},"52":{},"53":{},"61":{},"64":{},"65":{},"67":{},"70":{},"72":{},"73":{},"76":{},"83":{},"89":{},"91":{},"95":{},"96":{},"98":{},"101":{},"107":{},"111":{},"112":{},"114":{},"115":{},"124":{},"125":{},"133":{},"141":{},"145":{},"146":{},"148":{},"152":{},"153":{},"154":{},"162":{}},"component":{}}],["start",{"_index":65,"title":{},"name":{},"text":{"4":{},"38":{},"50":{},"71":{},"76":{},"91":{},"92":{},"98":{},"99":{},"105":{},"118":{},"136":{},"151":{}},"component":{}}],["state",{"_index":1159,"title":{},"name":{},"text":{"50":{},"71":{},"118":{},"151":{}},"component":{}}],["statement",{"_index":95,"title":{"47":{},"67":{},"114":{},"148":{}},"name":{},"text":{"5":{},"6":{},"15":{},"18":{},"19":{},"22":{},"24":{},"27":{},"30":{},"31":{},"33":{},"34":{},"35":{},"37":{},"41":{},"42":{},"43":{},"49":{},"52":{},"53":{},"55":{},"58":{},"59":{},"61":{},"62":{},"63":{},"69":{},"70":{},"72":{},"73":{},"75":{},"77":{},"80":{},"81":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"93":{},"94":{},"95":{},"96":{},"97":{},"100":{},"101":{},"102":{},"103":{},"104":{},"106":{},"107":{},"108":{},"109":{},"110":{},"115":{},"117":{},"119":{},"122":{},"124":{},"125":{},"127":{},"130":{},"131":{},"133":{},"134":{},"135":{},"137":{},"140":{},"141":{},"142":{},"144":{},"150":{},"152":{},"153":{},"154":{},"156":{},"159":{},"160":{},"162":{},"163":{},"164":{}},"component":{}}],["step",{"_index":267,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["steven",{"_index":1198,"title":{},"name":{},"text":{"52":{},"72":{},"124":{},"153":{}},"component":{}}],["storag",{"_index":914,"title":{},"name":{},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["store",{"_index":53,"title":{},"name":{},"text":{"4":{},"5":{},"8":{},"10":{},"12":{},"14":{},"16":{},"17":{},"18":{},"20":{},"21":{},"22":{},"25":{},"28":{},"39":{},"44":{},"51":{},"52":{},"53":{},"55":{},"63":{},"64":{},"72":{},"73":{},"77":{},"85":{},"92":{},"93":{},"99":{},"100":{},"105":{},"106":{},"111":{},"120":{},"121":{},"122":{},"124":{},"125":{},"127":{},"135":{},"136":{},"138":{},"139":{},"140":{},"142":{},"145":{},"153":{},"154":{},"156":{},"164":{}},"component":{}}],["stream",{"_index":32,"title":{},"name":{},"text":{"1":{},"63":{},"85":{},"135":{},"164":{}},"component":{}}],["string",{"_index":299,"title":{},"name":{},"text":{"16":{},"18":{},"20":{},"22":{},"24":{},"33":{},"37":{},"48":{},"52":{},"53":{},"54":{},"68":{},"72":{},"73":{},"74":{},"75":{},"90":{},"94":{},"97":{},"116":{},"120":{},"122":{},"124":{},"125":{},"126":{},"138":{},"140":{},"149":{},"153":{},"154":{},"155":{}},"component":{}}],["string2obj",{"_index":402,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["string2obj(inputstr",{"_index":376,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["structur",{"_index":1173,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["sub",{"_index":708,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["subprogram",{"_index":84,"title":{},"name":{},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["subsequ",{"_index":656,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["substr(p_string,2",{"_index":452,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["substr(p_url",{"_index":464,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["succe",{"_index":668,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["succeed",{"_index":1347,"title":{},"name":{},"text":{"56":{},"78":{},"128":{},"157":{}},"component":{}}],["successfulli",{"_index":409,"title":{},"name":{},"text":{"18":{},"22":{},"27":{},"31":{},"38":{},"53":{},"55":{},"63":{},"73":{},"76":{},"77":{},"85":{},"91":{},"98":{},"115":{},"122":{},"125":{},"127":{},"135":{},"140":{},"141":{},"154":{},"156":{},"164":{}},"component":{}}],["such",{"_index":97,"title":{},"name":{},"text":{"5":{},"6":{},"35":{},"48":{},"52":{},"53":{},"58":{},"63":{},"68":{},"70":{},"72":{},"73":{},"80":{},"85":{},"89":{},"93":{},"95":{},"96":{},"100":{},"101":{},"106":{},"107":{},"116":{},"124":{},"125":{},"130":{},"135":{},"142":{},"149":{},"152":{},"153":{},"154":{},"159":{},"164":{}},"component":{}}],["sum",{"_index":792,"title":{"60":{},"82":{},"132":{},"161":{}},"name":{"60":{},"82":{},"132":{},"161":{}},"text":{"41":{},"60":{},"82":{},"86":{},"102":{},"108":{},"132":{},"161":{}},"component":{}}],["sum(co.population/1000/1000",{"_index":1066,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["sum(quantity_sold",{"_index":716,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["super",{"_index":1058,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["support",{"_index":45,"title":{"38":{},"76":{},"91":{},"98":{}},"name":{},"text":{"4":{},"5":{},"8":{},"12":{},"25":{},"29":{},"32":{},"38":{},"39":{},"46":{},"66":{},"76":{},"91":{},"92":{},"93":{},"98":{},"99":{},"100":{},"105":{},"106":{},"113":{},"123":{},"136":{},"142":{},"143":{},"147":{}},"component":{}}],["suppos",{"_index":1137,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["surinam",{"_index":1122,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["surpris",{"_index":1054,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["switch",{"_index":631,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["sync",{"_index":166,"title":{},"name":{},"text":{"7":{},"11":{},"23":{},"36":{}},"component":{}}],["syntax",{"_index":679,"title":{},"name":{},"text":{"35":{},"38":{},"50":{},"70":{},"71":{},"76":{},"89":{},"91":{},"95":{},"98":{},"118":{},"151":{}},"component":{}}],["sysdat",{"_index":1161,"title":{},"name":{},"text":{"50":{},"55":{},"58":{},"71":{},"77":{},"80":{},"118":{},"127":{},"130":{},"151":{},"156":{},"159":{}},"component":{}}],["system",{"_index":19,"title":{},"name":{},"text":{"1":{},"17":{},"18":{},"21":{},"22":{},"121":{},"122":{},"139":{},"140":{}},"component":{}}],["systimestamp",{"_index":975,"title":{},"name":{},"text":{"47":{},"67":{},"114":{},"148":{}},"component":{}}],["t",{"_index":1015,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["t_change_detail",{"_index":1303,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["t_change_rec",{"_index":1299,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["tabl",{"_index":132,"title":{"52":{},"61":{},"63":{},"72":{},"83":{},"85":{},"124":{},"133":{},"135":{},"153":{},"162":{},"164":{}},"name":{"61":{},"63":{},"83":{},"85":{},"133":{},"135":{},"162":{},"164":{}},"text":{"6":{},"9":{},"13":{},"24":{},"26":{},"29":{},"30":{},"32":{},"33":{},"34":{},"35":{},"37":{},"40":{},"44":{},"45":{},"47":{},"50":{},"52":{},"53":{},"55":{},"56":{},"58":{},"59":{},"61":{},"62":{},"63":{},"64":{},"65":{},"67":{},"70":{},"71":{},"72":{},"73":{},"75":{},"77":{},"78":{},"80":{},"81":{},"83":{},"84":{},"85":{},"89":{},"90":{},"94":{},"95":{},"96":{},"97":{},"101":{},"107":{},"111":{},"112":{},"114":{},"118":{},"123":{},"124":{},"125":{},"127":{},"128":{},"130":{},"131":{},"133":{},"134":{},"135":{},"143":{},"144":{},"145":{},"146":{},"148":{},"151":{},"152":{},"153":{},"154":{},"156":{},"157":{},"159":{},"160":{},"162":{},"163":{},"164":{}},"component":{}}],["table_nam",{"_index":1217,"title":{},"name":{},"text":{"52":{},"63":{},"72":{},"85":{},"124":{},"135":{},"153":{},"164":{}},"component":{}}],["task",{"_index":123,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["team",{"_index":1004,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["team_nam",{"_index":1016,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["team_name_dm1",{"_index":1263,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["team_name_dm12",{"_index":1268,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["team_name_dm12_alt",{"_index":1269,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["team_name_dm1_alt",{"_index":1265,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["team_name_dm6",{"_index":1266,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["team_name_dm6_alt",{"_index":1267,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["test",{"_index":534,"title":{},"name":{},"text":{"27":{},"31":{},"50":{},"71":{},"115":{},"118":{},"141":{},"151":{}},"component":{}}],["text",{"_index":416,"title":{},"name":{},"text":{"18":{},"22":{},"54":{},"74":{},"122":{},"126":{},"140":{},"155":{}},"component":{}}],["thank",{"_index":272,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["the_dat",{"_index":236,"title":{},"name":{},"text":{"15":{},"19":{},"119":{},"137":{}},"component":{}}],["themselv",{"_index":691,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["thing",{"_index":1475,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["third",{"_index":1261,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["those",{"_index":107,"title":{},"name":{},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["three",{"_index":810,"title":{},"name":{},"text":{"41":{},"43":{},"86":{},"88":{},"102":{},"104":{},"108":{},"110":{}},"component":{}}],["through",{"_index":503,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"38":{},"75":{},"76":{},"90":{},"91":{},"94":{},"97":{},"98":{}},"component":{}}],["throw",{"_index":378,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["ti",{"_index":854,"title":{},"name":{},"text":{"42":{},"87":{},"103":{},"109":{}},"component":{}}],["tier",{"_index":422,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["time",{"_index":511,"title":{},"name":{},"text":{"27":{},"31":{},"38":{},"46":{},"61":{},"66":{},"76":{},"83":{},"91":{},"98":{},"113":{},"115":{},"133":{},"141":{},"147":{},"162":{}},"component":{}}],["timestamp",{"_index":932,"title":{},"name":{},"text":{"46":{},"47":{},"66":{},"67":{},"113":{},"114":{},"147":{},"148":{}},"component":{}}],["to_char",{"_index":230,"title":{},"name":{},"text":{"15":{},"19":{},"27":{},"29":{},"31":{},"32":{},"58":{},"80":{},"115":{},"119":{},"123":{},"130":{},"137":{},"141":{},"143":{},"159":{}},"component":{}}],["to_char(sysdate,'yyyi",{"_index":1355,"title":{},"name":{},"text":{"57":{},"79":{},"129":{},"158":{}},"component":{}}],["to_dat",{"_index":944,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["to_timestamp",{"_index":946,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["today",{"_index":1368,"title":{},"name":{},"text":{"58":{},"80":{},"130":{},"159":{}},"component":{}}],["tom",{"_index":1222,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["tonga",{"_index":1098,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["tool",{"_index":152,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["top",{"_index":706,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["total",{"_index":788,"title":{},"name":{},"text":{"41":{},"42":{},"43":{},"60":{},"82":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"132":{},"161":{}},"component":{}}],["total_dur",{"_index":1376,"title":{},"name":{},"text":{"60":{},"82":{},"132":{},"161":{}},"component":{}}],["toward",{"_index":268,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["town",{"_index":1009,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["tradit",{"_index":23,"title":{},"name":{},"text":{"1":{}},"component":{}}],["transact",{"_index":25,"title":{},"name":{},"text":{"1":{}},"component":{}}],["transform",{"_index":397,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["transpar",{"_index":645,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["transpil",{"_index":578,"title":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"name":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["trigger",{"_index":108,"title":{},"name":{},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["trigram",{"_index":1021,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["true",{"_index":915,"title":{},"name":{},"text":{"45":{},"53":{},"65":{},"73":{},"112":{},"125":{},"146":{},"154":{}},"component":{}}],["trunc",{"_index":935,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["ts",{"_index":947,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["ts_day_ceil",{"_index":951,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["ts_hour_floor",{"_index":958,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["tune",{"_index":650,"title":{},"name":{},"text":{"30":{},"34":{},"59":{},"81":{},"131":{},"144":{},"160":{}},"component":{}}],["tupl",{"_index":388,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["tuple.length",{"_index":390,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["tuple[1",{"_index":391,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["turn",{"_index":1180,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["tuvalu",{"_index":1100,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["twice",{"_index":702,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["two",{"_index":444,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"45":{},"65":{},"75":{},"90":{},"94":{},"97":{},"112":{},"146":{}},"component":{}}],["type",{"_index":106,"title":{"29":{},"32":{},"45":{},"46":{},"60":{},"65":{},"66":{},"82":{},"112":{},"113":{},"123":{},"132":{},"143":{},"146":{},"147":{},"161":{}},"name":{"29":{},"32":{},"46":{},"60":{},"66":{},"82":{},"113":{},"123":{},"132":{},"143":{},"147":{},"161":{}},"text":{"5":{},"9":{},"13":{},"26":{},"29":{},"32":{},"38":{},"40":{},"45":{},"52":{},"53":{},"55":{},"56":{},"61":{},"63":{},"65":{},"72":{},"73":{},"76":{},"77":{},"78":{},"83":{},"85":{},"91":{},"93":{},"98":{},"100":{},"106":{},"112":{},"123":{},"124":{},"125":{},"127":{},"128":{},"133":{},"135":{},"142":{},"143":{},"146":{},"153":{},"154":{},"156":{},"157":{},"162":{},"164":{}},"component":{}}],["typeof",{"_index":399,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["typic",{"_index":727,"title":{},"name":{},"text":{"38":{},"76":{},"91":{},"98":{}},"component":{}}],["ui_hidden",{"_index":899,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["ultra",{"_index":493,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["unbound",{"_index":857,"title":{},"name":{},"text":{"42":{},"87":{},"103":{},"109":{}},"component":{}}],["undefin",{"_index":377,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["underdog",{"_index":1010,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["unexpect",{"_index":1053,"title":{},"name":{},"text":{"49":{},"63":{},"69":{},"85":{},"117":{},"135":{},"150":{},"164":{}},"component":{}}],["unifi",{"_index":122,"title":{},"name":{},"text":{"6":{},"96":{},"101":{},"107":{},"152":{}},"component":{}}],["uniform",{"_index":1332,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["uniqu",{"_index":686,"title":{},"name":{},"text":{"35":{},"43":{},"70":{},"88":{},"89":{},"95":{},"104":{},"110":{}},"component":{}}],["unit",{"_index":80,"title":{},"name":{},"text":{"5":{},"46":{},"48":{},"54":{},"66":{},"68":{},"74":{},"93":{},"100":{},"106":{},"113":{},"116":{},"126":{},"142":{},"147":{},"149":{},"155":{}},"component":{}}],["univers",{"_index":911,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["unlik",{"_index":319,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["unlimit",{"_index":1352,"title":{},"name":{},"text":{"57":{},"79":{},"129":{},"158":{}},"component":{}}],["unnecessari",{"_index":1400,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["up",{"_index":867,"title":{},"name":{},"text":{"43":{},"46":{},"48":{},"50":{},"54":{},"66":{},"68":{},"71":{},"74":{},"88":{},"104":{},"110":{},"113":{},"116":{},"118":{},"126":{},"147":{},"149":{},"151":{},"155":{}},"component":{}}],["updat",{"_index":130,"title":{"47":{},"67":{},"114":{},"148":{}},"name":{"47":{},"62":{},"67":{},"84":{},"114":{},"134":{},"148":{},"163":{}},"text":{"6":{},"27":{},"31":{},"47":{},"55":{},"62":{},"67":{},"77":{},"84":{},"96":{},"101":{},"107":{},"114":{},"115":{},"127":{},"134":{},"141":{},"148":{},"152":{},"156":{},"163":{}},"component":{}}],["update/delet",{"_index":1404,"title":{"62":{},"84":{},"134":{},"163":{}},"name":{},"text":{},"component":{}}],["upgrad",{"_index":1449,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["upper",{"_index":970,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["upstart",{"_index":1011,"title":{},"name":{},"text":{"48":{},"54":{},"68":{},"74":{},"116":{},"126":{},"149":{},"155":{}},"component":{}}],["url",{"_index":449,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["uruguay",{"_index":1124,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["us",{"_index":22,"title":{},"name":{},"text":{"1":{},"5":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"29":{},"32":{},"33":{},"35":{},"37":{},"38":{},"41":{},"42":{},"44":{},"45":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"58":{},"61":{},"63":{},"64":{},"65":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"80":{},"83":{},"85":{},"86":{},"87":{},"89":{},"90":{},"91":{},"93":{},"94":{},"95":{},"97":{},"98":{},"100":{},"102":{},"103":{},"106":{},"108":{},"109":{},"111":{},"112":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"130":{},"133":{},"135":{},"137":{},"138":{},"139":{},"140":{},"142":{},"143":{},"145":{},"146":{},"149":{},"150":{},"151":{},"153":{},"154":{},"155":{},"156":{},"159":{},"162":{},"164":{}},"component":{}}],["usag",{"_index":875,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["usb",{"_index":495,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["usd",{"_index":554,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["user",{"_index":50,"title":{},"name":{},"text":{"4":{},"6":{},"24":{},"30":{},"33":{},"34":{},"35":{},"37":{},"44":{},"56":{},"59":{},"61":{},"64":{},"70":{},"75":{},"78":{},"81":{},"83":{},"89":{},"90":{},"92":{},"94":{},"95":{},"96":{},"97":{},"99":{},"101":{},"105":{},"107":{},"111":{},"128":{},"131":{},"133":{},"136":{},"144":{},"145":{},"152":{},"157":{},"160":{},"162":{}},"component":{}}],["user_annotations_usag",{"_index":906,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["user_id",{"_index":919,"title":{},"name":{},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["user_mle_modul",{"_index":413,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["user_sourc",{"_index":417,"title":{},"name":{},"text":{"18":{},"22":{},"122":{},"140":{}},"component":{}}],["user_tab_column",{"_index":1471,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["user’",{"_index":289,"title":{},"name":{},"text":{"16":{},"20":{},"120":{},"138":{}},"component":{}}],["v",{"_index":1236,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["v.id",{"_index":1237,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["v.report.errors[*].error",{"_index":1235,"title":{},"name":{},"text":{"53":{},"73":{},"125":{},"154":{}},"component":{}}],["v_begin_po",{"_index":458,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["v_length",{"_index":460,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["val",{"_index":936,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["valid",{"_index":1169,"title":{"52":{},"72":{},"124":{},"153":{}},"name":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"text":{"52":{},"53":{},"63":{},"72":{},"73":{},"85":{},"124":{},"125":{},"135":{},"153":{},"154":{},"164":{}},"component":{}}],["valli",{"_index":1427,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["valu",{"_index":372,"title":{"61":{},"83":{},"133":{},"162":{}},"name":{"61":{},"83":{},"133":{},"162":{}},"text":{"18":{},"22":{},"30":{},"34":{},"35":{},"42":{},"43":{},"45":{},"46":{},"47":{},"48":{},"50":{},"52":{},"53":{},"54":{},"55":{},"59":{},"60":{},"61":{},"63":{},"65":{},"66":{},"67":{},"68":{},"70":{},"71":{},"72":{},"73":{},"74":{},"77":{},"81":{},"82":{},"83":{},"85":{},"87":{},"88":{},"89":{},"95":{},"103":{},"104":{},"109":{},"110":{},"112":{},"113":{},"114":{},"116":{},"118":{},"122":{},"124":{},"125":{},"126":{},"127":{},"131":{},"132":{},"133":{},"135":{},"140":{},"144":{},"146":{},"147":{},"148":{},"149":{},"151":{},"153":{},"154":{},"155":{},"156":{},"160":{},"161":{},"162":{},"164":{}},"component":{}}],["vanuatu",{"_index":1102,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["var",{"_index":733,"title":{},"name":{},"text":{"38":{},"55":{},"76":{},"77":{},"91":{},"98":{},"127":{},"156":{}},"component":{}}],["vararg",{"_index":1350,"title":{"57":{},"79":{},"129":{},"158":{}},"name":{},"text":{},"component":{}}],["varchar2",{"_index":303,"title":{},"name":{},"text":{"16":{},"17":{},"20":{},"21":{},"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{},"120":{},"121":{},"138":{},"139":{}},"component":{}}],["varchar2(10",{"_index":662,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["varchar2(100",{"_index":586,"title":{},"name":{},"text":{"30":{},"34":{},"55":{},"59":{},"77":{},"81":{},"127":{},"131":{},"144":{},"156":{},"160":{}},"component":{}}],["varchar2(2",{"_index":551,"title":{},"name":{},"text":{"29":{},"32":{},"123":{},"143":{}},"component":{}}],["varchar2(20",{"_index":664,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["varchar2(25",{"_index":1382,"title":{},"name":{},"text":{"61":{},"83":{},"133":{},"162":{}},"component":{}}],["varchar2(255",{"_index":885,"title":{},"name":{},"text":{"44":{},"45":{},"50":{},"64":{},"65":{},"71":{},"111":{},"112":{},"118":{},"145":{},"146":{},"151":{}},"component":{}}],["varchar2(50",{"_index":898,"title":{},"name":{},"text":{"44":{},"64":{},"111":{},"145":{}},"component":{}}],["variabl",{"_index":104,"title":{},"name":{},"text":{"5":{},"93":{},"100":{},"106":{},"142":{}},"component":{}}],["vc",{"_index":1315,"title":{},"name":{},"text":{"55":{},"77":{},"127":{},"156":{}},"component":{}}],["vehicl",{"_index":694,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["venezuela",{"_index":1126,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["venzl",{"_index":670,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["veri",{"_index":1165,"title":{},"name":{},"text":{"50":{},"63":{},"71":{},"85":{},"118":{},"135":{},"151":{},"164":{}},"component":{}}],["verifi",{"_index":410,"title":{},"name":{},"text":{"18":{},"22":{},"62":{},"84":{},"122":{},"134":{},"140":{},"163":{}},"component":{}}],["version",{"_index":40,"title":{"3":{}},"name":{},"text":{"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"27":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"37":{},"38":{},"41":{},"42":{},"43":{},"44":{},"45":{},"46":{},"47":{},"48":{},"49":{},"50":{},"52":{},"53":{},"54":{},"55":{},"56":{},"57":{},"58":{},"59":{},"60":{},"61":{},"62":{},"63":{},"64":{},"65":{},"66":{},"67":{},"68":{},"69":{},"70":{},"71":{},"72":{},"73":{},"74":{},"75":{},"76":{},"77":{},"78":{},"79":{},"80":{},"81":{},"82":{},"83":{},"84":{},"85":{},"86":{},"87":{},"88":{},"89":{},"90":{},"91":{},"94":{},"95":{},"97":{},"98":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"111":{},"112":{},"113":{},"114":{},"115":{},"116":{},"117":{},"118":{},"119":{},"120":{},"121":{},"122":{},"123":{},"124":{},"125":{},"126":{},"127":{},"128":{},"129":{},"130":{},"131":{},"132":{},"133":{},"134":{},"135":{},"137":{},"138":{},"139":{},"140":{},"141":{},"143":{},"144":{},"145":{},"146":{},"147":{},"148":{},"149":{},"150":{},"151":{},"153":{},"154":{},"155":{},"156":{},"157":{},"158":{},"159":{},"160":{},"161":{},"162":{},"163":{},"164":{}},"component":{}}],["vet",{"_index":1214,"title":{},"name":{},"text":{"52":{},"72":{},"124":{},"153":{}},"component":{}}],["via",{"_index":110,"title":{"57":{},"62":{},"79":{},"84":{},"129":{},"134":{},"158":{},"163":{}},"name":{"62":{},"84":{},"134":{},"163":{}},"text":{"5":{},"10":{},"14":{},"28":{},"35":{},"50":{},"51":{},"57":{},"70":{},"71":{},"79":{},"89":{},"93":{},"95":{},"100":{},"106":{},"118":{},"129":{},"142":{},"151":{},"158":{}},"component":{}}],["vienna",{"_index":1356,"title":{},"name":{},"text":{"57":{},"61":{},"79":{},"83":{},"129":{},"133":{},"158":{},"162":{}},"component":{}}],["view",{"_index":414,"title":{},"name":{},"text":{"18":{},"22":{},"38":{},"50":{},"63":{},"71":{},"76":{},"85":{},"91":{},"98":{},"118":{},"122":{},"135":{},"140":{},"151":{},"164":{}},"component":{}}],["vin",{"_index":693,"title":{},"name":{},"text":{"35":{},"70":{},"89":{},"95":{}},"component":{}}],["vital",{"_index":316,"title":{},"name":{},"text":{"17":{},"21":{},"121":{},"139":{}},"component":{}}],["wages_per_dept",{"_index":793,"title":{},"name":{},"text":{"41":{},"86":{},"102":{},"108":{}},"component":{}}],["want",{"_index":209,"title":{},"name":{},"text":{"15":{},"19":{},"24":{},"33":{},"37":{},"50":{},"52":{},"53":{},"71":{},"72":{},"73":{},"75":{},"90":{},"94":{},"97":{},"118":{},"119":{},"124":{},"125":{},"137":{},"151":{},"153":{},"154":{}},"component":{}}],["wareh",{"_index":28,"title":{},"name":{},"text":{"1":{}},"component":{}}],["way",{"_index":251,"title":{},"name":{},"text":{"15":{},"19":{},"44":{},"61":{},"64":{},"83":{},"111":{},"119":{},"133":{},"137":{},"145":{},"162":{}},"component":{}}],["websit",{"_index":1181,"title":{},"name":{},"text":{"52":{},"53":{},"72":{},"73":{},"124":{},"125":{},"153":{},"154":{}},"component":{}}],["welcom",{"_index":4,"title":{},"name":{},"text":{"1":{}},"component":{}}],["well",{"_index":1141,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}],["wherev",{"_index":94,"title":{},"name":{},"text":{"5":{},"30":{},"34":{},"59":{},"81":{},"93":{},"100":{},"106":{},"131":{},"142":{},"144":{},"160":{}},"component":{}}],["whether",{"_index":279,"title":{},"name":{},"text":{"16":{},"20":{},"52":{},"53":{},"72":{},"73":{},"120":{},"124":{},"125":{},"138":{},"153":{},"154":{}},"component":{}}],["whilst",{"_index":1472,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["whole_word_match",{"_index":1022,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["wide",{"_index":1435,"title":{},"name":{"63":{},"85":{},"135":{},"164":{}},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["wider",{"_index":1476,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["william",{"_index":1426,"title":{},"name":{},"text":{"62":{},"84":{},"134":{},"163":{}},"component":{}}],["window",{"_index":781,"title":{"41":{},"42":{},"43":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{}},"name":{"41":{},"42":{},"43":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{}},"text":{"41":{},"42":{},"43":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{}},"component":{}}],["window’",{"_index":853,"title":{},"name":{},"text":{"42":{},"43":{},"87":{},"88":{},"103":{},"104":{},"109":{},"110":{}},"component":{}}],["winkler",{"_index":1001,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["within",{"_index":579,"title":{},"name":{},"text":{"30":{},"34":{},"35":{},"59":{},"61":{},"70":{},"81":{},"83":{},"89":{},"95":{},"131":{},"133":{},"144":{},"160":{},"162":{}},"component":{}}],["without",{"_index":206,"title":{"58":{},"80":{},"130":{},"159":{}},"name":{"58":{},"80":{},"130":{},"159":{}},"text":{"15":{},"19":{},"30":{},"34":{},"58":{},"59":{},"80":{},"81":{},"119":{},"130":{},"131":{},"137":{},"144":{},"159":{},"160":{}},"component":{}}],["word",{"_index":1255,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["work",{"_index":1211,"title":{},"name":{},"text":{"52":{},"55":{},"58":{},"72":{},"77":{},"80":{},"124":{},"127":{},"130":{},"153":{},"156":{},"159":{}},"component":{}}],["workload",{"_index":1440,"title":{},"name":{},"text":{"63":{},"85":{},"135":{},"164":{}},"component":{}}],["world",{"_index":1354,"title":{},"name":{},"text":{"57":{},"79":{},"129":{},"158":{}},"component":{}}],["write",{"_index":49,"title":{},"name":{},"text":{"4":{},"16":{},"20":{},"24":{},"27":{},"31":{},"33":{},"37":{},"49":{},"61":{},"62":{},"69":{},"75":{},"83":{},"84":{},"90":{},"92":{},"94":{},"97":{},"99":{},"105":{},"115":{},"117":{},"120":{},"133":{},"134":{},"136":{},"138":{},"141":{},"150":{},"162":{},"163":{}},"component":{}}],["written",{"_index":281,"title":{},"name":{},"text":{"16":{},"20":{},"27":{},"31":{},"115":{},"120":{},"138":{},"141":{}},"component":{}}],["wrong",{"_index":1051,"title":{},"name":{},"text":{"49":{},"52":{},"69":{},"72":{},"117":{},"124":{},"150":{},"153":{}},"component":{}}],["wwm",{"_index":1023,"title":{},"name":{},"text":{"48":{},"68":{},"116":{},"149":{}},"component":{}}],["www",{"_index":457,"title":{},"name":{},"text":{"24":{},"33":{},"37":{},"75":{},"90":{},"94":{},"97":{}},"component":{}}],["x",{"_index":1270,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["xmpnsn",{"_index":1271,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["xmpnsntt",{"_index":1272,"title":{},"name":{},"text":{"54":{},"74":{},"126":{},"155":{}},"component":{}}],["ye",{"_index":928,"title":{},"name":{},"text":{"45":{},"65":{},"112":{},"146":{}},"component":{}}],["year",{"_index":617,"title":{},"name":{},"text":{"30":{},"34":{},"46":{},"59":{},"66":{},"81":{},"113":{},"131":{},"144":{},"147":{},"160":{}},"component":{}}],["year(9",{"_index":938,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["year_c",{"_index":961,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["year_ceil",{"_index":948,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["ymi",{"_index":940,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["ymi_yea",{"_index":962,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["ymi_year_floor",{"_index":954,"title":{},"name":{},"text":{"46":{},"66":{},"113":{},"147":{}},"component":{}}],["yyyi",{"_index":232,"title":{},"name":{},"text":{"15":{},"19":{},"30":{},"34":{},"41":{},"42":{},"43":{},"46":{},"59":{},"66":{},"81":{},"86":{},"87":{},"88":{},"102":{},"103":{},"104":{},"108":{},"109":{},"110":{},"113":{},"119":{},"131":{},"137":{},"144":{},"147":{},"160":{}},"component":{}}],["zealand",{"_index":1089,"title":{},"name":{},"text":{"49":{},"69":{},"117":{},"150":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"Welcome to the Oracle SQL Features page. Here you can learn more about the powerful capabilities of Oracle Database, its SQL and PL/SQL engines and much more. Oracle Database is the #1 multi-model database management system on the market. It is commonly used for traditional and augmented transaction processing, data warehousing, data science exploration and deep learning, streams and event processing, operational intelligence and many more.","title":"Oracle SQL Features","component":"guide","version":"latest","name":"index","url":"/guide/latest/index.html","titles":[]},"2":{"id":2,"text":"JavaScript PL/SQL SQL","title":"Categories","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/index.html","titles":[]},"3":{"id":3,"text":"12.1.0.1 12.1.0.2 21.3 23.2","title":"Versions","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/index.html","titles":[]},"4":{"id":4,"text":"Oracle Database supports a rich set of languages for writing user-defined functions and stored procedures, including PL/SQL, Java, and C. With Oracle Database Multilingual Engine (MLE), developers have the additional option to run JavaScript code starting with Oracle Database 23c.","title":"JavaScript","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/javascript/index.html","titles":[]},"5":{"id":5,"text":"PL/SQL provides a server-side, stored procedural language that is easy-to-use, seamless with SQL, robust, portable, and secure. You can access and manipulate data inside the database using procedural objects called PL/SQL units. PL/SQL units generally are categorized as follows: A PL/SQL subprogram is a PL/SQL block that is stored in the database and can be called by name from an application. When you create a subprogram, the database parses the subprogram and stores its parsed representation in the database. You can declare a subprogram as a procedure or a function. A PL/SQL anonymous block is a PL/SQL block that appears in your application and is not named or stored in the database. In many applications, PL/SQL blocks can appear wherever SQL statements can appear. PL/SQL includes procedural language elements such as conditions and loops and can handle exceptions. It allows declaration of constants, variables, procedures, functions, packages, types and variables of those types, and triggers. Arrays are supported via the use of PL/SQL collections. For more information about PL/SQL see Overview of PL/SQL.","title":"PL/SQL","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/plsql/index.html","titles":[]},"6":{"id":6,"text":"SQL is the set-based, high-level declarative (4GL) computer language with which all programs and users access data in a relational database. SQL unifies tasks such as the following in one consistent language: Creating, replacing, altering, and dropping objects Inserting, updating, and deleting table rows Querying and analyzing data Controlling access to the database and its objects Guaranteeing database consistency and integrity SQL became a standard of the American National Standards Institute (ANSI) in 1986 and of the International Organization for Standardization (ISO) in 1987. Oracle SQL includes many extensions to the ANSI/ISO standard SQL language, and Oracle Database tools and applications provide additional statements. For more information about SQL see SQL Language Reference.","title":"SQL","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/sql/index.html","titles":[]},"7":{"id":7,"text":"Oracle Database 12c Release 1 was first released in July 2013. Multitenant Architecture Automatic Data Optimization Data Guard Far Sync Privilege Analysis Application Continuity SQL Pattern Matching For more information about all the new features in this release, see Oracle Database 12c Release 1 (12.1.0.1) New Features.","title":"12.1.0.1","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/12.1.0.1/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"8":{"id":8,"text":"Oracle Database 12c Release 1 Patchset 2 was first released in July 2014. JSON support In-Memory Column Store Advanced Index Compression For more information about all the new features in this release, see Oracle Database 12c Release 1 (12.1.0.2) New Features.","title":"12.1.0.2","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/12.1.0.2/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"9":{"id":9,"text":"Oracle Database 21c was first released in August 2021. JSON Data Type Blockchain Tables SQL Macros Enhanced Analytic Functions For more information about all the new features in this release, see Oracle Database 21c New Features.","title":"21.3","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/21.3/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"10":{"id":10,"text":"Oracle Database 23c was first released in April 2023 via Oracle Database 23c Free – Developer Release. JSON Relational Duality JSON Schemas JavaScript Stored Procedures Operational Property Graphs (SQL/PGQ) Schema-level Privileges Domains Annotations Lock-Free Reservations For more information about all the new features in this release, see Oracle Database 23c New Features.","title":"23.2","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/23.2/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"11":{"id":11,"text":"Oracle Database 12c Release 1 was first released in July 2013. Multitenant Architecture Automatic Data Optimization Data Guard Far Sync Privilege Analysis Application Continuity SQL Pattern Matching For more information about all the new features in this release, see Oracle Database 12c Release 1 (12.1.0.1) New Features.","title":"12.1.0.1","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/javascript/12.1.0.1/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"12":{"id":12,"text":"Oracle Database 12c Release 1 Patchset 2 was first released in July 2014. JSON support In-Memory Column Store Advanced Index Compression For more information about all the new features in this release, see Oracle Database 12c Release 1 (12.1.0.2) New Features.","title":"12.1.0.2","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/javascript/12.1.0.2/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"13":{"id":13,"text":"Oracle Database 21c was first released in August 2021. JSON Data Type Blockchain Tables SQL Macros Enhanced Analytic Functions For more information about all the new features in this release, see Oracle Database 21c New Features.","title":"21.3","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/javascript/21.3/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"14":{"id":14,"text":"Oracle Database 23c was first released in April 2023 via Oracle Database 23c Free – Developer Release. JSON Relational Duality JSON Schemas JavaScript Stored Procedures Operational Property Graphs (SQL/PGQ) Schema-level Privileges Domains Annotations Lock-Free Reservations For more information about all the new features in this release, see Oracle Database 23c New Features.","title":"23.2","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/javascript/23.2/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"15":{"id":15,"text":"Version 23.2 Categories JavaScript Inlined JavaScript procedures allow you to embed JavaScript code directly in the CREATE FUNCTION and CREATE PROCEDURE statements without the need of creating a module first. If you want to implement a less complex JavaScript feature quickly, inlined procedures and functions are a good choice. The following example coverts seconds-since-epoch to an Oracle Date. create or replace function epoch_to_Date ( P_EPOCH number ) return date as mle language javascript q'~ let d = new Date(0); d.setUTCSeconds(P_EPOCH); return d; ~'; / select to_char( epoch_to_date(1684758614), 'yyyy-mm-dd hh24:mi:ss' ) the_date; Result SQL> create or replace function epoch_to_date ( 2 P_EPOCH number 3 ) return date 4 as mle language javascript 5 q'~ 6 let d = new Date(0); 7 d.setUTCSeconds(P_EPOCH); 8 9 return d; 10 ~'; 11 / Function created. SQL> SQL> select 2 to_char( 3 epoch_to_date(1684758614), 4 'yyyy-mm-dd hh24:mi:ss' 5 ) the_date; THE_DATE ------------------- 2023-05-22 12:30:14 Inline JavaScript functions and procedures are a convenient way of exposing functionality in JavaScript to SQL and PL/SQL. You aren’t limited to using built-in JavaScript objects, you are free to perform any manipulation you like. If more complex processing, including importing 3rd party JavaScript modules is required you should use modules and environments instead. Availability: All Offerings Documentation","title":"Inline JavaScript Procedures","component":"guide","version":"latest","name":"inline-javascript","url":"/guide/latest/categories/javascript/23.2/inline-javascript.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"16":{"id":16,"text":"Version 23.2 Categories JavaScript Writing JavaScript modules and environments are the first steps towards the creation of your application. Once the JavaScript code is ready you can expose it to SQL and PL/SQL thanks to a so-called call specification. A JavaScript call specification consists of the following: the module name an (optional) reference to a environment the (simplified) JavaScript function’s signature as per the module code All client code, regardless whether it’s written in Java, Python, or even with node-oracledb, can access JavaScript stored procedures in the database. The following example demonstrates The creation of a JavaScript module (hello_module) in the current user’s schema featuring a single function named hello() The addition of a call specification f_hello() exposing the JavaScript function to SQL and PL/SQL A sample invocation of the previously defined function create or replace mle module hello_module language javascript as // JavaScript code to follow from here /** * return a friendly greeting * @param {string} who - who should be greeted? * @returns {string} */ export function hello(who) { return 'hello ' + who; } / create or replace function f_hello( p_who varchar2) return varchar2 as mle module hello_module signature 'hello'; / select f_hello('JavaScript'); Result SQL> create or replace mle module hello_module 2 language javascript as 3 4 export function hello(who) { 5 6 return 'hello ' + who; 7 } 8 / MLE module created. SQL> create or replace function f_hello( 2 p_who varchar2) 3 return varchar2 4 as mle module hello_module 5 signature 'hello'; 6 / Function created. SQL> select 2 hello('JavaScript'); HELLO('JAVASCRIPT') ------------------------------------------------------------------------------- hello JavaScript JavaScript Call Specifications expose JavaScript code to SQL and PL/SQL allowing any programming language with a SQL driver to make use of it. In addition to standalone functions and procedures packages can be used to create a container for call specifications originating from the same JavaScript module. Availability: All Offerings Documentation Example Introductory Blog Post","title":"JavaScript Call Specifications","component":"guide","version":"latest","name":"javascript-call-specifications","url":"/guide/latest/categories/javascript/23.2/javascript-call-specifications.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"17":{"id":17,"text":"Version 23.2 Categories JavaScript JavaScript Environments, just like JavaScript modules, are schema objects persisted in the database. They perform a vital function in applications involving multiple JavaScript modules. Unlike node.js or deno projects JavaScript modules aren’t persisted on the file system, they are stored in the database. Developers cannot simply import modules based on their location in the file system, they need to use environments instead. The following example demonstrates the use of environments. create or replace MLE module module_one language javascript as // this function is exported and will be called by // module_2's greeting() function export function hello(who) { return 'hello ' + who; } / create or replace MLE module module_two language javascript as // before module_1's hello() function can be imported a // so-called import name must be defined by means of creating // a JavaScript environment. The module name does not have to // match the import name import { hello } from 'module1' export function greeting() { const who = 'JavaScript'; return hello(who); } / // the mapping between import name and module name is defined // in an environment create or replace mle env example_env imports ( 'module1' module module_one ); // with the module in place it is possible to invoke module_2's // greeting function. Refer to the section about call specifications // for more details about invoking JavaScript code in SQL and PL/SQL create or replace function f_greeting return varchar2 as mle module module_two env example_env signature 'greeting'; / select f_greeting; Result SQL> create or replace MLE module module_one 2 language javascript as 3 4 // this function is exported and will be called by 5 // module_2's greeting() function 6 export function hello(who) { 7 8 return 'hello ' + who; 9 } 10 / MLE module created. SQL> create or replace MLE module module_two 2 language javascript as 3 4 // before module_1's hello() function can be imported a 5 // so-called import name must be defined by means of creating 6 // a JavaScript environment. The module name does not have to 7 // match the import name 8 import { hello } from 'module1' 9 10 export function greeting() { 11 12 const who = 'JavaScript'; 13 return hello(who); 14 } 15 / MLE module created. SQL> -- the mapping between import name and module name is defined SQL> -- in an environment SQL> create or replace mle env example_env 2 imports ( 3 'module1' module module_one 4 ); MLE env created. SQL> -- with the module in place it is possible to invoke module_2's SQL> -- greeting function. Refer to the section about call specifications SQL> -- for more details about invoking JavaScript code in SQL and PL/SQL SQL> create or replace function f_greeting 2 return varchar2 as 3 mle module module_two 4 env example_env 5 signature 'greeting'; 6 / Function created. SQL> -- call the function SQL> select 2 f_greeting; F_GREETING ------------------------------------------------------------------------------- hello JavaScript JavaScript Environments play a crucial role during the development of JavaScript stored procedures. They are most useful providing means to map an import name as used in a JavaScript module to the actual module itself. Furthermore they are essential entities for the definition of call specifications. Availability: All Offerings Documentation Blog post","title":"JavaScript Environments","component":"guide","version":"latest","name":"javascript-environments","url":"/guide/latest/categories/javascript/23.2/javascript-environments.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"18":{"id":18,"text":"Version 23.2 Categories JavaScript A JavaScript module is the equivalent of an ECMAScript module commonly found in node.js and deno projects, but instead of storing it in a file in a file system it is persisted as a schema object in the database. JavaScript modules can either be provided by the community, or they can consist of specific, custom application code. JavaScript modules can reference functionality from other JavaScript modules allowing you to build complex applications that are easier to maintain. Just as Java stored procedures JavaScript code can be made available to SQL and PL/SQL by means of a call specification. The following example demonstrates the creation of a JavaScript module with the code provided inline with the module definition. create or replace mle module example_module language javascript as // this is where the JavaScript code section begins /** * convert a delimited string into key-value pairs and return JSON * @param {string} inputString - the input string to be converted * @returns {JSON} */ function string2obj(inputString) { if ( inputString === undefined ) { throw `string must comply with a form of key1=value1;...;keyN=valueN`; } let myObject = {}; if ( inputString.length === 0 ) { return myObject; } const kvPairs = inputString.split(\";\"); kvPairs.forEach( pair => { const tuple = pair.split(\"=\"); if ( tuple.length === 1 ) { tuple[1] = false; } else if ( tuple.length != 2 ) { throw \"parse error: you need to use exactly one '=' between \" + \"key and value and not use '=' in either key or value\"; } myObject[tuple[0]] = tuple[1]; }); return myObject; } /** * convert a JavaScript object to a string * @param {object} inputObject - the object to transform to a string * @returns {string} */ function obj2String(inputObject) { if ( typeof inputObject != 'object' ) { throw \"inputObject isn't an object\"; } return JSON.stringify(inputObject); } export { string2obj, obj2String } / Result When executing the above statement in sqlplus or sqlcl you will get a message that the MLE module has been successfully created. Verify the module has been created as follows: select module_name, language_name from user_mle_modules where module_name = 'EXAMPLE_MODULE' MODULE_NAME LANGUAGE_NAME ------------------------------ ------------------------------ EXAMPLE_MODULE JAVASCRIPT You can also view the source code of the JavaScript module: select text from user_source where name = 'EXAMPLE_MODULE' order by line; TEXT -------------------------------------------------------------------------------- // this is where the JavaScript code section begins /** * convert a delimited string into key-value pairs and return JSON * @param {string} inputString - the input string to be converted * @returns {JSON} */ function string2obj(inputString) { if ( inputString === undefined ) { throw `string must comply with a form of key1=value1;...;keyN=valueN`; } let myObject = {}; if ( inputString.length === 0 ) { return myObject; } const kvPairs = inputString.split(\";\"); kvPairs.forEach( pair => { const tuple = pair.split(\"=\"); if ( tuple.length === 1 ) { tuple[1] = false; } else if ( tuple.length != 2 ) { throw \"parse error: you need to use exactly one '=' between \" + \"key and value and not use '=' in either key or value\"; } myObject[tuple[0]] = tuple[1]; }); return myObject; } /** * convert a JavaScript object to a string * @param {object} inputObject - the object to transform to a string * @returns {string} */ function obj2String(inputObject) { if ( typeof inputObject != 'object' ) { throw \"inputObject isn't an object\"; } return JSON.stringify(inputObject); } export { string2obj, obj2String } Storing processing logic inside the database rather than in the middle-tier provides numerous advantages especially when it comes to latency, security, auditing, data integrity, and many more. It also helps developers realise the complete database feature set. Availability: All Offerings Documentation Example Feature Introduction","title":"JavaScript Modules","component":"guide","version":"latest","name":"javascript-modules","url":"/guide/latest/categories/javascript/23.2/javascript-modules.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"19":{"id":19,"text":"Version 23.2 Categories JavaScript Inlined JavaScript procedures allow you to embed JavaScript code directly in the CREATE FUNCTION and CREATE PROCEDURE statements without the need of creating a module first. If you want to implement a less complex JavaScript feature quickly, inlined procedures and functions are a good choice. The following example coverts seconds-since-epoch to an Oracle Date. create or replace function epoch_to_Date ( P_EPOCH number ) return date as mle language javascript q'~ let d = new Date(0); d.setUTCSeconds(P_EPOCH); return d; ~'; / select to_char( epoch_to_date(1684758614), 'yyyy-mm-dd hh24:mi:ss' ) the_date; Result SQL> create or replace function epoch_to_date ( 2 P_EPOCH number 3 ) return date 4 as mle language javascript 5 q'~ 6 let d = new Date(0); 7 d.setUTCSeconds(P_EPOCH); 8 9 return d; 10 ~'; 11 / Function created. SQL> SQL> select 2 to_char( 3 epoch_to_date(1684758614), 4 'yyyy-mm-dd hh24:mi:ss' 5 ) the_date; THE_DATE ------------------- 2023-05-22 12:30:14 Inline JavaScript functions and procedures are a convenient way of exposing functionality in JavaScript to SQL and PL/SQL. You aren’t limited to using built-in JavaScript objects, you are free to perform any manipulation you like. If more complex processing, including importing 3rd party JavaScript modules is required you should use modules and environments instead. Availability: All Offerings Documentation","title":"Inline JavaScript Procedures","component":"guide","version":"latest","name":"inline-javascript","url":"/guide/latest/categories/javascript/features/inline-javascript.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"20":{"id":20,"text":"Version 23.2 Categories JavaScript Writing JavaScript modules and environments are the first steps towards the creation of your application. Once the JavaScript code is ready you can expose it to SQL and PL/SQL thanks to a so-called call specification. A JavaScript call specification consists of the following: the module name an (optional) reference to a environment the (simplified) JavaScript function’s signature as per the module code All client code, regardless whether it’s written in Java, Python, or even with node-oracledb, can access JavaScript stored procedures in the database. The following example demonstrates The creation of a JavaScript module (hello_module) in the current user’s schema featuring a single function named hello() The addition of a call specification f_hello() exposing the JavaScript function to SQL and PL/SQL A sample invocation of the previously defined function create or replace mle module hello_module language javascript as // JavaScript code to follow from here /** * return a friendly greeting * @param {string} who - who should be greeted? * @returns {string} */ export function hello(who) { return 'hello ' + who; } / create or replace function f_hello( p_who varchar2) return varchar2 as mle module hello_module signature 'hello'; / select f_hello('JavaScript'); Result SQL> create or replace mle module hello_module 2 language javascript as 3 4 export function hello(who) { 5 6 return 'hello ' + who; 7 } 8 / MLE module created. SQL> create or replace function f_hello( 2 p_who varchar2) 3 return varchar2 4 as mle module hello_module 5 signature 'hello'; 6 / Function created. SQL> select 2 hello('JavaScript'); HELLO('JAVASCRIPT') ------------------------------------------------------------------------------- hello JavaScript JavaScript Call Specifications expose JavaScript code to SQL and PL/SQL allowing any programming language with a SQL driver to make use of it. In addition to standalone functions and procedures packages can be used to create a container for call specifications originating from the same JavaScript module. Availability: All Offerings Documentation Example Introductory Blog Post","title":"JavaScript Call Specifications","component":"guide","version":"latest","name":"javascript-call-specifications","url":"/guide/latest/categories/javascript/features/javascript-call-specifications.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"21":{"id":21,"text":"Version 23.2 Categories JavaScript JavaScript Environments, just like JavaScript modules, are schema objects persisted in the database. They perform a vital function in applications involving multiple JavaScript modules. Unlike node.js or deno projects JavaScript modules aren’t persisted on the file system, they are stored in the database. Developers cannot simply import modules based on their location in the file system, they need to use environments instead. The following example demonstrates the use of environments. create or replace MLE module module_one language javascript as // this function is exported and will be called by // module_2's greeting() function export function hello(who) { return 'hello ' + who; } / create or replace MLE module module_two language javascript as // before module_1's hello() function can be imported a // so-called import name must be defined by means of creating // a JavaScript environment. The module name does not have to // match the import name import { hello } from 'module1' export function greeting() { const who = 'JavaScript'; return hello(who); } / // the mapping between import name and module name is defined // in an environment create or replace mle env example_env imports ( 'module1' module module_one ); // with the module in place it is possible to invoke module_2's // greeting function. Refer to the section about call specifications // for more details about invoking JavaScript code in SQL and PL/SQL create or replace function f_greeting return varchar2 as mle module module_two env example_env signature 'greeting'; / select f_greeting; Result SQL> create or replace MLE module module_one 2 language javascript as 3 4 // this function is exported and will be called by 5 // module_2's greeting() function 6 export function hello(who) { 7 8 return 'hello ' + who; 9 } 10 / MLE module created. SQL> create or replace MLE module module_two 2 language javascript as 3 4 // before module_1's hello() function can be imported a 5 // so-called import name must be defined by means of creating 6 // a JavaScript environment. The module name does not have to 7 // match the import name 8 import { hello } from 'module1' 9 10 export function greeting() { 11 12 const who = 'JavaScript'; 13 return hello(who); 14 } 15 / MLE module created. SQL> -- the mapping between import name and module name is defined SQL> -- in an environment SQL> create or replace mle env example_env 2 imports ( 3 'module1' module module_one 4 ); MLE env created. SQL> -- with the module in place it is possible to invoke module_2's SQL> -- greeting function. Refer to the section about call specifications SQL> -- for more details about invoking JavaScript code in SQL and PL/SQL SQL> create or replace function f_greeting 2 return varchar2 as 3 mle module module_two 4 env example_env 5 signature 'greeting'; 6 / Function created. SQL> -- call the function SQL> select 2 f_greeting; F_GREETING ------------------------------------------------------------------------------- hello JavaScript JavaScript Environments play a crucial role during the development of JavaScript stored procedures. They are most useful providing means to map an import name as used in a JavaScript module to the actual module itself. Furthermore they are essential entities for the definition of call specifications. Availability: All Offerings Documentation Blog post","title":"JavaScript Environments","component":"guide","version":"latest","name":"javascript-environments","url":"/guide/latest/categories/javascript/features/javascript-environments.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"22":{"id":22,"text":"Version 23.2 Categories JavaScript A JavaScript module is the equivalent of an ECMAScript module commonly found in node.js and deno projects, but instead of storing it in a file in a file system it is persisted as a schema object in the database. JavaScript modules can either be provided by the community, or they can consist of specific, custom application code. JavaScript modules can reference functionality from other JavaScript modules allowing you to build complex applications that are easier to maintain. Just as Java stored procedures JavaScript code can be made available to SQL and PL/SQL by means of a call specification. The following example demonstrates the creation of a JavaScript module with the code provided inline with the module definition. create or replace mle module example_module language javascript as // this is where the JavaScript code section begins /** * convert a delimited string into key-value pairs and return JSON * @param {string} inputString - the input string to be converted * @returns {JSON} */ function string2obj(inputString) { if ( inputString === undefined ) { throw `string must comply with a form of key1=value1;...;keyN=valueN`; } let myObject = {}; if ( inputString.length === 0 ) { return myObject; } const kvPairs = inputString.split(\";\"); kvPairs.forEach( pair => { const tuple = pair.split(\"=\"); if ( tuple.length === 1 ) { tuple[1] = false; } else if ( tuple.length != 2 ) { throw \"parse error: you need to use exactly one '=' between \" + \"key and value and not use '=' in either key or value\"; } myObject[tuple[0]] = tuple[1]; }); return myObject; } /** * convert a JavaScript object to a string * @param {object} inputObject - the object to transform to a string * @returns {string} */ function obj2String(inputObject) { if ( typeof inputObject != 'object' ) { throw \"inputObject isn't an object\"; } return JSON.stringify(inputObject); } export { string2obj, obj2String } / Result When executing the above statement in sqlplus or sqlcl you will get a message that the MLE module has been successfully created. Verify the module has been created as follows: select module_name, language_name from user_mle_modules where module_name = 'EXAMPLE_MODULE' MODULE_NAME LANGUAGE_NAME ------------------------------ ------------------------------ EXAMPLE_MODULE JAVASCRIPT You can also view the source code of the JavaScript module: select text from user_source where name = 'EXAMPLE_MODULE' order by line; TEXT -------------------------------------------------------------------------------- // this is where the JavaScript code section begins /** * convert a delimited string into key-value pairs and return JSON * @param {string} inputString - the input string to be converted * @returns {JSON} */ function string2obj(inputString) { if ( inputString === undefined ) { throw `string must comply with a form of key1=value1;...;keyN=valueN`; } let myObject = {}; if ( inputString.length === 0 ) { return myObject; } const kvPairs = inputString.split(\";\"); kvPairs.forEach( pair => { const tuple = pair.split(\"=\"); if ( tuple.length === 1 ) { tuple[1] = false; } else if ( tuple.length != 2 ) { throw \"parse error: you need to use exactly one '=' between \" + \"key and value and not use '=' in either key or value\"; } myObject[tuple[0]] = tuple[1]; }); return myObject; } /** * convert a JavaScript object to a string * @param {object} inputObject - the object to transform to a string * @returns {string} */ function obj2String(inputObject) { if ( typeof inputObject != 'object' ) { throw \"inputObject isn't an object\"; } return JSON.stringify(inputObject); } export { string2obj, obj2String } Storing processing logic inside the database rather than in the middle-tier provides numerous advantages especially when it comes to latency, security, auditing, data integrity, and many more. It also helps developers realise the complete database feature set. Availability: All Offerings Documentation Example Feature Introduction","title":"JavaScript Modules","component":"guide","version":"latest","name":"javascript-modules","url":"/guide/latest/categories/javascript/features/javascript-modules.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"23":{"id":23,"text":"Oracle Database 12c Release 1 was first released in July 2013. Multitenant Architecture Automatic Data Optimization Data Guard Far Sync Privilege Analysis Application Continuity SQL Pattern Matching For more information about all the new features in this release, see Oracle Database 12c Release 1 (12.1.0.1) New Features.","title":"12.1.0.1","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/plsql/12.1.0.1/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"24":{"id":24,"text":"Version 12.1.0.1 Categories SQL, PL/SQL This feature enables users to write anonymous PL/SQL functions for the lifetime of a SQL query. The PL/SQL functions can be specified in the WITH clause (Common Table Expression (CTE)) and then referenced in one or many SQL queries below. This example demonstrates how to leverage two anonymous PL/SQL functions with in a SQL statement: The capitalize function capitalizes the first letter of the input string. The get_domain_name function retrieves the domain name from a URL. WITH -- Function to capitalize input string FUNCTION capitalize ( p_string VARCHAR2 ) RETURN VARCHAR2 IS BEGIN RETURN CONCAT(UPPER(SUBSTR(p_string,1,1)), SUBSTR(p_string,2)); END; -- Function to retrieve the domain name from a URL FUNCTION get_domain_name ( p_url VARCHAR2, p_sub_domain VARCHAR2 DEFAULT 'www.' ) RETURN VARCHAR2 IS v_begin_pos BINARY_INTEGER; v_length BINARY_INTEGER; BEGIN v_begin_pos := INSTR(p_url, p_sub_domain) + LENGTH(p_sub_domain); v_length := INSTR(SUBSTR(p_url, v_begin_pos), '.') - 1; RETURN SUBSTR(p_url, v_begin_pos, v_length); END; -- SQL statement SELECT capitalize(name) as name, capitalize(get_domain_name(url)) AS domain_name, url FROM products; Result SQL> WITH 2 -- Function to capitalize input string 3 FUNCTION capitalize 4 ( 5 p_string VARCHAR2 6 ) 7 RETURN VARCHAR2 8 IS 9 BEGIN 10 RETURN CONCAT(UPPER(SUBSTR(p_string,1,1)), SUBSTR(p_string,2)); 11 END; 12 -- Function to retrieve the domain name from a URL 13 FUNCTION get_domain_name 14 ( 15 p_url VARCHAR2, 16 p_sub_domain VARCHAR2 DEFAULT 'www.' 17 ) 18 RETURN VARCHAR2 19 IS 20 v_begin_pos BINARY_INTEGER; 21 v_length BINARY_INTEGER; 22 BEGIN 23 v_begin_pos := INSTR(p_url, p_sub_domain) + LENGTH(p_sub_domain); 24 v_length := INSTR(SUBSTR(p_url, v_begin_pos), '.') - 1; 25 RETURN SUBSTR(p_url, v_begin_pos, v_length); 26 END; 27 -- SQL statement 28 SELECT capitalize(name) as name, capitalize(get_domain_name(url)) AS domain_name, url 29 FROM products; 30 / NAME DOMAIN_NAME URL ________________________________ ______________ _______________________________________________________________________________________ AirPods Pro (2nd gen) Apple https://www.apple.com/shop/product/MQD83AM/A/airpods-pro SanDisk - Ultra 512GB USB 3.0 Bestbuy https://www.bestbuy.com/site/sandisk-ultra-512gb-usb-3-0-flash-drive-black/6422265.p Being able to run anonymous PL/SQL function with SQL statements can be useful where processing through PL/SQL is required or wanted but the user does either not have the necessary privileges to create a named function or does not want to reuse the function. Availability: All Offerings Documentation Example","title":"PL/SQL Function in SQL","component":"guide","version":"latest","name":"plsql-function-in-sql","url":"/guide/latest/categories/plsql/12.1.0.1/plsql-function-in-sql.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"25":{"id":25,"text":"Oracle Database 12c Release 1 Patchset 2 was first released in July 2014. JSON support In-Memory Column Store Advanced Index Compression For more information about all the new features in this release, see Oracle Database 12c Release 1 (12.1.0.2) New Features.","title":"12.1.0.2","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/plsql/12.1.0.2/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"26":{"id":26,"text":"Oracle Database 21c was first released in August 2021. JSON Data Type Blockchain Tables SQL Macros Enhanced Analytic Functions For more information about all the new features in this release, see Oracle Database 21c New Features.","title":"21.3","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/plsql/21.3/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"27":{"id":27,"text":"Version 23.2 Categories PL/SQL The CASE statement is extended in PL/SQL to be consistent with the updated definitions of CASE expressions and CASE statements in the SQL:2003 Standard [ISO03a, ISO03b]. At the time of writing there is no SQL equivalent of the extended PL/SQL CASE statement. begin -- example 01: assign grades to result percentages for inx in -1, 19, 50, 75, 99, null loop dbms_output.put_line ( nvl ( to_char ( inx ), 'null' ) || ' = ' || case inx when 100 then 'invalid result' when is null then 'no result' when between 90 and 100 then 'A' when >= 80 then 'B' when >= 70 then 'C' when >= 60 then 'D' when >= 50 then 'E' else 'fail' end ); end loop; end; / Result SQL> begin 2 -- example 01: assign grades to result percentages 3 for inx in -1, 19, 50, 75, 99, null loop 4 dbms_output.put_line ( 5 nvl ( to_char ( inx ), 'null' ) || ' = ' || 6 case inx 7 when 100 then 'invalid result' 8 when is null then 'no result' 9 when between 90 and 100 then 'A' 10 when >= 80 then 'B' 11 when >= 70 then 'C' 12 when >= 60 then 'D' 13 when >= 50 then 'E' 14 else 'fail' 15 end 16 ); 17 end loop; 18 end; 19 / -1 = invalid result 19 = fail 50 = E 75 = C 99 = A null = no result PL/SQL procedure successfully completed. Dangling predicates allow tests other than equality to be performed in simple CASE operations. Multiple choices in WHEN clauses allow CASE operations in PL/SQL to be written with less duplicated code. Availability: All Offerings Database PL/SQL Language Reference","title":"Extended CASE Controls","component":"guide","version":"latest","name":"extended-case-controls","url":"/guide/latest/categories/plsql/23.2/extended-case-controls.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"28":{"id":28,"text":"Oracle Database 23c was first released in April 2023 via Oracle Database 23c Free – Developer Release. JSON Relational Duality JSON Schemas JavaScript Stored Procedures Operational Property Graphs (SQL/PGQ) Schema-level Privileges Domains Annotations Lock-Free Reservations For more information about all the new features in this release, see Oracle Database 23c New Features.","title":"23.2","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/plsql/23.2/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"29":{"id":29,"text":"Version 23.2 Categories PL/SQL The JSON constructor can now accept a PL/SQL array or record type and return a JSON object or array populated with the aggregate type data. Conversely, the built-in function json_value now supports PL/SQL array and record types in the RETURNING clause, mapping from JSON to the specified aggregate type. declare type money_rec is record ( currency_code char(3), amount number ); type country_price_arr is table of money_rec index by varchar2(2); country_prices country_price_arr; price_json json; begin country_prices := country_price_arr ( 'US' => money_rec ( 'USD', 9.99 ), 'GB' => money_rec ( 'GBP', 8.99 ), 'DE' => money_rec ( 'EUR', 8.99 ), 'IN' => money_rec ( 'INR', 849 ) ); /* Automatically convert PL/SQL types to JSON by passing to JSON constructor */ price_json := json ( country_prices ); dbms_output.put_line ( json_serialize ( price_json returning clob pretty ) ); for country, price in pairs of /* Convert JSON to PL/SQL types with JSON_value */ json_value ( price_json, '$' returning country_price_arr ) loop dbms_output.put_line ( country || ' = ' || price.currency_code || to_char ( price.amount, '990.00' ) ); end loop; end; / Result SQL> declare 2 type money_rec is record ( 3 currency_code char(3), 4 amount number 5 ); 6 7 type country_price_arr is table of money_rec 8 index by varchar2(2); 9 10 country_prices country_price_arr; 11 price_json json; 12 begin 13 country_prices := country_price_arr ( 14 'US' => money_rec ( 'USD', 9.99 ), 15 'GB' => money_rec ( 'GBP', 8.99 ), 16 'DE' => money_rec ( 'EUR', 8.99 ), 17 'IN' => money_rec ( 'INR', 849 ) 18 ); 19 20 /* Automatically convert PL/SQL types to JSON by passing to JSON constructor */ 21 price_json := json ( country_prices ); 22 23 dbms_output.put_line ( json_serialize ( price_json returning clob pretty ) ); 24 25 for country, price in pairs of 26 /* Convert JSON to PL/SQL types with JSON_value */ 27 json_value ( price_json, '$' returning country_price_arr ) 28 loop 29 dbms_output.put_line ( 30 country || ' = ' || price.currency_code || to_char ( price.amount, '990.00' ) 31 ); 32 end loop; 33 end; 34 / { \"DE\" : { \"CURRENCY_CODE\" : \"EUR\", \"AMOUNT\" : 8.99 }, \"GB\" : { \"CURRENCY_CODE\" : \"GBP\", \"AMOUNT\" : 8.99 }, \"IN\" : { \"CURRENCY_CODE\" : \"INR\", \"AMOUNT\" : 849 }, \"US\" : { \"CURRENCY_CODE\" : \"USD\", \"AMOUNT\" : 9.99 } } DE = EUR 8.99 GB = GBP 8.99 IN = INR 849.00 US = USD 9.99 PL/SQL to JSON type mappings enables you to convert JSON to PL/SQL types and back using built-in functions. Availability: All Offerings PL/SQL and JSON Type Conversions Documentation","title":"PL/SQL and JSON type conversions","component":"guide","version":"latest","name":"json-plsql-type-conversions","url":"/guide/latest/categories/plsql/23.2/json-plsql-type-conversions.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"30":{"id":30,"text":"Version 23.2 Categories SQL, PL/SQL The SQL Transpiler automatically and wherever possible converts (transpiles) PL/SQL functions within SQL into SQL expressions, without user intervention. create table employees ( employee_id integer primary key, first_name varchar2(100), last_name varchar2(100), hire_date date ); insert into employees (employee_id,first_name,last_name,hire_date) values (100,'Steven','King',to_date('17-JUN-2013 00:00','DD-MON-YYYY HH24:MI')), (101,'Neena','Yang',to_date('21-SEP-2015 00:00','DD-MON-YYYY HH24:MI')), (102,'Lex','Garcia',to_date('13-JAN-2011 00:00','DD-MON-YYYY HH24:MI')), (103,'Alexander','James',to_date('03-JAN-2016 00:00','DD-MON-YYYY HH24:MI')), (104,'Bruce','Miller',to_date('21-MAY-2017 00:00','DD-MON-YYYY HH24:MI')), (105,'David','Williams',to_date('25-JUN-2015 00:00','DD-MON-YYYY HH24:MI')), (106,'Valli','Jackson',to_date('05-FEB-2016 00:00','DD-MON-YYYY HH24:MI')), (107,'Diana','Nguyen',to_date('07-FEB-2017 00:00','DD-MON-YYYY HH24:MI')), (108,'Nancy','Gruenberg',to_date('17-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), (109,'Daniel','Faviet',to_date('16-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), (110,'John','Chen',to_date('28-SEP-2015 00:00','DD-MON-YYYY HH24:MI')); create or replace function get_year ( dt date ) return number as begin return extract ( year from dt ); end get_year; / set serveroutput off -- This disables the transpiler; it is disabled by default alter session set sql_transpiler = 'OFF'; select count (*) from employees where get_year ( hire_date ) = 2015; -- With the transpiler disabled, the predicate is the function call GET_YEAR select * from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); -- Enable the automatic SQL transpiler alter session set sql_transpiler = 'ON'; -- With the transpiler enabled, the expression in the function is extracted -- the predicate is now EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\")) -- => no SQL <> PL/SQL runtime context switch select count (*) from employees where get_year ( hire_date ) = 2017; select * from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); Result SQL> create table employees ( 2 employee_id integer primary key, 3 first_name varchar2(100), 4 last_name varchar2(100), 5 hire_date date 6 ); Table EMPLOYEES created. SQL> SQL> insert into employees (employee_id,first_name,last_name,hire_date) 2 values (100,'Steven','King',to_date('17-JUN-2013 00:00','DD-MON-YYYY HH24:MI')), 3 (101,'Neena','Yang',to_date('21-SEP-2015 00:00','DD-MON-YYYY HH24:MI')), 4 (102,'Lex','Garcia',to_date('13-JAN-2011 00:00','DD-MON-YYYY HH24:MI')), 5 (103,'Alexander','James',to_date('03-JAN-2016 00:00','DD-MON-YYYY HH24:MI')), 6 (104,'Bruce','Miller',to_date('21-MAY-2017 00:00','DD-MON-YYYY HH24:MI')), 7 (105,'David','Williams',to_date('25-JUN-2015 00:00','DD-MON-YYYY HH24:MI')), 8 (106,'Valli','Jackson',to_date('05-FEB-2016 00:00','DD-MON-YYYY HH24:MI')), 9 (107,'Diana','Nguyen',to_date('07-FEB-2017 00:00','DD-MON-YYYY HH24:MI')), 10 (108,'Nancy','Gruenberg',to_date('17-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), 11 (109,'Daniel','Faviet',to_date('16-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), 12 (110,'John','Chen',to_date('28-SEP-2015 00:00','DD-MON-YYYY HH24:MI')); 11 rows inserted. SQL> SQL> SQL> create or replace function get_year ( dt date ) 2 return number as 3 begin 4 return extract ( year from dt ); 5 end get_year; 6 / Function GET_YEAR compiled SQL> SQL> set serveroutput off SQL> -- This disables the transpiler; it is disabled by default SQL> alter session set sql_transpiler = 'OFF'; Session altered. SQL> SQL> select count (*) from employees 2 where get_year ( hire_date ) = 2015; COUNT(*) ---------- 3 SQL> SQL> -- With the transpiler disabled, the predicate is the function call GET_YEAR SQL> select * 2 from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); PLAN_TABLE_OUTPUT ---------------------------------------------------------------------------- EXPLAINED SQL STATEMENT: ------------------------ select count (*) from employees where get_year ( hire_date ) = 2015 Plan hash value: 1756381138 ---------------------------------------- | Id | Operation | Name | ---------------------------------------- | 0 | SELECT STATEMENT | | | 1 | SORT AGGREGATE | | |* 2 | TABLE ACCESS FULL| EMPLOYEES | ---------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 2 - filter(\"GET_YEAR\"(\"HIRE_DATE\")=2015) 19 rows selected. SQL> SQL> -- Enable the automatic SQL transpiler SQL> alter session set sql_transpiler = 'ON'; Session altered. SQL> SQL> -- With the transpiler enabled, the expression in the function is extracted SQL> -- the predicate is now EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\")) SQL> -- => no SQL <> PL/SQL runtime context switch SQL> select count (*) from employees 2 where get_year ( hire_date ) = 2017; COUNT(*) ---------- 2 SQL> SQL> select * 2 from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); PLAN_TABLE_OUTPUT -------------------------------------------------------------------------- EXPLAINED SQL STATEMENT: ------------------------ select count (*) from employees where get_year ( hire_date ) = 2017 Plan hash value: 1756381138 ---------------------------------------- | Id | Operation | Name | ---------------------------------------- | 0 | SELECT STATEMENT | | | 1 | SORT AGGREGATE | | |* 2 | TABLE ACCESS FULL| EMPLOYEES | ---------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 2 - filter(EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\"))=2017) 19 rows selected. The conversion operation is transparent to users and can improve performance by reducing overhead accrued from switching between the SQL and PL/SQL runtime. Availability: All Offerings SQL Tuning Guide","title":"SQL Transpiler","component":"guide","version":"latest","name":"sql-transpiler","url":"/guide/latest/categories/plsql/23.2/sql-transpiler.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"31":{"id":31,"text":"Version 23.2 Categories PL/SQL The CASE statement is extended in PL/SQL to be consistent with the updated definitions of CASE expressions and CASE statements in the SQL:2003 Standard [ISO03a, ISO03b]. At the time of writing there is no SQL equivalent of the extended PL/SQL CASE statement. begin -- example 01: assign grades to result percentages for inx in -1, 19, 50, 75, 99, null loop dbms_output.put_line ( nvl ( to_char ( inx ), 'null' ) || ' = ' || case inx when 100 then 'invalid result' when is null then 'no result' when between 90 and 100 then 'A' when >= 80 then 'B' when >= 70 then 'C' when >= 60 then 'D' when >= 50 then 'E' else 'fail' end ); end loop; end; / Result SQL> begin 2 -- example 01: assign grades to result percentages 3 for inx in -1, 19, 50, 75, 99, null loop 4 dbms_output.put_line ( 5 nvl ( to_char ( inx ), 'null' ) || ' = ' || 6 case inx 7 when 100 then 'invalid result' 8 when is null then 'no result' 9 when between 90 and 100 then 'A' 10 when >= 80 then 'B' 11 when >= 70 then 'C' 12 when >= 60 then 'D' 13 when >= 50 then 'E' 14 else 'fail' 15 end 16 ); 17 end loop; 18 end; 19 / -1 = invalid result 19 = fail 50 = E 75 = C 99 = A null = no result PL/SQL procedure successfully completed. Dangling predicates allow tests other than equality to be performed in simple CASE operations. Multiple choices in WHEN clauses allow CASE operations in PL/SQL to be written with less duplicated code. Availability: All Offerings Database PL/SQL Language Reference","title":"Extended CASE Controls","component":"guide","version":"latest","name":"extended-case-controls","url":"/guide/latest/categories/plsql/features/extended-case-controls.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"32":{"id":32,"text":"Version 23.2 Categories PL/SQL The JSON constructor can now accept a PL/SQL array or record type and return a JSON object or array populated with the aggregate type data. Conversely, the built-in function json_value now supports PL/SQL array and record types in the RETURNING clause, mapping from JSON to the specified aggregate type. declare type money_rec is record ( currency_code char(3), amount number ); type country_price_arr is table of money_rec index by varchar2(2); country_prices country_price_arr; price_json json; begin country_prices := country_price_arr ( 'US' => money_rec ( 'USD', 9.99 ), 'GB' => money_rec ( 'GBP', 8.99 ), 'DE' => money_rec ( 'EUR', 8.99 ), 'IN' => money_rec ( 'INR', 849 ) ); /* Automatically convert PL/SQL types to JSON by passing to JSON constructor */ price_json := json ( country_prices ); dbms_output.put_line ( json_serialize ( price_json returning clob pretty ) ); for country, price in pairs of /* Convert JSON to PL/SQL types with JSON_value */ json_value ( price_json, '$' returning country_price_arr ) loop dbms_output.put_line ( country || ' = ' || price.currency_code || to_char ( price.amount, '990.00' ) ); end loop; end; / Result SQL> declare 2 type money_rec is record ( 3 currency_code char(3), 4 amount number 5 ); 6 7 type country_price_arr is table of money_rec 8 index by varchar2(2); 9 10 country_prices country_price_arr; 11 price_json json; 12 begin 13 country_prices := country_price_arr ( 14 'US' => money_rec ( 'USD', 9.99 ), 15 'GB' => money_rec ( 'GBP', 8.99 ), 16 'DE' => money_rec ( 'EUR', 8.99 ), 17 'IN' => money_rec ( 'INR', 849 ) 18 ); 19 20 /* Automatically convert PL/SQL types to JSON by passing to JSON constructor */ 21 price_json := json ( country_prices ); 22 23 dbms_output.put_line ( json_serialize ( price_json returning clob pretty ) ); 24 25 for country, price in pairs of 26 /* Convert JSON to PL/SQL types with JSON_value */ 27 json_value ( price_json, '$' returning country_price_arr ) 28 loop 29 dbms_output.put_line ( 30 country || ' = ' || price.currency_code || to_char ( price.amount, '990.00' ) 31 ); 32 end loop; 33 end; 34 / { \"DE\" : { \"CURRENCY_CODE\" : \"EUR\", \"AMOUNT\" : 8.99 }, \"GB\" : { \"CURRENCY_CODE\" : \"GBP\", \"AMOUNT\" : 8.99 }, \"IN\" : { \"CURRENCY_CODE\" : \"INR\", \"AMOUNT\" : 849 }, \"US\" : { \"CURRENCY_CODE\" : \"USD\", \"AMOUNT\" : 9.99 } } DE = EUR 8.99 GB = GBP 8.99 IN = INR 849.00 US = USD 9.99 PL/SQL to JSON type mappings enables you to convert JSON to PL/SQL types and back using built-in functions. Availability: All Offerings PL/SQL and JSON Type Conversions Documentation","title":"PL/SQL and JSON type conversions","component":"guide","version":"latest","name":"json-plsql-type-conversions","url":"/guide/latest/categories/plsql/features/json-plsql-type-conversions.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"33":{"id":33,"text":"Version 12.1.0.1 Categories SQL, PL/SQL This feature enables users to write anonymous PL/SQL functions for the lifetime of a SQL query. The PL/SQL functions can be specified in the WITH clause (Common Table Expression (CTE)) and then referenced in one or many SQL queries below. This example demonstrates how to leverage two anonymous PL/SQL functions with in a SQL statement: The capitalize function capitalizes the first letter of the input string. The get_domain_name function retrieves the domain name from a URL. WITH -- Function to capitalize input string FUNCTION capitalize ( p_string VARCHAR2 ) RETURN VARCHAR2 IS BEGIN RETURN CONCAT(UPPER(SUBSTR(p_string,1,1)), SUBSTR(p_string,2)); END; -- Function to retrieve the domain name from a URL FUNCTION get_domain_name ( p_url VARCHAR2, p_sub_domain VARCHAR2 DEFAULT 'www.' ) RETURN VARCHAR2 IS v_begin_pos BINARY_INTEGER; v_length BINARY_INTEGER; BEGIN v_begin_pos := INSTR(p_url, p_sub_domain) + LENGTH(p_sub_domain); v_length := INSTR(SUBSTR(p_url, v_begin_pos), '.') - 1; RETURN SUBSTR(p_url, v_begin_pos, v_length); END; -- SQL statement SELECT capitalize(name) as name, capitalize(get_domain_name(url)) AS domain_name, url FROM products; Result SQL> WITH 2 -- Function to capitalize input string 3 FUNCTION capitalize 4 ( 5 p_string VARCHAR2 6 ) 7 RETURN VARCHAR2 8 IS 9 BEGIN 10 RETURN CONCAT(UPPER(SUBSTR(p_string,1,1)), SUBSTR(p_string,2)); 11 END; 12 -- Function to retrieve the domain name from a URL 13 FUNCTION get_domain_name 14 ( 15 p_url VARCHAR2, 16 p_sub_domain VARCHAR2 DEFAULT 'www.' 17 ) 18 RETURN VARCHAR2 19 IS 20 v_begin_pos BINARY_INTEGER; 21 v_length BINARY_INTEGER; 22 BEGIN 23 v_begin_pos := INSTR(p_url, p_sub_domain) + LENGTH(p_sub_domain); 24 v_length := INSTR(SUBSTR(p_url, v_begin_pos), '.') - 1; 25 RETURN SUBSTR(p_url, v_begin_pos, v_length); 26 END; 27 -- SQL statement 28 SELECT capitalize(name) as name, capitalize(get_domain_name(url)) AS domain_name, url 29 FROM products; 30 / NAME DOMAIN_NAME URL ________________________________ ______________ _______________________________________________________________________________________ AirPods Pro (2nd gen) Apple https://www.apple.com/shop/product/MQD83AM/A/airpods-pro SanDisk - Ultra 512GB USB 3.0 Bestbuy https://www.bestbuy.com/site/sandisk-ultra-512gb-usb-3-0-flash-drive-black/6422265.p Being able to run anonymous PL/SQL function with SQL statements can be useful where processing through PL/SQL is required or wanted but the user does either not have the necessary privileges to create a named function or does not want to reuse the function. Availability: All Offerings Documentation Example","title":"PL/SQL Function in SQL","component":"guide","version":"latest","name":"plsql-function-in-sql","url":"/guide/latest/categories/plsql/features/plsql-function-in-sql.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"34":{"id":34,"text":"Version 23.2 Categories SQL, PL/SQL The SQL Transpiler automatically and wherever possible converts (transpiles) PL/SQL functions within SQL into SQL expressions, without user intervention. create table employees ( employee_id integer primary key, first_name varchar2(100), last_name varchar2(100), hire_date date ); insert into employees (employee_id,first_name,last_name,hire_date) values (100,'Steven','King',to_date('17-JUN-2013 00:00','DD-MON-YYYY HH24:MI')), (101,'Neena','Yang',to_date('21-SEP-2015 00:00','DD-MON-YYYY HH24:MI')), (102,'Lex','Garcia',to_date('13-JAN-2011 00:00','DD-MON-YYYY HH24:MI')), (103,'Alexander','James',to_date('03-JAN-2016 00:00','DD-MON-YYYY HH24:MI')), (104,'Bruce','Miller',to_date('21-MAY-2017 00:00','DD-MON-YYYY HH24:MI')), (105,'David','Williams',to_date('25-JUN-2015 00:00','DD-MON-YYYY HH24:MI')), (106,'Valli','Jackson',to_date('05-FEB-2016 00:00','DD-MON-YYYY HH24:MI')), (107,'Diana','Nguyen',to_date('07-FEB-2017 00:00','DD-MON-YYYY HH24:MI')), (108,'Nancy','Gruenberg',to_date('17-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), (109,'Daniel','Faviet',to_date('16-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), (110,'John','Chen',to_date('28-SEP-2015 00:00','DD-MON-YYYY HH24:MI')); create or replace function get_year ( dt date ) return number as begin return extract ( year from dt ); end get_year; / set serveroutput off -- This disables the transpiler; it is disabled by default alter session set sql_transpiler = 'OFF'; select count (*) from employees where get_year ( hire_date ) = 2015; -- With the transpiler disabled, the predicate is the function call GET_YEAR select * from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); -- Enable the automatic SQL transpiler alter session set sql_transpiler = 'ON'; -- With the transpiler enabled, the expression in the function is extracted -- the predicate is now EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\")) -- => no SQL <> PL/SQL runtime context switch select count (*) from employees where get_year ( hire_date ) = 2017; select * from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); Result SQL> create table employees ( 2 employee_id integer primary key, 3 first_name varchar2(100), 4 last_name varchar2(100), 5 hire_date date 6 ); Table EMPLOYEES created. SQL> SQL> insert into employees (employee_id,first_name,last_name,hire_date) 2 values (100,'Steven','King',to_date('17-JUN-2013 00:00','DD-MON-YYYY HH24:MI')), 3 (101,'Neena','Yang',to_date('21-SEP-2015 00:00','DD-MON-YYYY HH24:MI')), 4 (102,'Lex','Garcia',to_date('13-JAN-2011 00:00','DD-MON-YYYY HH24:MI')), 5 (103,'Alexander','James',to_date('03-JAN-2016 00:00','DD-MON-YYYY HH24:MI')), 6 (104,'Bruce','Miller',to_date('21-MAY-2017 00:00','DD-MON-YYYY HH24:MI')), 7 (105,'David','Williams',to_date('25-JUN-2015 00:00','DD-MON-YYYY HH24:MI')), 8 (106,'Valli','Jackson',to_date('05-FEB-2016 00:00','DD-MON-YYYY HH24:MI')), 9 (107,'Diana','Nguyen',to_date('07-FEB-2017 00:00','DD-MON-YYYY HH24:MI')), 10 (108,'Nancy','Gruenberg',to_date('17-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), 11 (109,'Daniel','Faviet',to_date('16-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), 12 (110,'John','Chen',to_date('28-SEP-2015 00:00','DD-MON-YYYY HH24:MI')); 11 rows inserted. SQL> SQL> SQL> create or replace function get_year ( dt date ) 2 return number as 3 begin 4 return extract ( year from dt ); 5 end get_year; 6 / Function GET_YEAR compiled SQL> SQL> set serveroutput off SQL> -- This disables the transpiler; it is disabled by default SQL> alter session set sql_transpiler = 'OFF'; Session altered. SQL> SQL> select count (*) from employees 2 where get_year ( hire_date ) = 2015; COUNT(*) ---------- 3 SQL> SQL> -- With the transpiler disabled, the predicate is the function call GET_YEAR SQL> select * 2 from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); PLAN_TABLE_OUTPUT ---------------------------------------------------------------------------- EXPLAINED SQL STATEMENT: ------------------------ select count (*) from employees where get_year ( hire_date ) = 2015 Plan hash value: 1756381138 ---------------------------------------- | Id | Operation | Name | ---------------------------------------- | 0 | SELECT STATEMENT | | | 1 | SORT AGGREGATE | | |* 2 | TABLE ACCESS FULL| EMPLOYEES | ---------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 2 - filter(\"GET_YEAR\"(\"HIRE_DATE\")=2015) 19 rows selected. SQL> SQL> -- Enable the automatic SQL transpiler SQL> alter session set sql_transpiler = 'ON'; Session altered. SQL> SQL> -- With the transpiler enabled, the expression in the function is extracted SQL> -- the predicate is now EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\")) SQL> -- => no SQL <> PL/SQL runtime context switch SQL> select count (*) from employees 2 where get_year ( hire_date ) = 2017; COUNT(*) ---------- 2 SQL> SQL> select * 2 from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); PLAN_TABLE_OUTPUT -------------------------------------------------------------------------- EXPLAINED SQL STATEMENT: ------------------------ select count (*) from employees where get_year ( hire_date ) = 2017 Plan hash value: 1756381138 ---------------------------------------- | Id | Operation | Name | ---------------------------------------- | 0 | SELECT STATEMENT | | | 1 | SORT AGGREGATE | | |* 2 | TABLE ACCESS FULL| EMPLOYEES | ---------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 2 - filter(EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\"))=2017) 19 rows selected. The conversion operation is transparent to users and can improve performance by reducing overhead accrued from switching between the SQL and PL/SQL runtime. Availability: All Offerings SQL Tuning Guide","title":"SQL Transpiler","component":"guide","version":"latest","name":"sql-transpiler","url":"/guide/latest/categories/plsql/features/sql-transpiler.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"35":{"id":35,"text":"Version 12.1.0.1 Categories SQL The identity columns feature can be used to designate one column in the table as the identity for the row. The database will automatically assign an increasing integer value from a sequence generator to the identity column for each subsequent INSERT statement. This feature is sometimes also referred to as autoincrement. This feature is part of the ISO SQL:2016 standard. To declare a column as an identity in a table, use the GENERATED AS IDENTITY column attribute: -- Create a table with the column \"ID\" generated as Identity column CREATE TABLE employees ( id NUMBER GENERATED AS IDENTITY NOT NULL PRIMARY KEY, first_name VARCHAR2(10), last_name VARCHAR2(10) NOT NULL, job_title VARCHAR2(20) NOT NULL ); -- Note the absence of the \"ID\" column in the INSERT statement. -- Although it is a primary key and NOT NULL, the inserts succeed. INSERT INTO employees (first_name, last_name, job_title) VALUES ('Gerald', 'Venzl', 'Developer'); INSERT INTO employees (first_name, last_name, job_title) VALUES ('Andres', 'Almiray', 'Developer'); INSERT INTO employees (first_name, last_name, job_title) VALUES ('Chris', 'Saxon', 'Developer Evangelist'); COMMIT; -- The SELECT statement will show the \"ID\" column with values filled by the generated identity values. SELECT * FROM employees; The identity column provides additional syntax modifiers to: Always generate a new identity value, via GENERATED ALWAYS AS IDENTITY Generate a new identity value if none has been provided, via GENERATED BY DEFAULT Generate a new identity value if one has been provided by evaluates to NULL, via GENERATED BY DEFAULT ON NULL Provide additional identity generation options via GENERATED AS IDENTITY () Result SQL> -- Create a table with the column \"ID\" generated as Identity column SQL> CREATE TABLE employees 2 ( 3 id NUMBER GENERATED AS IDENTITY NOT NULL PRIMARY KEY, 4 first_name VARCHAR2(10), 5 last_name VARCHAR2(10) NOT NULL, 6 job_title VARCHAR2(20) NOT NULL 7 ); Table EMPLOYEES created. SQL> -- Note the absence of the \"ID\" column in the INSERT statement. SQL> -- Although it is a primary key and NOT NULL, the inserts succeed. SQL> INSERT INTO employees (first_name, last_name, job_title) VALUES ('Gerald', 'Venzl', 'Developer'); 1 row inserted. SQL> INSERT INTO employees (first_name, last_name, job_title) VALUES ('Andres', 'Almiray', 'Developer'); 1 row inserted. SQL> INSERT INTO employees (first_name, last_name, job_title) VALUES ('Chris', 'Saxon', 'Developer Evangelist'); 1 row inserted. SQL> COMMIT; Commit complete. SQL> -- The SELECT statement will show the \"ID\" column with values filled by the generated identity values. SQL> SELECT * FROM employees; ID FIRST_NAME LAST_NAME JOB_TITLE -- ---------- --------- -------------------- 1 Gerald Venzl Developer 2 Andres Almiray Developer 3 Chris Saxon Developer Evangelist The first relational normal form dictates that each table has to have a primary key by which a row can be uniquely identified (i.e. only one row exists for a given primary key value). Sometimes data records contain \"natural primary keys\" that uniquely identify themselves, such as the user name for a customer_accounts table, the VIN (Vehicle Identification Number) for a cars table, the driver license id for a driver _licenses table. However, often such natural primary keys do not exist within the data records and need to instead be generated, which is where identity columns can help. Identity columns ensure that the value for a new row will always be unique by using an always incrementing integer value that will never be used twice. Availability: All Offerings Documentation - CREATE TABLE identity_clause Example","title":"Identity Columns","component":"guide","version":"latest","name":"identity-columns","url":"/guide/latest/categories/sql/12.1.0.1/identity-columns.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"36":{"id":36,"text":"Oracle Database 12c Release 1 was first released in July 2013. Multitenant Architecture Automatic Data Optimization Data Guard Far Sync Privilege Analysis Application Continuity SQL Pattern Matching For more information about all the new features in this release, see Oracle Database 12c Release 1 (12.1.0.1) New Features.","title":"12.1.0.1","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/sql/12.1.0.1/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"37":{"id":37,"text":"Version 12.1.0.1 Categories SQL, PL/SQL This feature enables users to write anonymous PL/SQL functions for the lifetime of a SQL query. The PL/SQL functions can be specified in the WITH clause (Common Table Expression (CTE)) and then referenced in one or many SQL queries below. This example demonstrates how to leverage two anonymous PL/SQL functions with in a SQL statement: The capitalize function capitalizes the first letter of the input string. The get_domain_name function retrieves the domain name from a URL. WITH -- Function to capitalize input string FUNCTION capitalize ( p_string VARCHAR2 ) RETURN VARCHAR2 IS BEGIN RETURN CONCAT(UPPER(SUBSTR(p_string,1,1)), SUBSTR(p_string,2)); END; -- Function to retrieve the domain name from a URL FUNCTION get_domain_name ( p_url VARCHAR2, p_sub_domain VARCHAR2 DEFAULT 'www.' ) RETURN VARCHAR2 IS v_begin_pos BINARY_INTEGER; v_length BINARY_INTEGER; BEGIN v_begin_pos := INSTR(p_url, p_sub_domain) + LENGTH(p_sub_domain); v_length := INSTR(SUBSTR(p_url, v_begin_pos), '.') - 1; RETURN SUBSTR(p_url, v_begin_pos, v_length); END; -- SQL statement SELECT capitalize(name) as name, capitalize(get_domain_name(url)) AS domain_name, url FROM products; Result SQL> WITH 2 -- Function to capitalize input string 3 FUNCTION capitalize 4 ( 5 p_string VARCHAR2 6 ) 7 RETURN VARCHAR2 8 IS 9 BEGIN 10 RETURN CONCAT(UPPER(SUBSTR(p_string,1,1)), SUBSTR(p_string,2)); 11 END; 12 -- Function to retrieve the domain name from a URL 13 FUNCTION get_domain_name 14 ( 15 p_url VARCHAR2, 16 p_sub_domain VARCHAR2 DEFAULT 'www.' 17 ) 18 RETURN VARCHAR2 19 IS 20 v_begin_pos BINARY_INTEGER; 21 v_length BINARY_INTEGER; 22 BEGIN 23 v_begin_pos := INSTR(p_url, p_sub_domain) + LENGTH(p_sub_domain); 24 v_length := INSTR(SUBSTR(p_url, v_begin_pos), '.') - 1; 25 RETURN SUBSTR(p_url, v_begin_pos, v_length); 26 END; 27 -- SQL statement 28 SELECT capitalize(name) as name, capitalize(get_domain_name(url)) AS domain_name, url 29 FROM products; 30 / NAME DOMAIN_NAME URL ________________________________ ______________ _______________________________________________________________________________________ AirPods Pro (2nd gen) Apple https://www.apple.com/shop/product/MQD83AM/A/airpods-pro SanDisk - Ultra 512GB USB 3.0 Bestbuy https://www.bestbuy.com/site/sandisk-ultra-512gb-usb-3-0-flash-drive-black/6422265.p Being able to run anonymous PL/SQL function with SQL statements can be useful where processing through PL/SQL is required or wanted but the user does either not have the necessary privileges to create a named function or does not want to reuse the function. Availability: All Offerings Documentation Example","title":"PL/SQL Function in SQL","component":"guide","version":"latest","name":"plsql-function-in-sql","url":"/guide/latest/categories/sql/12.1.0.1/plsql-function-in-sql.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"38":{"id":38,"text":"Version 12.1.0.1 Categories SQL Many SQL queries benefit from limiting the result set to the top-n, or first n rows. Before Oracle 12c Release 1 limiting the result set required the use of sub-selects and the rownum pseudo-column and inline views as you can see in the first examples. When Oracle Database 12c introduced support for the row limiting clause selecting the first n rows from a result set, or paging through a result set were significantly improved. /* Displaying the top 10 customers by sales using the pre- Oracle Database 12c syntax */ SELECT * FROM ( SELECT SUM(quantity_sold * amount_sold) AS revenue, cust_id FROM sales GROUP BY cust_id ORDER BY SUM(quantity_sold * amount_sold) DESC ) WHERE ROWNUM = :n; /* The same queries, however this time using the new syntax, available from Oracle Database 12c Release 1 onwards */ SELECT SUM(quantity_sold * amount_sold) AS revenue, cust_id FROM sales GROUP BY cust_id ORDER BY SUM(quantity_sold * amount_sold) DESC FETCH FIRST 10 ROWS ONLY; SELECT SUM(quantity_sold * amount_sold) AS revenue, cust_id FROM sales GROUP BY cust_id ORDER BY SUM(quantity_sold * amount_sold) DESC OFFSET 9 ROWS FETCH NEXT 11 ROWS ONLY; Result SQL> /* SQL> Displaying the top 10 customers by sales using the pre- SQL> Oracle Database 12c syntax SQL>*/ SQL> SELECT 2 * 3 FROM 4 ( 5 SELECT 6 SUM(quantity_sold * amount_sold) AS revenue, 7 cust_id 8 FROM 9 sales 10 GROUP BY 11 cust_id 12 ORDER BY 13 SUM(quantity_sold * amount_sold) DESC 14 ) 15 WHERE 16 ROWNUM /* SQL> Iterating over the result set, displaying 10 customers each using the pre- SQL> Oracle Database 12c syntax. You typically find this type of query in reports SQL> where batches of rows are displayed on screen. The following query retrieves SQL> rows n to m (say, 10 to 20) from the result set. SQL>*/ SQL> VAR n NUMBER SQL> VAR m NUMBER SQL> BEGIN 2 :n := 10; 3 :m := 20; 4 END; 5 / PL/SQL procedure successfully completed. SQL> SELECT 2 * 3 FROM 4 ( 5 SELECT 6 a.*, 7 ROWNUM rn 8 FROM 9 ( 10 SELECT 11 SUM(quantity_sold * amount_sold) AS revenue, 12 cust_id 13 FROM 14 sales 15 GROUP BY 16 cust_id 17 ORDER BY 18 SUM(quantity_sold * amount_sold) DESC 19 ) a 20 WHERE 21 ROWNUM = :n; REVENUE CUST_ID RN ___________ __________ _____ 93644,32 4759 10 92671,18 9038 11 90908,24 4090 12 89018,86 7178 13 86440,63 6279 14 85278,17 11702 15 85200,78 6265 16 84261,92 25939 17 83833,3 7994 18 83461,16 20966 19 81970,44 3453 20 11 rows selected. SQL> /* SQL> The same queries, however this time using the new syntax, available from SQL> Oracle Database 12c Release 1 onwards SQL>*/ SQL> SELECT 2 SUM(quantity_sold * amount_sold) AS revenue, 3 cust_id 4 FROM 5 sales 6 GROUP BY 7 cust_id 8 ORDER BY 9 SUM(quantity_sold * amount_sold) DESC 10 FETCH FIRST 10 ROWS ONLY; REVENUE CUST_ID ____________ __________ 103412,66 11407 99578,09 10747 98585,96 42167 98006,16 4974 97573,55 12783 97010,48 6395 94862,61 2994 94819,41 429 94786,13 1743 93644,32 4759 10 rows selected. SQL> SELECT 2 SUM(quantity_sold * amount_sold) AS revenue, 3 cust_id 4 FROM 5 sales 6 GROUP BY 7 cust_id 8 ORDER BY 9 SUM(quantity_sold * amount_sold) DESC 10 OFFSET 9 ROWS FETCH NEXT 11 ROWS ONLY; REVENUE CUST_ID ___________ __________ 93644,32 4759 92671,18 9038 90908,24 4090 89018,86 7178 86440,63 6279 85278,17 11702 85200,78 6265 84261,92 25939 83833,3 7994 83461,16 20966 81970,44 3453 11 rows selected. The FETCH FIRST and OFFSET clauses provides native SQL language support to limit the number of rows returned and to specify a starting row for the return set. Many queries need to limit the number of rows returned or offset the starting row of the results. For example, top-N queries sort their result set and then return only the first n rows. FETCH FIRST and OFFSET simplify syntax and comply with the ANSI SQL standard. Availability: All Offerings SQL Language Reference Blog post with additional examples covering many aspects of top-n queries, including analytic functions","title":"Native SQL Support for Query Row Limits and Row Offsets","component":"guide","version":"latest","name":"query-row-limits-and-offsets","url":"/guide/latest/categories/sql/12.1.0.1/query-row-limits-and-offsets.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"39":{"id":39,"text":"Oracle Database 12c Release 1 Patchset 2 was first released in July 2014. JSON support In-Memory Column Store Advanced Index Compression For more information about all the new features in this release, see Oracle Database 12c Release 1 (12.1.0.2) New Features.","title":"12.1.0.2","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/sql/12.1.0.2/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"40":{"id":40,"text":"Oracle Database 21c was first released in August 2021. JSON Data Type Blockchain Tables SQL Macros Enhanced Analytic Functions For more information about all the new features in this release, see Oracle Database 21c New Features.","title":"21.3","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/sql/21.3/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"41":{"id":41,"text":"Version 21.3 Categories SQL The WINDOW clause enables you to define PARTITION BY, ORDER BY, and window frames for analytic functions. You can use these named windows in the OVER clause of functions in the SELECT clause. alter session set nls_date_format = 'DD-MON-YYYY'; select employee_id, department_id, salary, -- these calculate totals per department count (*) over ( dept_w ) emps_per_dept, sum ( salary ) over ( dept_w ) wages_per_dept, hire_date, -- this gets the running total of salaries/dept in order they were hired sum ( salary ) over ( hired_w ) cumul_sal, -- this gets the moving average of salaries for the last four hires/dept round ( avg ( salary ) over last_four ) rolling_mean from hr.employees where department_id alter session set nls_date_format = 'DD-MON-YYYY'; Session altered. SQL> select employee_id, 2 department_id, salary, 3 -- these calculate totals per department 4 count (*) over ( dept_w ) emps_per_dept, 5 sum ( salary ) over ( dept_w ) wages_per_dept, 6 hire_date, 7 -- this gets the running total of salaries/dept in order they were hired 8 sum ( salary ) over ( hired_w ) cumul_sal, 9 -- this gets the moving average of salaries for the last four hires/dept 10 round ( avg ( salary ) over last_four ) rolling_mean 11 from hr.employees 12 where department_id < 50 13 window dept_w as ( 14 -- split by department 15 partition by department_id 16 ), hired_w as ( 17 -- sort by date hired 18 dept_w order by hire_date 19 ), last_four as ( 20 -- include the previous three rows & current 21 hired_w rows 3 preceding 22 ); EMPLOYEE_ID DEPARTMENT_ID SALARY EMPS_PER_DEPT WAGES_PER_DEPT HIRE_DATE CUMUL_SAL ROLLING_MEAN ----------- ------------- ---------- ------------- -------------- ----------- ---------- ------------ 200 10 4400 1 4400 17-SEP-2013 4400 4400 201 20 13000 2 19000 17-FEB-2014 13000 13000 202 20 6000 2 19000 17-AUG-2015 19000 9500 114 30 11000 6 24900 07-DEC-2012 11000 11000 115 30 3100 6 24900 18-MAY-2013 14100 7050 117 30 2800 6 24900 24-JUL-2015 16900 5633 116 30 2900 6 24900 24-DEC-2015 19800 4950 118 30 2600 6 24900 15-NOV-2016 22400 2850 119 30 2500 6 24900 10-AUG-2017 24900 2700 203 40 6500 1 6500 07-JUN-2012 6500 6500 10 rows selected. The WINDOW clause enables you to define common windows once and reuse them in a statement. This makes queries easier to maintain. Availability: All Offerings Documentation","title":"WINDOW clause","component":"guide","version":"latest","name":"window-clause","url":"/guide/latest/categories/sql/21.3/window-clause.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"42":{"id":42,"text":"Version 21.3 Categories SQL Use frame exclusion to omit rows from the calculation in window functions. This has four options: EXCLUDE CURRENT ROW - remove the row being processed from the calculation. EXCLUDE GROUP - omit all rows with the same value for the window’s ORDER BY columns as the current row EXCLUDE TIES - omit all other rows with the same value for the window’s ORDER BY columns from the total as the current row, but include the current row EXCLUDE NO OTHERS - Include all rows in the window in the calculation. This is the default. alter session set nls_date_format = 'DD-MON-YYYY'; select hire_date , count(*) over ( -- include all previous rows; default hire_w rows unbounded preceding exclude no others ) include_all , count(*) over ( -- omit this row from the count hire_w rows unbounded preceding exclude current row ) omit_current , count(*) over ( -- omit all rows with the same value for hire_date as this hire_w rows unbounded preceding exclude group ) omit_group , count(*) over ( -- omit other rows with the same value for hire_date as this hire_w rows unbounded preceding exclude ties ) omit_ties from hr.employees where hire_date >= date'2015-03-03' window hire_w as ( order by hire_date ) fetch first 5 rows only; Result SQL> alter session set nls_date_format = 'DD-MON-YYYY'; Session altered. SQL> select hire_date 2 , count(*) over ( 3 -- include all previous rows; default 4 hire_w rows unbounded preceding exclude no others 5 ) include_all 6 , count(*) over ( 7 -- omit this row from the count 8 hire_w rows unbounded preceding exclude current row 9 ) omit_current 10 , count(*) over ( 11 -- omit all rows with the same value for hire_date as this 12 hire_w rows unbounded preceding exclude group 13 ) omit_group 14 , count(*) over ( 15 -- omit other rows with the same value for hire_date as this 16 hire_w rows unbounded preceding exclude ties 17 ) omit_ties 18 from hr.employees 19 where hire_date >= date'2015-03-03' 20 window hire_w as ( order by hire_date ) 21 fetch first 5 rows only; HIRE_DATE INCLUDE_ALL OMIT_CURRENT OMIT_GROUP OMIT_TIES ----------- ----------- ------------ ---------- ---------- 03-MAR-2015 1 0 0 1 10-MAR-2015 2 1 1 2 10-MAR-2015 3 2 1 2 11-MAR-2015 4 3 3 4 19-MAR-2015 5 4 4 5 Frame exclusion simplifies SQL statements that need to remove rows from running total and moving window calculations Availability: All Offerings Documentation","title":"Window functions frame exclusion","component":"guide","version":"latest","name":"window-functions-exclusion-frame","url":"/guide/latest/categories/sql/21.3/window-functions-exclusion-frame.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"43":{"id":43,"text":"Version 21.3 Categories SQL The GROUPS frame enables you to get running totals over the previous N sort values in window functions. This in addition to the existing ROWS and RANGE frames. The differences between these are: ROWS :N PRECEDING - include the current row and up to N rows before it RANGE :N PRECEDING - include all rows between current - N and current; current is the value of the ORDER BY column for the row the function is processing GROUPS :N PRECEDING - include all rows with the same value and previous N unique values for the columns in the window’s ORDER BY alter session set nls_date_format = 'DD-MON-YYYY'; select hire_date -- include current & three previous rows , count(*) over ( order by hire_date rows 3 preceding ) prev3_rows -- include all rows between hire_date - 3 and hire_date for the current row , count(*) over ( order by hire_date range 3 preceding ) prev3_days -- include all rows with the any of the previous three and current hire_dates , count(*) over ( order by hire_date groups 3 preceding ) prev3_values from hr.employees where hire_date >= date'2015-03-03' fetch first 5 rows only; Result SQL> alter session set nls_date_format = 'DD-MON-YYYY'; Session altered. SQL> select hire_date 2 -- include current & three previous rows 3 , count(*) over ( order by hire_date rows 3 preceding ) prev3_rows 4 -- include all rows between hire_date - 3 and hire_date for the current row 5 , count(*) over ( order by hire_date range 3 preceding ) prev3_days 6 -- include all rows with the any of the previous three and current hire_dates 7 , count(*) over ( order by hire_date groups 3 preceding ) prev3_values 8 from hr.employees 9 where hire_date >= date'2015-03-03' 10 fetch first 5 rows only; HIRE_DATE PREV3_ROWS PREV3_DAYS PREV3_VALUES ----------- ---------- ---------- ------------ 03-MAR-2015 1 1 1 10-MAR-2015 2 2 3 10-MAR-2015 3 2 3 11-MAR-2015 4 3 4 19-MAR-2015 4 1 5 The GROUPS frame simplifies SQL statements that need to calculate running totals over the previous N unique values. Availability: All Offerings Documentation","title":"Window functions GROUPS frame","component":"guide","version":"latest","name":"window-functions-groups-frame","url":"/guide/latest/categories/sql/21.3/window-functions-groups-frame.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"44":{"id":44,"text":"Version 23.2 Categories SQL Annotations are a lightweight declarative facility for developers to centrally register usage properties for database schema objects. Annotations are stored in dictionary tables and available to any application looking to standardize behavior across common data in related applications. Annotations are not interpreted by the database in any way and are custom data properties for database metadata - including table columns, tables, and indexes. Applications can use annotations as additional property metadata for rendering user interfaces or customizing application logic. -- example 01: table-level annotation CREATE TABLE customers ( customer_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY, email_address VARCHAR2(255 CHAR) NOT NULL, full_name VARCHAR2(255 CHAR) NOT NULL ) ANNOTATIONS ( sensitivity 'high', departments 'sales, delivery', frontOffice ) / -- example 02: adding a column-level annotation ALTER TABLE customers MODIFY ( email_address ANNOTATIONS ( sensitivity 'highest' ) ) / -- example 03: table and column level annotations CREATE TABLE employees ( id NUMBER(5) ANNOTATIONS ( identity, display_as 'Employee ID', group_name 'Emp_Info'), name VARCHAR2(50) ANNOTATIONS ( display_as 'Employee Name', group_name 'Emp_Info'), salary NUMBER ANNOTATIONS ( display_as 'Employee Salary', UI_hidden) ) ANNOTATIONS ( display_as 'Employee Table' ) / -- example 04: query the dictionary for annotation usage SELECT object_name, object_type, column_name, annotation_name, annotation_value FROM user_annotations_usage ORDER BY object_name, column_name / Result SQL> -- example 01: table-level annotation SQL> CREATE TABLE customers ( 2 customer_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY, 3 email_address VARCHAR2(255 CHAR) NOT NULL, 4 full_name VARCHAR2(255 CHAR) NOT NULL 5 ) 6 ANNOTATIONS ( 7 sensitivity 'high', 8 departments 'sales, delivery', 9 frontOffice 10 ) 11 / Table CUSTOMERS created. SQL> -- example 02: adding a column-level annotation SQL> ALTER TABLE customers MODIFY ( 2 email_address ANNOTATIONS ( sensitivity 'highest' ) 3 ) 4 / Table CUSTOMERS altered. SQL> -- example 03: table and column level annotations SQL> CREATE TABLE employees 2 ( 3 id NUMBER(5) 4 ANNOTATIONS ( 5 identity, 6 display_as 'Employee ID', 7 group_name 'Emp_Info'), 8 name VARCHAR2(50) 9 ANNOTATIONS ( 10 display_as 'Employee Name', 11 group_name 'Emp_Info'), 12 salary NUMBER 13 ANNOTATIONS ( 14 display_as 'Employee Salary', UI_hidden) 15 ) 16 ANNOTATIONS ( 17 display_as 'Employee Table' 18 ) 19 / Table EMPLOYEES created. SQL> -- example 04: query the dictionary for annotation usage SQL> SELECT 2 object_name, 4 column_name, 5 annotation_name, 6 annotation_value 7 FROM 8 user_annotations_usage 9 ORDER BY 10 object_name, 11 column_name 12 / OBJECT_NAME COLUMN_NAME ANNOTATION_NAME ANNOTATION_VALUE ______________ ________________ __________________ ___________________ CUSTOMERS EMAIL_ADDRESS SENSITIVITY highest CUSTOMERS DEPARTMENTS sales, delivery CUSTOMERS FRONTOFFICE CUSTOMERS SENSITIVITY high EMPLOYEES ID IDENTITY EMPLOYEES ID GROUP_NAME Emp_Info EMPLOYEES ID DISPLAY_AS Employee ID EMPLOYEES NAME DISPLAY_AS Employee Name EMPLOYEES NAME GROUP_NAME Emp_Info EMPLOYEES SALARY DISPLAY_AS Employee Salary EMPLOYEES SALARY UI_HIDDEN EMPLOYEES DISPLAY_AS Employee Table 12 rows selected. Annotating the data model with metadata provides additional data integrity, consistency and data model documentation benefits. Your applications can store user-defined metadata for database objects and table columns that other applications or users can retrieve and use. Storing the metadata along with the data guarantees consistency and universal accessibility to any user or application that uses the data. Availability: All Offerings Database Concepts Guide Database Development Guide","title":"Annotations","component":"guide","version":"latest","name":"annotations","url":"/guide/latest/categories/sql/23.2/annotations.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"45":{"id":45,"text":"Version 23.2 Categories SQL The BOOLEAN data type enables the storage and processing of TRUE and FALSE values. Boolean values can be used as table column values or inside SQL query expressions. To declare a table column of type BOOLEAN, either use the BOOLEAN or BOOL keyword. This feature is part of the ISO SQL:1999 standard. -- Create a new table containing two boolean columns CREATE TABLE email_addresses ( user_id NUMBER NOT NULL, email VARCHAR2(255) NOT NULL, active BOOLEAN NOT NULL, primary BOOL NOT NULL ); -- Insert values into the table INSERT INTO email_addresses (user_id, active, primary, email) VALUES ( 1, true, true, 'jon.doe@example.com'), ( 2, true, true, 'jane.smith@gmail.com'), ( 2, false, false, 'jsmith@gmail.com'), ( 3, true, true, 'max.well@example.com'), ( 3, true, false, 'mwell@gmail.com'); COMMIT; -- Select all email addresses that are active SELECT email FROM email_addresses WHERE active; -- Select all email addresses that are active but not primary SELECT email FROM email_addresses WHERE active AND NOT primary; Result SQL> -- Create a new table containing two boolean columns SQL> CREATE TABLE email_addresses ( user_id NUMBER NOT NULL, email VARCHAR2(255) NOT NULL, active BOOLEAN NOT NULL, primary BOOL NOT NULL ); Table created. SQL> -- Insert values into the table SQL> INSERT INTO email_addresses (user_id, active, primary, email) VALUES ( 1, true, true, 'jon.doe@example.com'), ( 2, true, true, 'jane.smith@gmail.com'), ( 2, false, false, 'jsmith@gmail.com'), ( 3, true, true, 'max.well@example.com'), ( 3, true, false, 'mwell@gmail.com'); 5 rows created. SQL> COMMIT; Commit complete. SQL> -- Select all email addresses that are active SQL> SELECT email FROM email_addresses WHERE active; EMAIL -------------------------------------------------------------------------------- jon.doe@example.com jane.smith@gmail.com max.well@example.com mwell@gmail.com SQL> -- Select all email addresses that are active but not primary SQL> SELECT email FROM email_addresses WHERE active AND NOT primary; EMAIL -------------------------------------------------------------------------------- mwell@gmail.com The BOOLEAN data type standardizes the storage of \"Yes\" and \"No\" values. Availability: All Offerings Documentation Example","title":"Boolean data type","component":"guide","version":"latest","name":"boolean","url":"/guide/latest/categories/sql/23.2/boolean.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"46":{"id":46,"text":"Version 23.2 Categories SQL You can now pass DATE, TIMESTAMP, and INTERVAL values to the CEIL and FLOOR functions. These functions include an optional second argument to specify a rounding unit. You can also pass INTERVAL values to ROUND and TRUNC functions. with vals as ( select interval '+123-5' year(9) to month ymi, interval '+0 12:34:56' day to second dsi, to_date ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) dt, to_timestamp ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) ts ) select -- CEIL rounds up values ceil ( ymi ) as year_ceil, ceil ( dsi ) as day_ceil, ceil ( dt ) as dt_day_ceil, ceil ( ts ) as ts_day_ceil, -- FLOOR rounds down the datetime value to the units in the second paramter floor ( ymi, 'year' ) as ymi_year_floor, floor ( dsi, 'hh24' ) as dsi_hour_floor, floor ( dt, 'hh24' ) as dt_hour_floor, floor ( ts, 'hh24' ) as ts_hour_floor, -- ROUND now supports INTERVALs round ( dsi, 'mi' ) as dsi_minute_round from vals; Result SQL> with vals as ( 2 select 3 interval '+123-5' year(9) to month ymi, 4 interval '+0 12:34:56' day to second dsi, 5 to_date ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) dt, 6 to_timestamp ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) ts 7 ) 8 select 9 -- CEIL rounds up values 10 ceil ( ymi ) as year_ceil, 11 ceil ( dsi ) as day_ceil, 12 ceil ( dt ) as dt_day_ceil, 13 ceil ( ts ) as ts_day_ceil, 14 -- FLOOR rounds down the datetime value to the units in the second paramter 15 floor ( ymi, 'year' ) as ymi_year_floor, 16 floor ( dsi, 'hh24' ) as dsi_hour_floor, 17 floor ( dt, 'hh24' ) as dt_hour_floor, 18 floor ( ts, 'hh24' ) as ts_hour_floor, 19 -- ROUND now supports INTERVALs 20 round ( dsi, 'mi' ) as dsi_minute_round 21 from vals; YEAR_CE DAY_CEIL DT_DAY_CEIL TS_DAY_CEIL YMI_YEA DSI_HOUR_FLOOR DT_HOUR_FLOOR TS_HOUR_FLOOR DSI_MINUTE_ROUND ------- ------------------- ----------------- ----------------- ------- ------------------- ----------------- ----------------- ------------------- +124-00 +01 00:00:00.000000 13-APR-2023 00:00 13-APR-2023 00:00 +123-00 +00 12:00:00.000000 12-APR-2023 12:00 12-APR-2023 12:00 +00 12:35:00.000000 These functions make it easy to find the upper and lower bounds for date and time values for a specified unit. Availability: All Offerings CEIL, FLOOR, ROUND, and TRUNC Date Functions Documentation","title":"CEIL, FLOOR, and ROUND for datetime data types","component":"guide","version":"latest","name":"ceil-floor-round-for-datetime-types","url":"/guide/latest/categories/sql/23.2/ceil-floor-round-for-datetime-types.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"47":{"id":47,"text":"Version 23.2 Categories SQL You can specify a default value when updating a column to NULL. The database assigns the default value to the column instead of NULL. create table default_values ( id integer, c1 number default extract ( second from systimestamp ), c2 number default on null extract ( second from systimestamp ), c3 number default on null for insert only extract ( second from systimestamp ), c4 number default on null for insert and update extract ( second from systimestamp ) ); -- For the columns with DEFAULT ON NULL, the database replaces NULL with the timestamp value insert into default_values values ( 1, null, null, null, null ); select * from default_values; -- The standard DEFAULT clause has no impact on UPDATEs, so C1 remains NULL update default_values set c1 = null; -- DEFAULT ON NULL adds an implicit NOT NULL constraint to the column -- The default only applies on insert, so this raises an ORA-01407 error update default_values set c2 = null; -- DEFAULT ON NULL FOR INSERT ONLY is equivalent to DEFAULT ON NULL -- So this also raises an ORA-01407 error update default_values set c3 = null; -- C4 is DEFAULT ON NULL FOR INSERT AND UPDATE -- So the database replaces NULL with its default value update default_values set c4 = null; -- The value of C4 has changed; all other columns retain their INSERT value select * from default_values; Result SQL> create table default_values ( 2 id integer, 3 c1 number default extract ( second from systimestamp ), 4 c2 number default on null extract ( second from systimestamp ), 5 c3 number default on null for insert only extract ( second from systimestamp ), 6 c4 number default on null for insert and update extract ( second from systimestamp ) 7 ); Table created. SQL> SQL> -- For the columns with DEFAULT ON NULL, the database replaces NULL with the timestamp value SQL> insert into default_values 2 values ( 1, null, null, null, null ); 1 row created. SQL> SQL> select * from default_values; ID C1 C2 C3 C4 ---------- ---------- ---------- ---------- ---------- 1 1.585189 1.585189 1.585189 SQL> SQL> -- The standard DEFAULT clause has no impact on UPDATEs, so C1 remains NULL SQL> update default_values 2 set c1 = null; 1 row updated. SQL> SQL> -- DEFAULT ON NULL adds an implicit NOT NULL constraint to the column SQL> -- The default only applies on insert, so this raises an ORA-01407 error SQL> update default_values 2 set c2 = null; set c2 = null * ERROR at line 2: ORA-01407: cannot update (\"CHRIS\".\"DEFAULT_VALUES\".\"C2\") to NULL SQL> SQL> -- DEFAULT ON NULL FOR INSERT ONLY is equivalent to DEFAULT ON NULL SQL> -- So this also raises an ORA-01407 error SQL> update default_values 2 set c3 = null; set c3 = null * ERROR at line 2: ORA-01407: cannot update (\"CHRIS\".\"DEFAULT_VALUES\".\"C3\") to NULL SQL> SQL> -- C4 is DEFAULT ON NULL FOR INSERT AND UPDATE SQL> -- So the database replaces NULL with its default value SQL> update default_values 2 set c4 = null; 1 row updated. SQL> SQL> -- The value of C4 has changed; all other columns retain their INSERT value SQL> select * from default_values; ID C1 C2 C3 C4 ---------- ---------- ---------- ---------- ---------- 1 1.585189 1.585189 1.608401 Providing a default value for NULL on UPDATE simplifies code to map NULL to a non NULL value when changing data. Availability: All Offerings CREATE TABLE Documentation","title":"Default ON NULL for UPDATE statements","component":"guide","version":"latest","name":"default-on-null-update","url":"/guide/latest/categories/sql/23.2/default-on-null-update.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"48":{"id":48,"text":"Version 23.2 Categories SQL The FUZZY_MATCH operator enables you to compare strings for similarity using algorithms such as Jaro-Winkler and Levenshtein distance. /* Compare the team names to \"Champions City\" with the different fuzzy matching algorithms */ with teams as ( select * from ( values ( 'Champions United' ), ( 'Runner-up City' ), ( 'Midtable Town' ), ( 'Underdogs United' ), ( 'Upstart FC' ), ( 'Relegated Athletic' ) ) t ( team_name ) ), match_value as ( select 'Champions City' match_team ) select team_name, match_team, fuzzy_match ( levenshtein, team_name, match_team ) as levenshtein, fuzzy_match ( jaro_winkler, team_name, match_team ) as jaro_winkler, fuzzy_match ( bigram, team_name, match_team ) as bigram, fuzzy_match ( trigram, team_name, match_team ) as trigram, fuzzy_match ( whole_word_match, team_name, match_team ) as wwm, fuzzy_match ( longest_common_substring, team_name, match_team ) as lcs from teams cross join match_value; /* Find the team names that match \"Champions City\" with Jaro-Winkler score > 90 */ with teams as ( select * from ( values ( 'Champions United' ), ( 'Runner-up City' ), ( 'Midtable Town' ), ( 'Underdogs United' ), ( 'Upstart FC' ), ( 'Relegated Athletic' ) ) t ( team_name ) ), match_value as ( select 'Champions City' match_team ) select team_name, match_team from teams join match_value on fuzzy_match ( jaro_winkler, team_name, match_team ) > 90; Result SQL> /* Compare the team names to \"Champions City\" for the different fuzzy matching algorithms */ SQL> with teams as ( 2 select * from ( 3 values ( 'Champions United' ), 4 ( 'Runner-up City' ), 5 ( 'Midtable Town' ), 6 ( 'Underdogs United' ), 7 ( 'Upstart FC' ), 8 ( 'Relegated Athletic' ) 9 ) t ( team_name ) 10 ), match_value as ( 11 select 'Champions City' match_team 12 ) 13 select team_name, match_team, 14 fuzzy_match ( levenshtein, team_name, match_team ) as levenshtein, 15 fuzzy_match ( jaro_winkler, team_name, match_team ) as jaro_winkler, 16 fuzzy_match ( bigram, team_name, match_team ) as bigram, 17 fuzzy_match ( trigram, team_name, match_team ) as trigram, 18 fuzzy_match ( whole_word_match, team_name, match_team ) as wwm, 19 fuzzy_match ( longest_common_substring, team_name, match_team ) as lcs 20 from teams 21 cross join match_value; TEAM_NAME MATCH_TEAM LEVENSHTEIN JARO_WINKLER BIGRAM TRIGRAM WWM LCS ------------------ -------------- ----------- ------------ ---------- ---------- ---------- ---------- Champions United Champions City 75 92 66 57 50 62 Runner-up City Champions City 36 57 30 25 50 35 Midtable Town Champions City 8 44 0 0 0 7 Underdogs United Champions City 32 49 13 0 0 12 Upstart FC Champions City 8 56 0 0 0 7 Relegated Athletic Champions City 12 41 0 0 0 5 6 rows selected. SQL> SQL> /* Find the team names that match \"Champions City\" with Jaro-Winkler score > 90 */ SQL> with teams as ( 2 select * from ( 3 values ( 'Champions United' ), 4 ( 'Runner-up City' ), 5 ( 'Midtable Town' ), 6 ( 'Underdogs United' ), 7 ( 'Upstart FC' ), 8 ( 'Relegated Athletic' ) 9 ) t ( team_name ) 10 ), match_value as ( 11 select 'Champions City' match_team 12 ) 13 select team_name, match_team 14 from teams 15 join match_value 16 on fuzzy_match ( jaro_winkler, team_name, match_team ) > 90; TEAM_NAME MATCH_TEAM ------------------ -------------- Champions United Champions City This operator makes it easier to find similar strings with SQL. Availability: All Offerings FUZZY_MATCH Documentation","title":"FUZZY_MATCH operator","component":"guide","version":"latest","name":"fuzzy-match-operator","url":"/guide/latest/categories/sql/23.2/fuzzy-match-operator.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"49":{"id":49,"text":"Version 23.2 Categories SQL The GROUP BY column alias feature is a shorthand for not having to repeat lengthy expressions from the SELECT clause in the GROUP BY and/or HAVING clause but instead use the defined column alias. The GROUP BY position feature is a similar shorthand and great for ad-hoc queries by simply referring to the expression position in the SELECT clause. Caution is required when using this feature, however, as it can lead novices to wrong conclusions and unexpected results as they may be surprised by or not aware of that data is being grouped differently when the position of the expression in the SELECT clause changes. This is particularly important for GROUP BY ROLLUP() and other super-aggregate grouping functions, hence this functionality is guarded behind a session parameter group_by_position_enabled. Note the GROUP BY combined_name which refers to a column alias in the SELECT. SELECT CONCAT(r.name, ': ', co.name) AS combined_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY combined_name ORDER BY combined_name; Result SQL> SELECT CONCAT(r.name, ': ', co.name) AS combined_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY combined_name ORDER BY combined_name; COMBINED_NAME POPULATION_M ------------------------------ ------------ Oceania: Australia 23.47 Oceania: Fiji .926 Oceania: Kiribati .109 Oceania: Marshall Islands .076 Oceania: Micronesia .104 Oceania: Nauru .01 Oceania: New Zealand 4.546 Oceania: Palau .022 Oceania: Papua New Guinea 7.027 Oceania: Samoa .201 Oceania: Solomon Islands .66 Oceania: Tonga .106 Oceania: Tuvalu .011 Oceania: Vanuatu .288 South America: Argentina 44.694 South America: Bolivia 11.306 South America: Brazil 208.847 South America: Chile 17.925 South America: Colombia 48.169 South America: Ecuador 16.291 South America: Guyana .741 South America: Paraguay 7.026 South America: Peru 31.331 South America: Suriname .598 South America: Uruguay 3.369 South America: Venezuela 31.689 26 rows selected. Note the GROUP BY ROLLUP (1, 2) which refers to the first and second column in the SELECT. -- Enable the GROUP_BY_POSITION parameter for the session ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; SELECT r.name AS region_name, co.name AS country_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; Result SQL> -- Enable the GROUP_BY_POSITION parameter for the session SQL> ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; Session altered. SQL> SELECT r.name AS region_name, co.name AS country_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; REGION_NAME COUNTRY_NAME POPULATION_M ------------- ---------------- ------------ Oceania Australia 23.47 Oceania Fiji .926 Oceania Kiribati .109 Oceania Marshall Islands .076 Oceania Micronesia .104 Oceania Nauru .01 Oceania New Zealand 4.546 Oceania Palau .022 Oceania Papua New Guinea 7.027 Oceania Samoa .201 Oceania Solomon Islands .66 Oceania Tonga .106 Oceania Tuvalu .011 Oceania Vanuatu .288 Oceania 37.556 South America Argentina 44.694 South America Bolivia 11.306 South America Brazil 208.847 South America Chile 17.925 South America Colombia 48.169 South America Ecuador 16.291 South America Guyana .741 South America Paraguay 7.026 South America Peru 31.331 South America Suriname .598 South America Uruguay 3.369 South America Venezuela 31.689 South America 421.986 459.542 29 rows selected. Let’s assume that the report was supposed to list countries first and the region next to it instead of the current region first and the country next to it. If you change the columns in the SELECT but forget to amend the GROUP BY ROLLUP clause as well, because you are grouping by column position in the SELECT list, your results will be grouped differently and be no longer be the same. -- Enable the GROUP_BY_POSITION parameter for the session (only needed once per session) ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; Result SQL> -- Enable the GROUP_BY_POSITION parameter for the session (only needed once per session) SQL> ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; Session altered. SQL> SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; COUNTRY_NAME REGION_NAME POPULATION_M ---------------- ------------- ------------ Samoa Oceania .201 Fiji Oceania .926 Micronesia Oceania .104 Kiribati Oceania .109 Marshall Islands Oceania .076 Nauru Oceania .01 New Zealand Oceania 4.546 Papua New Guinea Oceania 7.027 Palau Oceania .022 Solomon Islands Oceania .66 Tonga Oceania .106 Tuvalu Oceania .011 Australia Oceania 23.47 Vanuatu Oceania .288 Argentina South America 44.694 Bolivia South America 11.306 Brazil South America 208.847 Chile South America 17.925 Colombia South America 48.169 Venezuela South America 31.689 Guyana South America .741 Peru South America 31.331 Paraguay South America 7.026 Suriname South America .598 Uruguay South America 3.369 Ecuador South America 16.291 Venezuela 31.689 Uruguay 3.369 Suriname .598 Paraguay 7.026 Peru 31.331 Guyana .741 Ecuador 16.291 Colombia 48.169 Chile 17.925 Brazil 208.847 Bolivia 11.306 Argentina 44.694 Samoa .201 Vanuatu .288 Tuvalu .011 Tonga .106 Solomon Islands .66 Palau .022 Papua New Guinea 7.027 New Zealand 4.546 Nauru .01 Marshall Islands .076 Kiribati .109 Micronesia .104 Fiji .926 459.542 Australia 23.47 53 rows selected. In comparison, this does not happen when using the column alias: SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (region_name, country_name) ORDER BY region_name; Result SQL> SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (region_name, country_name) ORDER BY region_name; COUNTRY_NAME REGION_NAME POPULATION_M ---------------- ------------- ------------ Australia Oceania 23.47 Fiji Oceania .926 Kiribati Oceania .109 Marshall Islands Oceania .076 Micronesia Oceania .104 Nauru Oceania .01 New Zealand Oceania 4.546 Palau Oceania .022 Papua New Guinea Oceania 7.027 Samoa Oceania .201 Solomon Islands Oceania .66 Tonga Oceania .106 Tuvalu Oceania .011 Vanuatu Oceania .288 Oceania 37.556 Argentina South America 44.694 Bolivia South America 11.306 Brazil South America 208.847 Chile South America 17.925 Colombia South America 48.169 Ecuador South America 16.291 Guyana South America .741 Paraguay South America 7.026 Peru South America 31.331 Suriname South America .598 Uruguay South America 3.369 Venezuela South America 31.689 South America 421.986 459.542 29 rows selected. GROUP BY column alias and position are both convenient shorthands for writing concise ad-hoc SQL statements. Extra caution should be given when using GROUP BY column position as changing the column position in the SELECT part can have direct influence over the grouping of the data. Availability: All Offerings Documentation","title":"GROUP BY column alias or position","component":"guide","version":"latest","name":"group-by-alias-position","url":"/guide/latest/categories/sql/23.2/group-by-alias-position.html","titles":[{"text":"GROUP BY column alias","hash":"_group_by_column_alias","id":1},{"text":"GROUP BY column position","hash":"_group_by_column_position","id":2},{"text":"Caution","hash":"_caution","id":3},{"text":"Benefits","hash":"_benefits","id":4},{"text":"Further information","hash":"_further_information","id":5}]},"50":{"id":50,"text":"Version 23.2 Categories SQL The IF [NOT] EXISTS syntax can be used to ignore errors when dropping objects that do not exist or create objects that already exist. Objects can now be dropped via DROP IF EXISTS Objects can now be created via CREATE IF NOT EXISTS -- Drop table if left over from a previous incomplete test run -- (this will produce an error) DROP TABLE my_test; -- Recreate the table in a clean state CREATE TABLE my_test ( id NUMBER NOT NULL PRIMARY KEY, name VARCHAR2(255), created_tms DATE DEFAULT SYSDATE NOT NULL ); -- Execute INSERT INTO tests for default value INSERT INTO my_test (id, name) VALUES (1, 'Test'); -- Clean up test DROP TABLE my_test; -- -- Second test run -- -- Drop table if left over from a previous incomplete test run -- (the table has already been dropped in a previous test run, -- however, due to using IF EXISTS, no error will be raised) DROP TABLE IF EXISTS my_test; -- Recreate the table in a clean state CREATE TABLE my_test ( id NUMBER NOT NULL PRIMARY KEY, name VARCHAR2(255), created_tms DATE DEFAULT SYSDATE NOT NULL ); -- Execute INSERT INTO tests for default value of `created_tms` INSERT INTO my_test (id, name) VALUES (1, 'Test'); -- Clean up test DROP TABLE my_test; Result SQL> -- Drop table if left over from a previous incomplete test run SQL> -- (this will produce an error) SQL> DROP TABLE my_test; Error starting at line : 1 in command - DROP TABLE my_test Error report - ORA-00942: table or view does not exist SQL> SQL> -- Recreate the table in a clean state SQL> CREATE TABLE my_test 2 ( 3 id NUMBER NOT NULL PRIMARY KEY, 4 name VARCHAR2(255), 5 created_tms DATE DEFAULT SYSDATE NOT NULL 6 ); Table MY_TEST created. SQL> SQL> -- Execute INSERT INTO tests for default value of `created_tms` SQL> INSERT INTO my_test (id, name) VALUES (1, 'Test'); 1 row inserted. SQL> SQL> -- Clean up test SQL> DROP TABLE my_test; Table MY_TEST dropped. SQL> SQL> -- 2* -- Second test run SQL> -- 2* SQL> -- Drop table if left over from a previous incomplete test run SQL> -- (the table has already been dropped in a previous test run, SQL> -- however, due to using IF EXISTS, no error will be raised) SQL> DROP TABLE IF EXISTS my_test; Table MY_TEST dropped. SQL> SQL> -- Recreate the table in a clean state SQL> CREATE TABLE my_test 2 ( 3 id NUMBER NOT NULL PRIMARY KEY, 4 name VARCHAR2(255), 5 created_tms DATE DEFAULT SYSDATE NOT NULL 6 ); Table MY_TEST created. SQL> SQL> -- Execute INSERT INTO tests for default value SQL> INSERT INTO my_test (id, name) VALUES (1, 'Test'); 1 row inserted. SQL> SQL> -- Clean up test SQL> DROP TABLE my_test; Table MY_TEST dropped. Ignoring the error when dropping a non existing object or creating an object that already exists can be very useful especially in testing scripts that always want to ensure a clean state at the beginning of tests but not produce false positives by e.g. receiving an error when dropping an object that does not exist. Availability: All Offerings DROP TABLE documentation","title":"IF [NOT] EXISTS","component":"guide","version":"latest","name":"if-not-exists","url":"/guide/latest/categories/sql/23.2/if-not-exists.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"51":{"id":51,"text":"Oracle Database 23c was first released in April 2023 via Oracle Database 23c Free – Developer Release. JSON Relational Duality JSON Schemas JavaScript Stored Procedures Operational Property Graphs (SQL/PGQ) Schema-level Privileges Domains Annotations Lock-Free Reservations For more information about all the new features in this release, see Oracle Database 23c New Features.","title":"23.2","component":"guide","version":"latest","name":"index","url":"/guide/latest/categories/sql/23.2/index.html","titles":[{"text":"Marquee Features","hash":"_marquee_features","id":1}]},"52":{"id":52,"text":"Version 23.2 Categories SQL JSON offers the flexibility of schemaless application design. Sometimes however, you might want some JSON data to conform to a schema. You might want to ensure that all data stored in a given column has the structure defined by a schema, or you might want to check whether a given JSON document has such a structure, before processing it. A JSON schema is a JSON document that respects the JSON Schema standard, which is a Request For Comments (RFC) draft. JSON schemas are in turn used to validate other JSON documents. Refer to the JSON schema website for more details. A JSON schema specifies the structure and the types of allowed values of JSON data that it considers valid. This example demonstrates how to query data in a relational table containing a JSON column and match it against a JSON schema. The following JSON schema ensures that only objects can be stored in the JSON column, containing both a firstName and lastName field with a minimum length of 1 character each. The numeric salary field is optional, however if defined, the salary must be greater than 10000. { \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"lastName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\", \"lastName\" ] } CREATE TABLE json_demo( id NUMBER GENERATED ALWAYS AS IDENTITY, CONSTRAINT pk_json_demo PRIMARY KEY(id), jcol JSON NOT NULL ); -- will result in an error: salary too low INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\", \"salary\": 9999 }') ); -- will result in an error: required lastName not present INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"salary\": 10001 }') ); -- will result in an error: lastName not spelled correctly INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"last_name\": \"King\", \"salary\": 10001 }') ); -- this record is fine INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\" }') ); -- fetch valid data SELECT jcol FROM json_demo WHERE jcol IS JSON VALIDATE '{ \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"lastName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\", \"lastName\" ] }'; Result SQL> CREATE TABLE json_demo( 2 id NUMBER 3 GENERATED ALWAYS AS IDENTITY, 4 CONSTRAINT pk_json_demo PRIMARY KEY(id), 5 jcol JSON NOT NULL 6 ); Table JSON_DEMO created. SQL> -- will result in an error: salary too low SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\", \"salary\": 9999 }') 5 ); 1 row inserted. SQL> -- will result in an error: required lastName not present SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"salary\": 10001 }') 5 ); 1 row inserted. SQL> -- will result in an error: lastName not spelled correctly SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"last_name\": \"King\", \"salary\": 10001 }') 5 ); 1 row inserted. SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\" }') 5 ); 1 row inserted. SQL> -- fetch valid data SQL> SELECT 2 jcol 3 FROM 4 json_demo 5 WHERE 6 jcol IS JSON VALIDATE 7 '{ 8 \"type\": \"object\", 9 \"properties\": { 10 \"firstName\": { 11 \"type\": \"string\", 12 \"minLength\": 1 13 }, 14 \"lastName\": { 15 \"type\": \"string\", 16 \"minLength\": 1 17 }, 18 \"salary\": { 19 \"type\": \"number\", 20 \"minimum\": 10000 21 } 22 }, 23 \"required\": [ 24 \"firstName\", 25 \"lastName\" 26 ] 27 }'; JCOL ___________________________________________ {\"firstName\":\"Steven\",\"lastName\":\"King\"} JSON is a popular format for data exchange, however with flexibility comes the risk of working with incomplete or wrong records. JSON schema allows developers to ensure better data quality. Using the IS JSON VALIDATE clause allows developers to vet JSON data in a column using a JSON schema. The above SELECT statement is the perfect partner for an INSERT INTO table_name SELECT …​ IS JSON VALIDATE …​ Availability: All Offerings Documentation","title":"JSON Schema: validate rows in a table","component":"guide","version":"latest","name":"json-schema-validate-rows","url":"/guide/latest/categories/sql/23.2/json-schema-validate-rows.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"53":{"id":53,"text":"Version 23.2 Categories SQL JSON offers the flexibility of schemaless application design. Sometimes however, you might want some JSON data to conform to a schema. You might want to ensure that all data stored in a given column has the structure defined by a schema, or you might want to check whether a given JSON document has such a structure, before processing it. A JSON schema is a JSON document that respects the JSON Schema standard, which is a Request For Comments (RFC) draft. JSON schemas are in turn used to validate other JSON documents. Refer to the JSON schema website for more details. A JSON schema specifies the structure and the types of allowed values of JSON data that it considers valid. This example demonstrates how to create a JSON schema validation report. The following JSON schema ensures that only objects can be stored in the JSON column, containing at least a firstName field with a minimum length of 1 character. The numeric salary field is optional, however if defined, the salary must be greater than 10000. { \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\" ] } -- note the absence of any schema validation rules in the -- create table statement CREATE TABLE json_demo( id NUMBER GENERATED ALWAYS AS IDENTITY, CONSTRAINT pk_json_demo PRIMARY KEY(id), jcol JSON ); -- insert a few rows into the table INSERT INTO json_demo ( jcol ) values ( JSON('{ \"contents\": \"does not match JSON schema\" }') ); INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Martin\" }' ) ); INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Tom\", \"salary\": 9999 }') ); INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Emily\", \"salary\": 15000 }') ); COMMIT; -- validate the contents of the table DECLARE l_JSON_schema JSON := JSON( '{ \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\" ] }' ); l_validation_report JSON; BEGIN FOR i IN (select id, jcol from json_demo) loop SELECT DBMS_JSON_SCHEMA.validate_report( json_data => i.jcol, json_schema => l_JSON_schema ) INTO l_validation_report FROM json_demo WHERE id = i.id; DBMS_OUTPUT.put_line('validating row with ID ' || i.id); DBMS_OUTPUT.put_line( json_serialize(l_validation_report pretty) ); END LOOP; END; / -- extracting portions of the error message WITH validation AS ( SELECT id, DBMS_JSON_SCHEMA.validate_report( json_data => jcol, json_schema => JSON( '{ \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\" ] }' ) ) AS report FROM json_demo ) SELECT json_serialize( v.report.errors[*].error pretty ) FROM validation v WHERE v.id = 1 / Result SQL> -- note the absence of any schema validation rules in the SQL> -- create table statement SQL> CREATE TABLE json_demo( 2 id NUMBER 3 GENERATED ALWAYS AS IDENTITY, 4 CONSTRAINT pk_json_demo PRIMARY KEY(id), 5 jcol JSON 6 ); Table created. SQL> SQL> -- insert a few rows into the table SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"contents\": \"does not match JSON schema\" }') 5 ); 1 row created. SQL> SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Martin\" }' ) 5 ); 1 row created. SQL> SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Tom\", \"salary\": 9999 }') 5 ); 1 row created. SQL> SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Emily\", \"salary\": 15000 }') 5 ); 1 row created. SQL> SQL> COMMIT; Commit complete. SQL> SQL> -- validate the contents of the table SQL> DECLARE 2 l_JSON_schema JSON := JSON( 3 '{ 4 \"type\": \"object\", 5 \"properties\": { 6 \"firstName\": { 7 \"type\": \"string\", 8 \"minLength\": 1 9 }, 10 \"salary\": { 11 \"type\": \"number\", 12 \"minimum\": 10000 13 } 14 }, 15 \"required\": [ 16 \"firstName\" 17 ] 18 }' 19 ); 20 l_validation_report JSON; 21 BEGIN 22 FOR i IN (select id, jcol from json_demo) loop 23 SELECT 24 DBMS_JSON_SCHEMA.validate_report( 25 json_data => i.jcol, 26 json_schema => l_JSON_schema 27 ) 28 INTO 29 l_validation_report 30 FROM 31 json_demo 32 WHERE 33 id = i.id; 34 DBMS_OUTPUT.put_line('validating row with ID ' || i.id); 35 DBMS_OUTPUT.put_line( 36 json_serialize(l_validation_report pretty) 37 ); 38 END LOOP; 39 END; 40 / validating row with ID 1 { \"valid\" : false, \"errors\" : [ { \"schemaPath\" : \"$\", \"instancePath\" : \"$\", \"code\" : \"JZN-00501\", \"error\" : \"JSON schema validation failed\" }, { \"schemaPath\" : \"$.required\", \"instancePath\" : \"$\", \"code\" : \"JZN-00515\", \"error\" : \"required properties not found: 'firstName'\" } ] } validating row with ID 2 { \"valid\" : true, \"errors\" : [ ] } validating row with ID 3 { \"valid\" : false, \"errors\" : [ { \"schemaPath\" : \"$\", \"instancePath\" : \"$\", \"code\" : \"JZN-00501\", \"error\" : \"JSON schema validation failed\" }, { \"schemaPath\" : \"$.properties\", \"instancePath\" : \"$\", \"code\" : \"JZN-00514\", \"error\" : \"invalid properties: 'salary'\" }, { \"schemaPath\" : \"$.properties.salary.minimum\", \"instancePath\" : \"$.salary\", \"code\" : \"JZN-00507\", \"error\" : \"value less than minimum value, actual: 9999, expected: 10000\" } ] } validating row with ID 4 { \"valid\" : true, \"errors\" : [ ] } PL/SQL procedure successfully completed. SQL> SQL> -- extracting portions of the error message SQL> WITH validation AS ( 2 SELECT 3 id, 4 DBMS_JSON_SCHEMA.validate_report( 5 json_data => jcol, 6 json_schema => JSON( 7 '{ 8 \"type\": \"object\", 9 \"properties\": { 10 \"firstName\": { 11 \"type\": \"string\", 12 \"minLength\": 1 13 }, 14 \"salary\": { 15 \"type\": \"number\", 16 \"minimum\": 10000 17 } 18 }, 19 \"required\": [ 20 \"firstName\" 21 ] 22 }' 23 ) 24 ) AS report 25 FROM 26 json_demo 27 ) 28 SELECT 29 json_serialize( 30 v.report.errors[*].error 31 pretty 32 ) errors 33 FROM 34 validation v 35 WHERE 36 v.id = 1 37 / ERRORS ----------------------------------------------------------------- [ \"JSON schema validation failed\", \"required properties not found: 'firstName'\" ] JSON is a popular format for data exchange, however with flexibility comes the risk of importing incomplete or otherwise incorrect records. JSON schema allows developers to ensure better data quality. Using validation reports contents of existing JSON columns can be checked against a schema. The validation function returns JSON, which can be parsed to only return specific parts of the validation report. Availability: All Offerings Documentation","title":"JSON Schema: check constraint","component":"guide","version":"latest","name":"json-schema-validation-report","url":"/guide/latest/categories/sql/23.2/json-schema-validation-report.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"54":{"id":54,"text":"Version 23.2 Categories SQL The PHONIC_ENCODE operator indexes words according to their English pronunciation using the metaphone or double metaphone algorithms. /* Get the phonic encoding of the team names The third parameter is the number of characters in the encoded string */ with teams as ( select * from ( values ( 'Champions United' ), ( 'Runner-up City' ), ( 'Midtable Town' ), ( 'Underdogs United' ), ( 'Upstart FC' ), ( 'Relegated Athletic' ) ) t ( team_name ) ) select team_name, phonic_encode ( double_metaphone, team_name, 1 ) as team_name_dm1, phonic_encode ( double_metaphone_alt, team_name, 1 ) as team_name_dm1_alt, phonic_encode ( double_metaphone, team_name, 6 ) as team_name_dm6, phonic_encode ( double_metaphone_alt, team_name, 6 ) as team_name_dm6_alt, phonic_encode ( double_metaphone, team_name, 12 ) as team_name_dm12, phonic_encode ( double_metaphone_alt, team_name, 12 ) as team_name_dm12_alt from teams; Result SQL> /* Get the phonic encoding of the team names SQL> The third parameter is the number of characters in the encoded string */ SQL> with teams as ( 2 select * from ( 3 values ( 'Champions United' ), 4 ( 'Runner-up City' ), 5 ( 'Midtable Town' ), 6 ( 'Underdogs United' ), 7 ( 'Upstart FC' ), 8 ( 'Relegated Athletic' ) 9 ) t ( team_name ) 10 ) 11 select team_name, 12 phonic_encode ( double_metaphone, team_name, 1 ) as team_name_dm1, 13 phonic_encode ( double_metaphone_alt, team_name, 1 ) as team_name_dm1_alt, 14 phonic_encode ( double_metaphone, team_name, 6 ) as team_name_dm6, 15 phonic_encode ( double_metaphone_alt, team_name, 6 ) as team_name_dm6_alt, 16 phonic_encode ( double_metaphone, team_name, 12 ) as team_name_dm12, 17 phonic_encode ( double_metaphone_alt, team_name, 12 ) as team_name_dm12_alt 18 from teams; TEAM_NAME TEAM_NAME_DM1 TEAM_NAME_DM1_ALT TEAM_NAME_DM6 TEAM_NAME_DM6_ALT TEAM_NAME_DM12 TEAM_NAME_DM12_ALT ------------------ ------------------------- ------------------------- ------------------------- ------------------------- ------------------------- ------------------------- Champions United X X XMPNSN XMPNSN XMPNSNTT XMPNSNTT Runner-up City R R RNRPST RNRPST RNRPST RNRPST Midtable Town M M MTPLTN MTPLTN MTPLTN MTPLTN Underdogs United A A ANTRTK ANTRTK ANTRTKSNTT ANTRTKSNTT Upstart FC A A APSTRT APSTRT APSTRTFK APSTRTFK Relegated Athletic R R RLKTT0 RLKTTT RLKTT0LTK RLKTTTLTK 6 rows selected. The PHONIC_ENCODE operator enables you to run data quality queries, comparing text based on how it’s spoken. Availability: All Offerings PHONIC_ENCODE Documentation","title":"PHONIC_ENCODE operator","component":"guide","version":"latest","name":"phonic-encode-operator","url":"/guide/latest/categories/sql/23.2/phonic-encode-operator.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"55":{"id":55,"text":"Version 23.2 Categories SQL The RETURNING INTO clause for INSERT, UPDATE, and DELETE statements are enhanced to report old and new values affected by the respective statement. This allows developers to use the same logic for each of these Data Manipulation Language (DML) types to obtain values pre- and post-statement execution. The following rules apply: UPDATE statements report old and new values. INSERT statements only report new values. DELETE statements only report old values. -- example 01: returning old and new values for a single-row update var l_old_salary number var l_new_salary number UPDATE employees SET salary = salary * 1.07 WHERE employee_id = 103 RETURNING old salary, new salary INTO :l_old_salary, :l_new_salary; SELECT :l_old_salary, :l_new_salary; ROLLBACK; -- example 02: returning old and new values for a multi-row update -- and storing the values in an audit table DROP TABLE IF EXISTS employees_history; CREATE TABLE employees_history ( employee_id NUMBER(6) NOT NULL, old_salary NUMBER(8, 2) NOT NULL, new_salary NUMBER(8, 2) NOT NULL, changed_on DATE NOT NULL ); DECLARE TYPE t_change_rec IS RECORD ( old_salary employees_history.old_salary%TYPE, new_salary employees_history.new_salary%TYPE, employee_id employees_history.employee_id%TYPE ); TYPE t_change_details IS TABLE OF t_change_rec; l_changes t_change_details; BEGIN UPDATE employees e SET salary = salary * 1.07 FROM departments d WHERE d.department_id = e.department_id AND d.department_name = 'IT' RETURNING OLD salary, NEW salary, employee_id BULK COLLECT INTO l_changes; FORALL i IN 1..l_changes.count INSERT INTO employees_history ( employee_id, old_salary, new_salary, changed_on ) VALUES ( l_changes(i).employee_id, l_changes(i).old_salary, l_changes(i).new_salary, sysdate ); END; / SELECT employee_id, old_salary, new_salary, changed_on FROM employees_history; ROLLBACK; -- example 03: no \"old\" value returned by INSERT statements DROP TABLE IF EXISTS insert_demo; CREATE TABLE insert_demo ( id NUMBER GENERATED ALWAYS AS IDENTITY, vc VARCHAR2(100) NOT NULL, d DATE DEFAULT sysdate NOT NULL, CONSTRAINT pk_insert_demo PRIMARY KEY ( id ) ) / var l_old_id number var l_new_id number INSERT INTO insert_demo ( vc ) VALUES ( 'insert demo' ) RETURNING old id, new id INTO :l_old_id, :l_new_id; SELECT :l_old_id, :l_new_id; -- example 04: no \"new\" value returning by DELETE statements DELETE insert_demo WHERE id = :l_new_id RETURNING old id, new id INTO :l_old_id, :l_new_id; SELECT :l_old_id, :l_new_id; ROLLBACK; Result SQL> -- example 01: returning old and new values for a single-row update SQL> var l_old_salary number SQL> var l_new_salary number SQL> UPDATE employees 2 SET 3 salary = salary * 1.07 4 WHERE 5 employee_id = 103 6 RETURNING 7 old salary, new salary 8 INTO 9 :l_old_salary, :l_new_salary; 1 row updated. SQL> SELECT 2 :l_old_salary, 3 :l_new_salary; :L_OLD_SALARY :L_NEW_SALARY ------------- ------------- 9000 9630 SQL> ROLLBACK; Rollback complete. SQL> -- example 02: returning old and new values for a multi-row update SQL> -- and storing the values in an audit table SQL> DROP TABLE IF EXISTS employees_history; Table dropped. SQL> CREATE TABLE employees_history ( 2 employee_id NUMBER(6) NOT NULL, 3 old_salary NUMBER(8, 2) NOT NULL, 4 new_salary NUMBER(8, 2) NOT NULL, 5 changed_on DATE NOT NULL 6 ); Table created. SQL> DECLARE 2 TYPE t_change_rec IS RECORD ( 3 old_salary employees_history.old_salary%TYPE, 4 new_salary employees_history.new_salary%TYPE, 5 employee_id employees_history.employee_id%TYPE 6 ); 7 TYPE t_change_details IS 8 TABLE OF t_change_rec; 9 l_changes t_change_details; 10 BEGIN 11 UPDATE employees e 12 SET 13 salary = salary * 1.07 14 FROM departments d 15 WHERE 16 d.department_id = e.department_id 17 AND d.department_name = 'IT' 18 RETURNING 19 OLD salary, NEW salary, employee_id 20 BULK COLLECT INTO 21 l_changes; 22 23 FORALL i IN 1..l_changes.count 24 INSERT INTO employees_history ( 25 employee_id, 26 old_salary, 27 new_salary, 28 changed_on 29 ) VALUES ( 30 l_changes(i).employee_id, 31 l_changes(i).old_salary, 32 l_changes(i).new_salary, 33 sysdate 34 ); 35 END; 36 / PL/SQL procedure successfully completed. SQL> SELECT 2 employee_id, 3 old_salary, 4 new_salary, 5 changed_on 6 FROM 7 employees_history; EMPLOYEE_ID OLD_SALARY NEW_SALARY CHANGED_O ----------- ---------- ---------- --------- 103 9000 9630 22-JUN-23 104 6000 6420 22-JUN-23 105 4800 5136 22-JUN-23 106 4800 5136 22-JUN-23 107 4200 4494 22-JUN-23 SQL> ROLLBACK; Rollback complete. SQL> -- example 03: no \"old\" value returned by INSERT statements SQL> DROP TABLE IF EXISTS insert_demo; Table dropped. SQL> CREATE TABLE insert_demo ( 2 id NUMBER 3 GENERATED ALWAYS AS IDENTITY, 4 vc VARCHAR2(100) NOT NULL, 5 d DATE DEFAULT sysdate NOT NULL, 6 CONSTRAINT pk_insert_demo PRIMARY KEY ( id ) 7 ) 8 / Table created. SQL> var l_old_id number SQL> var l_new_id number SQL> INSERT INTO insert_demo ( 2 vc 3 ) VALUES ( 4 'insert demo' 5 ) 6 RETURNING 7 old id, 8 new id 9 INTO 10 :l_old_id, 11 :l_new_id; 1 row created. SQL> SELECT 2 :l_old_id, 3 :l_new_id; :L_OLD_ID :L_NEW_ID ---------- ---------- 1 SQL> -- example 04: no \"new\" value returning by DELETE statements SQL> DELETE 2 insert_demo 3 WHERE 4 id = :l_new_id 5 RETURNING 6 old id, new id 7 INTO 8 :l_old_id, 9 :l_new_id; 1 row deleted. SQL> SELECT 2 :l_old_id, 3 :l_new_id; :L_OLD_ID :L_NEW_ID ---------- ---------- 1 SQL> ROLLBACK; Rollback complete. The ability to obtain old and new values affected by INSERT, UPDATE, and DELETE statements, as part of the SQL command’s execution, offers developers a uniform approach to reading these values and reduces the amount of work the database must perform. Availability: All Offerings SQL Language Reference: DELETE SQL Language Reference: INSERT SQL Language Reference: UPDATE","title":"Enhanced Returning-Into Clause","component":"guide","version":"latest","name":"returning-into","url":"/guide/latest/categories/sql/23.2/returning-into.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"56":{"id":56,"text":"Version 23.2 Categories SQL Schema privileges enable you to grant a user access to every object of the specified type in another schema. For example, to allow one user to query every table in another schema. -- create user to own tables create user data_owner no authentication; -- create user to query the tables grant create session to reporting_user identified by reporting_user; -- This gives reporting_user query privileges on every current & future table owned by data_owner grant read any table on schema data_owner to reporting_user; -- reporting_user automatically gets access to this table create table data_owner.tab ( c1 int ); conn reporting_user/reporting_user@23cfree select count(*) from data_owner.tab; Result SQL> create user data_owner 2 no authentication; User DATA_OWNER created. SQL> SQL> -- create user to query the tables SQL> grant create session to reporting_user 2 identified by reporting_user; Grant succeeded. SQL> SQL> -- This gives reporting_user query privileges on every current & future table owned by data_owner SQL> grant read any table 2 on schema data_owner 3 to reporting_user; Grant succeeded. SQL> SQL> -- reporting_user automatically gets access to this table SQL> create table data_owner.tab ( c1 int ); Table DATA_OWNER.TAB created. SQL> conn reporting_user/reporting_user@23cfree Connected. SQL> SQL> select count(*) from data_owner.tab; COUNT(*) ---------- 0 Schema privileges simplify data access controls. Availability: All Offerings GRANT Documentation","title":"Schema Level Privileges","component":"guide","version":"latest","name":"schema-level-privileges","url":"/guide/latest/categories/sql/23.2/schema-level-privileges.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"57":{"id":57,"text":"Version 23.2 Categories SQL You can now concatenate an unlimited number of parameters via the CONCAT() function. SELECT CONCAT('Hello World! It currently is ', TO_CHAR(sysdate,'YYYY-MM-DD HH24:MI:SS'), ' here in Vienna.') AS my_string; Result SQL> SELECT CONCAT('Hello World! It currently is ', TO_CHAR(sysdate,'YYYY-MM-DD HH24:MI:SS'), ' here in Vienna.') AS my_string; MY_STRING ___________________________________________________________________ Hello World! It currently is 2024-06-13 16:50:50 here in Vienna. Not having to nest multiple concatenations in multiple CONCAT() calls aids the readability and maintainability of code. Availability: All Offerings CONCAT Documentation","title":"Seamless concatenation via Varargs","component":"guide","version":"latest","name":"seamless-concat","url":"/guide/latest/categories/sql/23.2/seamless-concat.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"58":{"id":58,"text":"Version 23.2 Categories SQL You can now run SELECT expression-only queries without a FROM clause, e.g. adding from dual is no longer needed in such cases. The DUAL table has not disappeared, all queries that use it will continue to work as expected. select 2 * 3; select to_char( sysdate, 'dd.mm.yyyy' ) as today; select sysdate; Result SQL> select 2 2 * 3; 2*3 ---------- 6 SQL> select 2 to_char( 3 sysdate, 4 'dd.mm.yyyy' 5 ) as today; TODAY ---------- 20.06.2023 SQL> select 2 sysdate; SYSDATE --------- 20-JUN-23 Making the from dual clause optional in expression-only SQL statements improves SQL code portability and ease of use for developers. Availability: All Offerings Documentation","title":"SELECT without FROM clause","component":"guide","version":"latest","name":"select-without-from","url":"/guide/latest/categories/sql/23.2/select-without-from.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"59":{"id":59,"text":"Version 23.2 Categories SQL, PL/SQL The SQL Transpiler automatically and wherever possible converts (transpiles) PL/SQL functions within SQL into SQL expressions, without user intervention. create table employees ( employee_id integer primary key, first_name varchar2(100), last_name varchar2(100), hire_date date ); insert into employees (employee_id,first_name,last_name,hire_date) values (100,'Steven','King',to_date('17-JUN-2013 00:00','DD-MON-YYYY HH24:MI')), (101,'Neena','Yang',to_date('21-SEP-2015 00:00','DD-MON-YYYY HH24:MI')), (102,'Lex','Garcia',to_date('13-JAN-2011 00:00','DD-MON-YYYY HH24:MI')), (103,'Alexander','James',to_date('03-JAN-2016 00:00','DD-MON-YYYY HH24:MI')), (104,'Bruce','Miller',to_date('21-MAY-2017 00:00','DD-MON-YYYY HH24:MI')), (105,'David','Williams',to_date('25-JUN-2015 00:00','DD-MON-YYYY HH24:MI')), (106,'Valli','Jackson',to_date('05-FEB-2016 00:00','DD-MON-YYYY HH24:MI')), (107,'Diana','Nguyen',to_date('07-FEB-2017 00:00','DD-MON-YYYY HH24:MI')), (108,'Nancy','Gruenberg',to_date('17-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), (109,'Daniel','Faviet',to_date('16-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), (110,'John','Chen',to_date('28-SEP-2015 00:00','DD-MON-YYYY HH24:MI')); create or replace function get_year ( dt date ) return number as begin return extract ( year from dt ); end get_year; / set serveroutput off -- This disables the transpiler; it is disabled by default alter session set sql_transpiler = 'OFF'; select count (*) from employees where get_year ( hire_date ) = 2015; -- With the transpiler disabled, the predicate is the function call GET_YEAR select * from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); -- Enable the automatic SQL transpiler alter session set sql_transpiler = 'ON'; -- With the transpiler enabled, the expression in the function is extracted -- the predicate is now EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\")) -- => no SQL <> PL/SQL runtime context switch select count (*) from employees where get_year ( hire_date ) = 2017; select * from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); Result SQL> create table employees ( 2 employee_id integer primary key, 3 first_name varchar2(100), 4 last_name varchar2(100), 5 hire_date date 6 ); Table EMPLOYEES created. SQL> SQL> insert into employees (employee_id,first_name,last_name,hire_date) 2 values (100,'Steven','King',to_date('17-JUN-2013 00:00','DD-MON-YYYY HH24:MI')), 3 (101,'Neena','Yang',to_date('21-SEP-2015 00:00','DD-MON-YYYY HH24:MI')), 4 (102,'Lex','Garcia',to_date('13-JAN-2011 00:00','DD-MON-YYYY HH24:MI')), 5 (103,'Alexander','James',to_date('03-JAN-2016 00:00','DD-MON-YYYY HH24:MI')), 6 (104,'Bruce','Miller',to_date('21-MAY-2017 00:00','DD-MON-YYYY HH24:MI')), 7 (105,'David','Williams',to_date('25-JUN-2015 00:00','DD-MON-YYYY HH24:MI')), 8 (106,'Valli','Jackson',to_date('05-FEB-2016 00:00','DD-MON-YYYY HH24:MI')), 9 (107,'Diana','Nguyen',to_date('07-FEB-2017 00:00','DD-MON-YYYY HH24:MI')), 10 (108,'Nancy','Gruenberg',to_date('17-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), 11 (109,'Daniel','Faviet',to_date('16-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), 12 (110,'John','Chen',to_date('28-SEP-2015 00:00','DD-MON-YYYY HH24:MI')); 11 rows inserted. SQL> SQL> SQL> create or replace function get_year ( dt date ) 2 return number as 3 begin 4 return extract ( year from dt ); 5 end get_year; 6 / Function GET_YEAR compiled SQL> SQL> set serveroutput off SQL> -- This disables the transpiler; it is disabled by default SQL> alter session set sql_transpiler = 'OFF'; Session altered. SQL> SQL> select count (*) from employees 2 where get_year ( hire_date ) = 2015; COUNT(*) ---------- 3 SQL> SQL> -- With the transpiler disabled, the predicate is the function call GET_YEAR SQL> select * 2 from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); PLAN_TABLE_OUTPUT ---------------------------------------------------------------------------- EXPLAINED SQL STATEMENT: ------------------------ select count (*) from employees where get_year ( hire_date ) = 2015 Plan hash value: 1756381138 ---------------------------------------- | Id | Operation | Name | ---------------------------------------- | 0 | SELECT STATEMENT | | | 1 | SORT AGGREGATE | | |* 2 | TABLE ACCESS FULL| EMPLOYEES | ---------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 2 - filter(\"GET_YEAR\"(\"HIRE_DATE\")=2015) 19 rows selected. SQL> SQL> -- Enable the automatic SQL transpiler SQL> alter session set sql_transpiler = 'ON'; Session altered. SQL> SQL> -- With the transpiler enabled, the expression in the function is extracted SQL> -- the predicate is now EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\")) SQL> -- => no SQL <> PL/SQL runtime context switch SQL> select count (*) from employees 2 where get_year ( hire_date ) = 2017; COUNT(*) ---------- 2 SQL> SQL> select * 2 from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); PLAN_TABLE_OUTPUT -------------------------------------------------------------------------- EXPLAINED SQL STATEMENT: ------------------------ select count (*) from employees where get_year ( hire_date ) = 2017 Plan hash value: 1756381138 ---------------------------------------- | Id | Operation | Name | ---------------------------------------- | 0 | SELECT STATEMENT | | | 1 | SORT AGGREGATE | | |* 2 | TABLE ACCESS FULL| EMPLOYEES | ---------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 2 - filter(EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\"))=2017) 19 rows selected. The conversion operation is transparent to users and can improve performance by reducing overhead accrued from switching between the SQL and PL/SQL runtime. Availability: All Offerings SQL Tuning Guide","title":"SQL Transpiler","component":"guide","version":"latest","name":"sql-transpiler","url":"/guide/latest/categories/sql/23.2/sql-transpiler.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"60":{"id":60,"text":"Version 23.2 Categories SQL You can pass INTERVAL datatypes to the SUM and AVG aggregate and analytic functions. with rws as ( select interval '0' hour + numtodsinterval ( level, 'hour' ) dsi connect by level with rws as ( 2 select interval '0' hour + numtodsinterval ( level, 'hour' ) dsi 3 connect by level <= 10 4 ) 5 select sum ( dsi ) total_duration, 6 avg ( dsi ) mean_duration 7 from rws; TOTAL_DURATION MEAN_DURATION ------------------- ------------------- +02 07:00:00.000000 +00 05:30:00.000000 This enhancement makes it easier for developers to calculate totals and averages over INTERVAL values. Availability: All Offerings AVG Documentation SUM Documentation","title":"SUM and AVG over INTERVAL data types","component":"guide","version":"latest","name":"sum-and-avg-over-interval-types","url":"/guide/latest/categories/sql/23.2/sum-and-avg-over-interval-types.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"61":{"id":61,"text":"Version 23.2 Categories SQL The Table Value Constructor can be used to generate multiple table values (e.g. rows) in a single invocation. This feature is part of the ISO SQL:1992 standard. -- Table to demonstrate the table value constructor CREATE TABLE bookings ( id NUMBER, location VARCHAR2(25), type VARCHAR2(25) ); -- Insert multiple rows with a single insert statement INSERT INTO bookings VALUES (12113, 'Vienna', 'Family'), (62361, 'San Francisco', 'Business'), (38172, 'Berlin', 'Leisure'); -- Retrieve newly inserted rows SELECT * FROM bookings; -- Generate multiple rows using the table value constructor SELECT employee_id, first_name FROM ( VALUES (1,'Scott'), (2,'James'), (3,'John') ) employees (employee_id, first_name); Result SQL> -- Table to demonstrate the table value constructor SQL> CREATE TABLE bookings 2 ( 3 id NUMBER, 4 location VARCHAR2(25), 5 type VARCHAR2(25) 6 ); Table BOOKINGS created. SQL> -- Insert multiple rows with a single insert statement SQL> INSERT INTO bookings 2 VALUES (12113, 'Vienna', 'Family'), 3 (62361, 'San Francisco', 'Business'), 4 (38172, 'Berlin', 'Leisure'); 3 rows inserted. SQL> -- Retrieve newly inserted rows SQL> SELECT * FROM bookings; ID LOCATION TYPE -------- ---------------- -------- 12113 Vienna Family 62361 San Francisco Business 38172 Berlin Leisure SQL> -- Generate multiple rows using the table value constructor SQL> SELECT employee_id, first_name 2 FROM ( 3 VALUES (1,'Scott'), 4 (2,'James'), 5 (3,'John') 6 ) employees (employee_id, first_name); EMPLOYEE_ID FIRST_NAME -------------- ---------- 1 Scott 2 James 3 John The table value constructor enables users to insert multiple rows within a single INSERT operation. This avoids unnecessary additional INSERT executions and roundtrips from and to the client for inserting multiple rows. Using this feature can make SQL scripts more concise and readable. Using this feature can save time when writing INSERT statements manually. The table value constructor provides a convenient and concise way to generate multiple rows with values. Availability: All Offerings Multi-row INSERT and VALUES row generation documentation Multi-row INSERT and VALUES row generation example","title":"Table Value Constructor","component":"guide","version":"latest","name":"table-value-constructor","url":"/guide/latest/categories/sql/23.2/table-value-constructor.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"62":{"id":62,"text":"Version 23.2 Categories SQL UPDATE and DELETE statements can leverage join conditions on other tables to determine which rows to modify or delete in the source table. -- Get current salary for all employees in the IT department SELECT e.first_name, e.last_name, e.salary FROM employees e, departments d WHERE e.department_id=d.department_id AND d.department_name = 'IT'; -- Increase salary by 50% for all employees in the IT department UPDATE employees e SET e.salary=e.salary*1.5 FROM departments d WHERE e.department_id=d.department_id AND d.department_name = 'IT'; -- Verify changes SELECT e.first_name, e.last_name, e.salary FROM employees e, departments d WHERE e.department_id=d.department_id AND d.department_name = 'IT'; -- Commit changes COMMIT; -- Get all Sales Reps who were hired before the 1st of January 2016 SELECT e.first_name, e.last_name, e.hire_date FROM employees e, departments d, jobs j WHERE e.department_id=d.department_id AND d.department_name = 'Sales' AND e.job_id=j.job_id AND j.job_title = 'Sales Representative' AND e.hire_date -- Get current salary for all employees in the IT department SQL> SELECT e.first_name, e.last_name, e.salary 2 FROM employees e, departments d 3 WHERE e.department_id=d.department_id 4* AND d.department_name = 'IT'; FIRST_NAME LAST_NAME SALARY _____________ ____________ _________ Alexander James 9000 Bruce Miller 6000 David Williams 4800 Valli Jackson 4800 Diana Nguyen 4200 SQL> SQL> -- Increase salary by 50% for all employees in the IT department SQL> UPDATE employees e SET e.salary=e.salary*1.5 2 FROM departments d 3 WHERE e.department_id=d.department_id 4* AND d.department_name = 'IT'; 5 rows updated. SQL> SQL> -- Verify changes SQL> SELECT e.first_name, e.last_name, e.salary 2 FROM employees e, departments d 3 WHERE e.department_id=d.department_id 4* AND d.department_name = 'IT'; FIRST_NAME LAST_NAME SALARY _____________ ____________ _________ Alexander James 13500 Bruce Miller 9000 David Williams 7200 Valli Jackson 7200 Diana Nguyen 6300 SQL> SQL> -- Commit changes SQL> COMMIT; Commit complete. SQL> -- Get all Sales Reps who were hired before the 1st of January 2016 SQL> SELECT e.first_name, e.last_name, e.hire_date 2 FROM employees e, departments d, jobs j 3 WHERE e.department_id=d.department_id 4 AND d.department_name = 'Sales' 5 AND e.job_id=j.job_id 6 AND j.job_title = 'Sales Representative' 7* AND e.hire_date SQL> -- Delete all Sales Reps who were hired before the 1st of January 2016 SQL> DELETE FROM employees e 2 FROM departments d, jobs j 3 WHERE e.department_id=d.department_id 4 AND d.department_name = 'Sales' 5 AND e.job_id=j.job_id 6 AND j.job_title = 'Sales Representative' 7* AND e.hire_date SQL> -- Verify changes SQL> SELECT e.first_name, e.last_name, e.hire_date 2 FROM employees e, departments d, jobs j 3 WHERE e.department_id=d.department_id 4 AND d.department_name = 'Sales' 5 AND e.job_id=j.job_id 6 AND j.job_title = 'Sales Representative' 7* AND e.hire_date SQL> -- Commit changes SQL> COMMIT; Commit complete. Leveraging joins as part of UPDATE and DELETE statements makes writing, executing and reading data manipulation statements easier. Availability: All Offerings UPDATE statement and DELETE statement","title":"UPDATE/DELETE via JOIN","component":"guide","version":"latest","name":"update-delete-via-join","url":"/guide/latest/categories/sql/23.2/update-delete-via-join.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"63":{"id":63,"text":"Version 23.2 Categories SQL The maximum number of columns allowed in a database table or view has been increased to 4096. This feature allows you to build applications that can store attributes in a single table with more than the previous 1000-column limit. Some applications, such as Machine Learning and streaming IoT application workloads, may require the use of de-normalized tables with more than 1000 columns. The majority of existing database applications might not need extra-wide tables. Before you can create tables with more than 1000 columns you must ensure that the following initialization parameters are set to the required values: The value of the compatible parameter must be set to 23.0.0 or higher Once compatible is set accordingly you must change max_columns to extended Please refer to the Database Upgrade Guide for more details about the compatible initialization parameter and the implications of changing it. Typing a create table statement featuring 4096 columns would result in a very long statement. The example simplifies the process using Native Dynamic SQL; it assumes that the above mentioned prerequisites are met. DECLARE l_sql CLOB; c_num_cols CONSTANT PLS_INTEGER := 4096; BEGIN -- construct the `create table` statement and store it as a CLOB l_sql := 'create table demotable (' || chr(13) || ' c0001 number' || chr(13); FOR i IN 2..c_num_cols LOOP l_sql := l_sql || ',c' || lpad(i, 4, 0) || ' number' || chr(13); END LOOP; l_sql := l_sql || ')'; -- create the table EXECUTE IMMEDIATE l_sql; EXCEPTION -- notify of errors WHEN OTHERS THEN raise_application_error( -20000, 'an unexpected error occurred ' || ' (' || sqlerrm || ')' ); END; / -- validate the number of columns in the table SELECT count(*) FROM user_tab_columns WHERE table_name = 'DEMOTABLE'; Result SQL> DECLARE 2 l_sql CLOB; 3 c_num_cols CONSTANT PLS_INTEGER := 4096; 4 BEGIN 5 -- construct the `create table` statement and store it as a CLOB 6 l_sql := 'create table demotable (' || chr(13) || ' c0001 number' || chr(13); 7 FOR i IN 2..c_num_cols LOOP 8 l_sql := l_sql || ',c' || lpad(i, 4, 0) || ' number' || chr(13); 9 END LOOP; 10 l_sql := l_sql || ')'; 11 12 -- create the table 13 EXECUTE IMMEDIATE l_sql; 14 EXCEPTION 15 -- notify of errors 16 WHEN OTHERS THEN 17 raise_application_error( 18 -20000, 19 'an unexpected error occurred ' 20 || ' (' 21 || sqlerrm 22 || ')' 23 ); 24 END; 25 / PL/SQL procedure successfully completed. SQL> -- validate the number of columns in the table SQL> SELECT 2 count(*) 3 FROM 4 user_tab_columns 5 WHERE 6 table_name = 'DEMOTABLE'; COUNT(*) ---------- 4096 Whilst most database applications should be fine with the existing limit of 1000 columns per table or view, certain IoT (Internet of Things) or Machine Learning workloads might require wider tables. In such cases you can make use of the wide tables offered by Oracle Database 23c. Availability: All Offerings Database Reference: max_columns initialization parameter Database Reference: compatible initialization parameter Blog post discussing wide tables on blogs.oracle.com","title":"4096 table columns","component":"guide","version":"latest","name":"wide-tables","url":"/guide/latest/categories/sql/23.2/wide-tables.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"64":{"id":64,"text":"Version 23.2 Categories SQL Annotations are a lightweight declarative facility for developers to centrally register usage properties for database schema objects. Annotations are stored in dictionary tables and available to any application looking to standardize behavior across common data in related applications. Annotations are not interpreted by the database in any way and are custom data properties for database metadata - including table columns, tables, and indexes. Applications can use annotations as additional property metadata for rendering user interfaces or customizing application logic. -- example 01: table-level annotation CREATE TABLE customers ( customer_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY, email_address VARCHAR2(255 CHAR) NOT NULL, full_name VARCHAR2(255 CHAR) NOT NULL ) ANNOTATIONS ( sensitivity 'high', departments 'sales, delivery', frontOffice ) / -- example 02: adding a column-level annotation ALTER TABLE customers MODIFY ( email_address ANNOTATIONS ( sensitivity 'highest' ) ) / -- example 03: table and column level annotations CREATE TABLE employees ( id NUMBER(5) ANNOTATIONS ( identity, display_as 'Employee ID', group_name 'Emp_Info'), name VARCHAR2(50) ANNOTATIONS ( display_as 'Employee Name', group_name 'Emp_Info'), salary NUMBER ANNOTATIONS ( display_as 'Employee Salary', UI_hidden) ) ANNOTATIONS ( display_as 'Employee Table' ) / -- example 04: query the dictionary for annotation usage SELECT object_name, object_type, column_name, annotation_name, annotation_value FROM user_annotations_usage ORDER BY object_name, column_name / Result SQL> -- example 01: table-level annotation SQL> CREATE TABLE customers ( 2 customer_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY, 3 email_address VARCHAR2(255 CHAR) NOT NULL, 4 full_name VARCHAR2(255 CHAR) NOT NULL 5 ) 6 ANNOTATIONS ( 7 sensitivity 'high', 8 departments 'sales, delivery', 9 frontOffice 10 ) 11 / Table CUSTOMERS created. SQL> -- example 02: adding a column-level annotation SQL> ALTER TABLE customers MODIFY ( 2 email_address ANNOTATIONS ( sensitivity 'highest' ) 3 ) 4 / Table CUSTOMERS altered. SQL> -- example 03: table and column level annotations SQL> CREATE TABLE employees 2 ( 3 id NUMBER(5) 4 ANNOTATIONS ( 5 identity, 6 display_as 'Employee ID', 7 group_name 'Emp_Info'), 8 name VARCHAR2(50) 9 ANNOTATIONS ( 10 display_as 'Employee Name', 11 group_name 'Emp_Info'), 12 salary NUMBER 13 ANNOTATIONS ( 14 display_as 'Employee Salary', UI_hidden) 15 ) 16 ANNOTATIONS ( 17 display_as 'Employee Table' 18 ) 19 / Table EMPLOYEES created. SQL> -- example 04: query the dictionary for annotation usage SQL> SELECT 2 object_name, 4 column_name, 5 annotation_name, 6 annotation_value 7 FROM 8 user_annotations_usage 9 ORDER BY 10 object_name, 11 column_name 12 / OBJECT_NAME COLUMN_NAME ANNOTATION_NAME ANNOTATION_VALUE ______________ ________________ __________________ ___________________ CUSTOMERS EMAIL_ADDRESS SENSITIVITY highest CUSTOMERS DEPARTMENTS sales, delivery CUSTOMERS FRONTOFFICE CUSTOMERS SENSITIVITY high EMPLOYEES ID IDENTITY EMPLOYEES ID GROUP_NAME Emp_Info EMPLOYEES ID DISPLAY_AS Employee ID EMPLOYEES NAME DISPLAY_AS Employee Name EMPLOYEES NAME GROUP_NAME Emp_Info EMPLOYEES SALARY DISPLAY_AS Employee Salary EMPLOYEES SALARY UI_HIDDEN EMPLOYEES DISPLAY_AS Employee Table 12 rows selected. Annotating the data model with metadata provides additional data integrity, consistency and data model documentation benefits. Your applications can store user-defined metadata for database objects and table columns that other applications or users can retrieve and use. Storing the metadata along with the data guarantees consistency and universal accessibility to any user or application that uses the data. Availability: All Offerings Database Concepts Guide Database Development Guide","title":"Annotations","component":"guide","version":"latest","name":"annotations","url":"/guide/latest/categories/sql/features/annotations.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"65":{"id":65,"text":"Version 23.2 Categories SQL The BOOLEAN data type enables the storage and processing of TRUE and FALSE values. Boolean values can be used as table column values or inside SQL query expressions. To declare a table column of type BOOLEAN, either use the BOOLEAN or BOOL keyword. This feature is part of the ISO SQL:1999 standard. -- Create a new table containing two boolean columns CREATE TABLE email_addresses ( user_id NUMBER NOT NULL, email VARCHAR2(255) NOT NULL, active BOOLEAN NOT NULL, primary BOOL NOT NULL ); -- Insert values into the table INSERT INTO email_addresses (user_id, active, primary, email) VALUES ( 1, true, true, 'jon.doe@example.com'), ( 2, true, true, 'jane.smith@gmail.com'), ( 2, false, false, 'jsmith@gmail.com'), ( 3, true, true, 'max.well@example.com'), ( 3, true, false, 'mwell@gmail.com'); COMMIT; -- Select all email addresses that are active SELECT email FROM email_addresses WHERE active; -- Select all email addresses that are active but not primary SELECT email FROM email_addresses WHERE active AND NOT primary; Result SQL> -- Create a new table containing two boolean columns SQL> CREATE TABLE email_addresses ( user_id NUMBER NOT NULL, email VARCHAR2(255) NOT NULL, active BOOLEAN NOT NULL, primary BOOL NOT NULL ); Table created. SQL> -- Insert values into the table SQL> INSERT INTO email_addresses (user_id, active, primary, email) VALUES ( 1, true, true, 'jon.doe@example.com'), ( 2, true, true, 'jane.smith@gmail.com'), ( 2, false, false, 'jsmith@gmail.com'), ( 3, true, true, 'max.well@example.com'), ( 3, true, false, 'mwell@gmail.com'); 5 rows created. SQL> COMMIT; Commit complete. SQL> -- Select all email addresses that are active SQL> SELECT email FROM email_addresses WHERE active; EMAIL -------------------------------------------------------------------------------- jon.doe@example.com jane.smith@gmail.com max.well@example.com mwell@gmail.com SQL> -- Select all email addresses that are active but not primary SQL> SELECT email FROM email_addresses WHERE active AND NOT primary; EMAIL -------------------------------------------------------------------------------- mwell@gmail.com The BOOLEAN data type standardizes the storage of \"Yes\" and \"No\" values. Availability: All Offerings Documentation Example","title":"Boolean data type","component":"guide","version":"latest","name":"boolean","url":"/guide/latest/categories/sql/features/boolean.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"66":{"id":66,"text":"Version 23.2 Categories SQL You can now pass DATE, TIMESTAMP, and INTERVAL values to the CEIL and FLOOR functions. These functions include an optional second argument to specify a rounding unit. You can also pass INTERVAL values to ROUND and TRUNC functions. with vals as ( select interval '+123-5' year(9) to month ymi, interval '+0 12:34:56' day to second dsi, to_date ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) dt, to_timestamp ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) ts ) select -- CEIL rounds up values ceil ( ymi ) as year_ceil, ceil ( dsi ) as day_ceil, ceil ( dt ) as dt_day_ceil, ceil ( ts ) as ts_day_ceil, -- FLOOR rounds down the datetime value to the units in the second paramter floor ( ymi, 'year' ) as ymi_year_floor, floor ( dsi, 'hh24' ) as dsi_hour_floor, floor ( dt, 'hh24' ) as dt_hour_floor, floor ( ts, 'hh24' ) as ts_hour_floor, -- ROUND now supports INTERVALs round ( dsi, 'mi' ) as dsi_minute_round from vals; Result SQL> with vals as ( 2 select 3 interval '+123-5' year(9) to month ymi, 4 interval '+0 12:34:56' day to second dsi, 5 to_date ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) dt, 6 to_timestamp ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) ts 7 ) 8 select 9 -- CEIL rounds up values 10 ceil ( ymi ) as year_ceil, 11 ceil ( dsi ) as day_ceil, 12 ceil ( dt ) as dt_day_ceil, 13 ceil ( ts ) as ts_day_ceil, 14 -- FLOOR rounds down the datetime value to the units in the second paramter 15 floor ( ymi, 'year' ) as ymi_year_floor, 16 floor ( dsi, 'hh24' ) as dsi_hour_floor, 17 floor ( dt, 'hh24' ) as dt_hour_floor, 18 floor ( ts, 'hh24' ) as ts_hour_floor, 19 -- ROUND now supports INTERVALs 20 round ( dsi, 'mi' ) as dsi_minute_round 21 from vals; YEAR_CE DAY_CEIL DT_DAY_CEIL TS_DAY_CEIL YMI_YEA DSI_HOUR_FLOOR DT_HOUR_FLOOR TS_HOUR_FLOOR DSI_MINUTE_ROUND ------- ------------------- ----------------- ----------------- ------- ------------------- ----------------- ----------------- ------------------- +124-00 +01 00:00:00.000000 13-APR-2023 00:00 13-APR-2023 00:00 +123-00 +00 12:00:00.000000 12-APR-2023 12:00 12-APR-2023 12:00 +00 12:35:00.000000 These functions make it easy to find the upper and lower bounds for date and time values for a specified unit. Availability: All Offerings CEIL, FLOOR, ROUND, and TRUNC Date Functions Documentation","title":"CEIL, FLOOR, and ROUND for datetime data types","component":"guide","version":"latest","name":"ceil-floor-round-for-datetime-types","url":"/guide/latest/categories/sql/features/ceil-floor-round-for-datetime-types.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"67":{"id":67,"text":"Version 23.2 Categories SQL You can specify a default value when updating a column to NULL. The database assigns the default value to the column instead of NULL. create table default_values ( id integer, c1 number default extract ( second from systimestamp ), c2 number default on null extract ( second from systimestamp ), c3 number default on null for insert only extract ( second from systimestamp ), c4 number default on null for insert and update extract ( second from systimestamp ) ); -- For the columns with DEFAULT ON NULL, the database replaces NULL with the timestamp value insert into default_values values ( 1, null, null, null, null ); select * from default_values; -- The standard DEFAULT clause has no impact on UPDATEs, so C1 remains NULL update default_values set c1 = null; -- DEFAULT ON NULL adds an implicit NOT NULL constraint to the column -- The default only applies on insert, so this raises an ORA-01407 error update default_values set c2 = null; -- DEFAULT ON NULL FOR INSERT ONLY is equivalent to DEFAULT ON NULL -- So this also raises an ORA-01407 error update default_values set c3 = null; -- C4 is DEFAULT ON NULL FOR INSERT AND UPDATE -- So the database replaces NULL with its default value update default_values set c4 = null; -- The value of C4 has changed; all other columns retain their INSERT value select * from default_values; Result SQL> create table default_values ( 2 id integer, 3 c1 number default extract ( second from systimestamp ), 4 c2 number default on null extract ( second from systimestamp ), 5 c3 number default on null for insert only extract ( second from systimestamp ), 6 c4 number default on null for insert and update extract ( second from systimestamp ) 7 ); Table created. SQL> SQL> -- For the columns with DEFAULT ON NULL, the database replaces NULL with the timestamp value SQL> insert into default_values 2 values ( 1, null, null, null, null ); 1 row created. SQL> SQL> select * from default_values; ID C1 C2 C3 C4 ---------- ---------- ---------- ---------- ---------- 1 1.585189 1.585189 1.585189 SQL> SQL> -- The standard DEFAULT clause has no impact on UPDATEs, so C1 remains NULL SQL> update default_values 2 set c1 = null; 1 row updated. SQL> SQL> -- DEFAULT ON NULL adds an implicit NOT NULL constraint to the column SQL> -- The default only applies on insert, so this raises an ORA-01407 error SQL> update default_values 2 set c2 = null; set c2 = null * ERROR at line 2: ORA-01407: cannot update (\"CHRIS\".\"DEFAULT_VALUES\".\"C2\") to NULL SQL> SQL> -- DEFAULT ON NULL FOR INSERT ONLY is equivalent to DEFAULT ON NULL SQL> -- So this also raises an ORA-01407 error SQL> update default_values 2 set c3 = null; set c3 = null * ERROR at line 2: ORA-01407: cannot update (\"CHRIS\".\"DEFAULT_VALUES\".\"C3\") to NULL SQL> SQL> -- C4 is DEFAULT ON NULL FOR INSERT AND UPDATE SQL> -- So the database replaces NULL with its default value SQL> update default_values 2 set c4 = null; 1 row updated. SQL> SQL> -- The value of C4 has changed; all other columns retain their INSERT value SQL> select * from default_values; ID C1 C2 C3 C4 ---------- ---------- ---------- ---------- ---------- 1 1.585189 1.585189 1.608401 Providing a default value for NULL on UPDATE simplifies code to map NULL to a non NULL value when changing data. Availability: All Offerings CREATE TABLE Documentation","title":"Default ON NULL for UPDATE statements","component":"guide","version":"latest","name":"default-on-null-update","url":"/guide/latest/categories/sql/features/default-on-null-update.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"68":{"id":68,"text":"Version 23.2 Categories SQL The FUZZY_MATCH operator enables you to compare strings for similarity using algorithms such as Jaro-Winkler and Levenshtein distance. /* Compare the team names to \"Champions City\" with the different fuzzy matching algorithms */ with teams as ( select * from ( values ( 'Champions United' ), ( 'Runner-up City' ), ( 'Midtable Town' ), ( 'Underdogs United' ), ( 'Upstart FC' ), ( 'Relegated Athletic' ) ) t ( team_name ) ), match_value as ( select 'Champions City' match_team ) select team_name, match_team, fuzzy_match ( levenshtein, team_name, match_team ) as levenshtein, fuzzy_match ( jaro_winkler, team_name, match_team ) as jaro_winkler, fuzzy_match ( bigram, team_name, match_team ) as bigram, fuzzy_match ( trigram, team_name, match_team ) as trigram, fuzzy_match ( whole_word_match, team_name, match_team ) as wwm, fuzzy_match ( longest_common_substring, team_name, match_team ) as lcs from teams cross join match_value; /* Find the team names that match \"Champions City\" with Jaro-Winkler score > 90 */ with teams as ( select * from ( values ( 'Champions United' ), ( 'Runner-up City' ), ( 'Midtable Town' ), ( 'Underdogs United' ), ( 'Upstart FC' ), ( 'Relegated Athletic' ) ) t ( team_name ) ), match_value as ( select 'Champions City' match_team ) select team_name, match_team from teams join match_value on fuzzy_match ( jaro_winkler, team_name, match_team ) > 90; Result SQL> /* Compare the team names to \"Champions City\" for the different fuzzy matching algorithms */ SQL> with teams as ( 2 select * from ( 3 values ( 'Champions United' ), 4 ( 'Runner-up City' ), 5 ( 'Midtable Town' ), 6 ( 'Underdogs United' ), 7 ( 'Upstart FC' ), 8 ( 'Relegated Athletic' ) 9 ) t ( team_name ) 10 ), match_value as ( 11 select 'Champions City' match_team 12 ) 13 select team_name, match_team, 14 fuzzy_match ( levenshtein, team_name, match_team ) as levenshtein, 15 fuzzy_match ( jaro_winkler, team_name, match_team ) as jaro_winkler, 16 fuzzy_match ( bigram, team_name, match_team ) as bigram, 17 fuzzy_match ( trigram, team_name, match_team ) as trigram, 18 fuzzy_match ( whole_word_match, team_name, match_team ) as wwm, 19 fuzzy_match ( longest_common_substring, team_name, match_team ) as lcs 20 from teams 21 cross join match_value; TEAM_NAME MATCH_TEAM LEVENSHTEIN JARO_WINKLER BIGRAM TRIGRAM WWM LCS ------------------ -------------- ----------- ------------ ---------- ---------- ---------- ---------- Champions United Champions City 75 92 66 57 50 62 Runner-up City Champions City 36 57 30 25 50 35 Midtable Town Champions City 8 44 0 0 0 7 Underdogs United Champions City 32 49 13 0 0 12 Upstart FC Champions City 8 56 0 0 0 7 Relegated Athletic Champions City 12 41 0 0 0 5 6 rows selected. SQL> SQL> /* Find the team names that match \"Champions City\" with Jaro-Winkler score > 90 */ SQL> with teams as ( 2 select * from ( 3 values ( 'Champions United' ), 4 ( 'Runner-up City' ), 5 ( 'Midtable Town' ), 6 ( 'Underdogs United' ), 7 ( 'Upstart FC' ), 8 ( 'Relegated Athletic' ) 9 ) t ( team_name ) 10 ), match_value as ( 11 select 'Champions City' match_team 12 ) 13 select team_name, match_team 14 from teams 15 join match_value 16 on fuzzy_match ( jaro_winkler, team_name, match_team ) > 90; TEAM_NAME MATCH_TEAM ------------------ -------------- Champions United Champions City This operator makes it easier to find similar strings with SQL. Availability: All Offerings FUZZY_MATCH Documentation","title":"FUZZY_MATCH operator","component":"guide","version":"latest","name":"fuzzy-match-operator","url":"/guide/latest/categories/sql/features/fuzzy-match-operator.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"69":{"id":69,"text":"Version 23.2 Categories SQL The GROUP BY column alias feature is a shorthand for not having to repeat lengthy expressions from the SELECT clause in the GROUP BY and/or HAVING clause but instead use the defined column alias. The GROUP BY position feature is a similar shorthand and great for ad-hoc queries by simply referring to the expression position in the SELECT clause. Caution is required when using this feature, however, as it can lead novices to wrong conclusions and unexpected results as they may be surprised by or not aware of that data is being grouped differently when the position of the expression in the SELECT clause changes. This is particularly important for GROUP BY ROLLUP() and other super-aggregate grouping functions, hence this functionality is guarded behind a session parameter group_by_position_enabled. Note the GROUP BY combined_name which refers to a column alias in the SELECT. SELECT CONCAT(r.name, ': ', co.name) AS combined_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY combined_name ORDER BY combined_name; Result SQL> SELECT CONCAT(r.name, ': ', co.name) AS combined_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY combined_name ORDER BY combined_name; COMBINED_NAME POPULATION_M ------------------------------ ------------ Oceania: Australia 23.47 Oceania: Fiji .926 Oceania: Kiribati .109 Oceania: Marshall Islands .076 Oceania: Micronesia .104 Oceania: Nauru .01 Oceania: New Zealand 4.546 Oceania: Palau .022 Oceania: Papua New Guinea 7.027 Oceania: Samoa .201 Oceania: Solomon Islands .66 Oceania: Tonga .106 Oceania: Tuvalu .011 Oceania: Vanuatu .288 South America: Argentina 44.694 South America: Bolivia 11.306 South America: Brazil 208.847 South America: Chile 17.925 South America: Colombia 48.169 South America: Ecuador 16.291 South America: Guyana .741 South America: Paraguay 7.026 South America: Peru 31.331 South America: Suriname .598 South America: Uruguay 3.369 South America: Venezuela 31.689 26 rows selected. Note the GROUP BY ROLLUP (1, 2) which refers to the first and second column in the SELECT. -- Enable the GROUP_BY_POSITION parameter for the session ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; SELECT r.name AS region_name, co.name AS country_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; Result SQL> -- Enable the GROUP_BY_POSITION parameter for the session SQL> ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; Session altered. SQL> SELECT r.name AS region_name, co.name AS country_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; REGION_NAME COUNTRY_NAME POPULATION_M ------------- ---------------- ------------ Oceania Australia 23.47 Oceania Fiji .926 Oceania Kiribati .109 Oceania Marshall Islands .076 Oceania Micronesia .104 Oceania Nauru .01 Oceania New Zealand 4.546 Oceania Palau .022 Oceania Papua New Guinea 7.027 Oceania Samoa .201 Oceania Solomon Islands .66 Oceania Tonga .106 Oceania Tuvalu .011 Oceania Vanuatu .288 Oceania 37.556 South America Argentina 44.694 South America Bolivia 11.306 South America Brazil 208.847 South America Chile 17.925 South America Colombia 48.169 South America Ecuador 16.291 South America Guyana .741 South America Paraguay 7.026 South America Peru 31.331 South America Suriname .598 South America Uruguay 3.369 South America Venezuela 31.689 South America 421.986 459.542 29 rows selected. Let’s assume that the report was supposed to list countries first and the region next to it instead of the current region first and the country next to it. If you change the columns in the SELECT but forget to amend the GROUP BY ROLLUP clause as well, because you are grouping by column position in the SELECT list, your results will be grouped differently and be no longer be the same. -- Enable the GROUP_BY_POSITION parameter for the session (only needed once per session) ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; Result SQL> -- Enable the GROUP_BY_POSITION parameter for the session (only needed once per session) SQL> ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; Session altered. SQL> SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; COUNTRY_NAME REGION_NAME POPULATION_M ---------------- ------------- ------------ Samoa Oceania .201 Fiji Oceania .926 Micronesia Oceania .104 Kiribati Oceania .109 Marshall Islands Oceania .076 Nauru Oceania .01 New Zealand Oceania 4.546 Papua New Guinea Oceania 7.027 Palau Oceania .022 Solomon Islands Oceania .66 Tonga Oceania .106 Tuvalu Oceania .011 Australia Oceania 23.47 Vanuatu Oceania .288 Argentina South America 44.694 Bolivia South America 11.306 Brazil South America 208.847 Chile South America 17.925 Colombia South America 48.169 Venezuela South America 31.689 Guyana South America .741 Peru South America 31.331 Paraguay South America 7.026 Suriname South America .598 Uruguay South America 3.369 Ecuador South America 16.291 Venezuela 31.689 Uruguay 3.369 Suriname .598 Paraguay 7.026 Peru 31.331 Guyana .741 Ecuador 16.291 Colombia 48.169 Chile 17.925 Brazil 208.847 Bolivia 11.306 Argentina 44.694 Samoa .201 Vanuatu .288 Tuvalu .011 Tonga .106 Solomon Islands .66 Palau .022 Papua New Guinea 7.027 New Zealand 4.546 Nauru .01 Marshall Islands .076 Kiribati .109 Micronesia .104 Fiji .926 459.542 Australia 23.47 53 rows selected. In comparison, this does not happen when using the column alias: SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (region_name, country_name) ORDER BY region_name; Result SQL> SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (region_name, country_name) ORDER BY region_name; COUNTRY_NAME REGION_NAME POPULATION_M ---------------- ------------- ------------ Australia Oceania 23.47 Fiji Oceania .926 Kiribati Oceania .109 Marshall Islands Oceania .076 Micronesia Oceania .104 Nauru Oceania .01 New Zealand Oceania 4.546 Palau Oceania .022 Papua New Guinea Oceania 7.027 Samoa Oceania .201 Solomon Islands Oceania .66 Tonga Oceania .106 Tuvalu Oceania .011 Vanuatu Oceania .288 Oceania 37.556 Argentina South America 44.694 Bolivia South America 11.306 Brazil South America 208.847 Chile South America 17.925 Colombia South America 48.169 Ecuador South America 16.291 Guyana South America .741 Paraguay South America 7.026 Peru South America 31.331 Suriname South America .598 Uruguay South America 3.369 Venezuela South America 31.689 South America 421.986 459.542 29 rows selected. GROUP BY column alias and position are both convenient shorthands for writing concise ad-hoc SQL statements. Extra caution should be given when using GROUP BY column position as changing the column position in the SELECT part can have direct influence over the grouping of the data. Availability: All Offerings Documentation","title":"GROUP BY column alias or position","component":"guide","version":"latest","name":"group-by-alias-position","url":"/guide/latest/categories/sql/features/group-by-alias-position.html","titles":[{"text":"GROUP BY column alias","hash":"_group_by_column_alias","id":1},{"text":"GROUP BY column position","hash":"_group_by_column_position","id":2},{"text":"Caution","hash":"_caution","id":3},{"text":"Benefits","hash":"_benefits","id":4},{"text":"Further information","hash":"_further_information","id":5}]},"70":{"id":70,"text":"Version 12.1.0.1 Categories SQL The identity columns feature can be used to designate one column in the table as the identity for the row. The database will automatically assign an increasing integer value from a sequence generator to the identity column for each subsequent INSERT statement. This feature is sometimes also referred to as autoincrement. This feature is part of the ISO SQL:2016 standard. To declare a column as an identity in a table, use the GENERATED AS IDENTITY column attribute: -- Create a table with the column \"ID\" generated as Identity column CREATE TABLE employees ( id NUMBER GENERATED AS IDENTITY NOT NULL PRIMARY KEY, first_name VARCHAR2(10), last_name VARCHAR2(10) NOT NULL, job_title VARCHAR2(20) NOT NULL ); -- Note the absence of the \"ID\" column in the INSERT statement. -- Although it is a primary key and NOT NULL, the inserts succeed. INSERT INTO employees (first_name, last_name, job_title) VALUES ('Gerald', 'Venzl', 'Developer'); INSERT INTO employees (first_name, last_name, job_title) VALUES ('Andres', 'Almiray', 'Developer'); INSERT INTO employees (first_name, last_name, job_title) VALUES ('Chris', 'Saxon', 'Developer Evangelist'); COMMIT; -- The SELECT statement will show the \"ID\" column with values filled by the generated identity values. SELECT * FROM employees; The identity column provides additional syntax modifiers to: Always generate a new identity value, via GENERATED ALWAYS AS IDENTITY Generate a new identity value if none has been provided, via GENERATED BY DEFAULT Generate a new identity value if one has been provided by evaluates to NULL, via GENERATED BY DEFAULT ON NULL Provide additional identity generation options via GENERATED AS IDENTITY () Result SQL> -- Create a table with the column \"ID\" generated as Identity column SQL> CREATE TABLE employees 2 ( 3 id NUMBER GENERATED AS IDENTITY NOT NULL PRIMARY KEY, 4 first_name VARCHAR2(10), 5 last_name VARCHAR2(10) NOT NULL, 6 job_title VARCHAR2(20) NOT NULL 7 ); Table EMPLOYEES created. SQL> -- Note the absence of the \"ID\" column in the INSERT statement. SQL> -- Although it is a primary key and NOT NULL, the inserts succeed. SQL> INSERT INTO employees (first_name, last_name, job_title) VALUES ('Gerald', 'Venzl', 'Developer'); 1 row inserted. SQL> INSERT INTO employees (first_name, last_name, job_title) VALUES ('Andres', 'Almiray', 'Developer'); 1 row inserted. SQL> INSERT INTO employees (first_name, last_name, job_title) VALUES ('Chris', 'Saxon', 'Developer Evangelist'); 1 row inserted. SQL> COMMIT; Commit complete. SQL> -- The SELECT statement will show the \"ID\" column with values filled by the generated identity values. SQL> SELECT * FROM employees; ID FIRST_NAME LAST_NAME JOB_TITLE -- ---------- --------- -------------------- 1 Gerald Venzl Developer 2 Andres Almiray Developer 3 Chris Saxon Developer Evangelist The first relational normal form dictates that each table has to have a primary key by which a row can be uniquely identified (i.e. only one row exists for a given primary key value). Sometimes data records contain \"natural primary keys\" that uniquely identify themselves, such as the user name for a customer_accounts table, the VIN (Vehicle Identification Number) for a cars table, the driver license id for a driver _licenses table. However, often such natural primary keys do not exist within the data records and need to instead be generated, which is where identity columns can help. Identity columns ensure that the value for a new row will always be unique by using an always incrementing integer value that will never be used twice. Availability: All Offerings Documentation - CREATE TABLE identity_clause Example","title":"Identity Columns","component":"guide","version":"latest","name":"identity-columns","url":"/guide/latest/categories/sql/features/identity-columns.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"71":{"id":71,"text":"Version 23.2 Categories SQL The IF [NOT] EXISTS syntax can be used to ignore errors when dropping objects that do not exist or create objects that already exist. Objects can now be dropped via DROP IF EXISTS Objects can now be created via CREATE IF NOT EXISTS -- Drop table if left over from a previous incomplete test run -- (this will produce an error) DROP TABLE my_test; -- Recreate the table in a clean state CREATE TABLE my_test ( id NUMBER NOT NULL PRIMARY KEY, name VARCHAR2(255), created_tms DATE DEFAULT SYSDATE NOT NULL ); -- Execute INSERT INTO tests for default value INSERT INTO my_test (id, name) VALUES (1, 'Test'); -- Clean up test DROP TABLE my_test; -- -- Second test run -- -- Drop table if left over from a previous incomplete test run -- (the table has already been dropped in a previous test run, -- however, due to using IF EXISTS, no error will be raised) DROP TABLE IF EXISTS my_test; -- Recreate the table in a clean state CREATE TABLE my_test ( id NUMBER NOT NULL PRIMARY KEY, name VARCHAR2(255), created_tms DATE DEFAULT SYSDATE NOT NULL ); -- Execute INSERT INTO tests for default value of `created_tms` INSERT INTO my_test (id, name) VALUES (1, 'Test'); -- Clean up test DROP TABLE my_test; Result SQL> -- Drop table if left over from a previous incomplete test run SQL> -- (this will produce an error) SQL> DROP TABLE my_test; Error starting at line : 1 in command - DROP TABLE my_test Error report - ORA-00942: table or view does not exist SQL> SQL> -- Recreate the table in a clean state SQL> CREATE TABLE my_test 2 ( 3 id NUMBER NOT NULL PRIMARY KEY, 4 name VARCHAR2(255), 5 created_tms DATE DEFAULT SYSDATE NOT NULL 6 ); Table MY_TEST created. SQL> SQL> -- Execute INSERT INTO tests for default value of `created_tms` SQL> INSERT INTO my_test (id, name) VALUES (1, 'Test'); 1 row inserted. SQL> SQL> -- Clean up test SQL> DROP TABLE my_test; Table MY_TEST dropped. SQL> SQL> -- 2* -- Second test run SQL> -- 2* SQL> -- Drop table if left over from a previous incomplete test run SQL> -- (the table has already been dropped in a previous test run, SQL> -- however, due to using IF EXISTS, no error will be raised) SQL> DROP TABLE IF EXISTS my_test; Table MY_TEST dropped. SQL> SQL> -- Recreate the table in a clean state SQL> CREATE TABLE my_test 2 ( 3 id NUMBER NOT NULL PRIMARY KEY, 4 name VARCHAR2(255), 5 created_tms DATE DEFAULT SYSDATE NOT NULL 6 ); Table MY_TEST created. SQL> SQL> -- Execute INSERT INTO tests for default value SQL> INSERT INTO my_test (id, name) VALUES (1, 'Test'); 1 row inserted. SQL> SQL> -- Clean up test SQL> DROP TABLE my_test; Table MY_TEST dropped. Ignoring the error when dropping a non existing object or creating an object that already exists can be very useful especially in testing scripts that always want to ensure a clean state at the beginning of tests but not produce false positives by e.g. receiving an error when dropping an object that does not exist. Availability: All Offerings DROP TABLE documentation","title":"IF [NOT] EXISTS","component":"guide","version":"latest","name":"if-not-exists","url":"/guide/latest/categories/sql/features/if-not-exists.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"72":{"id":72,"text":"Version 23.2 Categories SQL JSON offers the flexibility of schemaless application design. Sometimes however, you might want some JSON data to conform to a schema. You might want to ensure that all data stored in a given column has the structure defined by a schema, or you might want to check whether a given JSON document has such a structure, before processing it. A JSON schema is a JSON document that respects the JSON Schema standard, which is a Request For Comments (RFC) draft. JSON schemas are in turn used to validate other JSON documents. Refer to the JSON schema website for more details. A JSON schema specifies the structure and the types of allowed values of JSON data that it considers valid. This example demonstrates how to query data in a relational table containing a JSON column and match it against a JSON schema. The following JSON schema ensures that only objects can be stored in the JSON column, containing both a firstName and lastName field with a minimum length of 1 character each. The numeric salary field is optional, however if defined, the salary must be greater than 10000. { \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"lastName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\", \"lastName\" ] } CREATE TABLE json_demo( id NUMBER GENERATED ALWAYS AS IDENTITY, CONSTRAINT pk_json_demo PRIMARY KEY(id), jcol JSON NOT NULL ); -- will result in an error: salary too low INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\", \"salary\": 9999 }') ); -- will result in an error: required lastName not present INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"salary\": 10001 }') ); -- will result in an error: lastName not spelled correctly INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"last_name\": \"King\", \"salary\": 10001 }') ); -- this record is fine INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\" }') ); -- fetch valid data SELECT jcol FROM json_demo WHERE jcol IS JSON VALIDATE '{ \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"lastName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\", \"lastName\" ] }'; Result SQL> CREATE TABLE json_demo( 2 id NUMBER 3 GENERATED ALWAYS AS IDENTITY, 4 CONSTRAINT pk_json_demo PRIMARY KEY(id), 5 jcol JSON NOT NULL 6 ); Table JSON_DEMO created. SQL> -- will result in an error: salary too low SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\", \"salary\": 9999 }') 5 ); 1 row inserted. SQL> -- will result in an error: required lastName not present SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"salary\": 10001 }') 5 ); 1 row inserted. SQL> -- will result in an error: lastName not spelled correctly SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"last_name\": \"King\", \"salary\": 10001 }') 5 ); 1 row inserted. SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\" }') 5 ); 1 row inserted. SQL> -- fetch valid data SQL> SELECT 2 jcol 3 FROM 4 json_demo 5 WHERE 6 jcol IS JSON VALIDATE 7 '{ 8 \"type\": \"object\", 9 \"properties\": { 10 \"firstName\": { 11 \"type\": \"string\", 12 \"minLength\": 1 13 }, 14 \"lastName\": { 15 \"type\": \"string\", 16 \"minLength\": 1 17 }, 18 \"salary\": { 19 \"type\": \"number\", 20 \"minimum\": 10000 21 } 22 }, 23 \"required\": [ 24 \"firstName\", 25 \"lastName\" 26 ] 27 }'; JCOL ___________________________________________ {\"firstName\":\"Steven\",\"lastName\":\"King\"} JSON is a popular format for data exchange, however with flexibility comes the risk of working with incomplete or wrong records. JSON schema allows developers to ensure better data quality. Using the IS JSON VALIDATE clause allows developers to vet JSON data in a column using a JSON schema. The above SELECT statement is the perfect partner for an INSERT INTO table_name SELECT …​ IS JSON VALIDATE …​ Availability: All Offerings Documentation","title":"JSON Schema: validate rows in a table","component":"guide","version":"latest","name":"json-schema-validate-rows","url":"/guide/latest/categories/sql/features/json-schema-validate-rows.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"73":{"id":73,"text":"Version 23.2 Categories SQL JSON offers the flexibility of schemaless application design. Sometimes however, you might want some JSON data to conform to a schema. You might want to ensure that all data stored in a given column has the structure defined by a schema, or you might want to check whether a given JSON document has such a structure, before processing it. A JSON schema is a JSON document that respects the JSON Schema standard, which is a Request For Comments (RFC) draft. JSON schemas are in turn used to validate other JSON documents. Refer to the JSON schema website for more details. A JSON schema specifies the structure and the types of allowed values of JSON data that it considers valid. This example demonstrates how to create a JSON schema validation report. The following JSON schema ensures that only objects can be stored in the JSON column, containing at least a firstName field with a minimum length of 1 character. The numeric salary field is optional, however if defined, the salary must be greater than 10000. { \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\" ] } -- note the absence of any schema validation rules in the -- create table statement CREATE TABLE json_demo( id NUMBER GENERATED ALWAYS AS IDENTITY, CONSTRAINT pk_json_demo PRIMARY KEY(id), jcol JSON ); -- insert a few rows into the table INSERT INTO json_demo ( jcol ) values ( JSON('{ \"contents\": \"does not match JSON schema\" }') ); INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Martin\" }' ) ); INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Tom\", \"salary\": 9999 }') ); INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Emily\", \"salary\": 15000 }') ); COMMIT; -- validate the contents of the table DECLARE l_JSON_schema JSON := JSON( '{ \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\" ] }' ); l_validation_report JSON; BEGIN FOR i IN (select id, jcol from json_demo) loop SELECT DBMS_JSON_SCHEMA.validate_report( json_data => i.jcol, json_schema => l_JSON_schema ) INTO l_validation_report FROM json_demo WHERE id = i.id; DBMS_OUTPUT.put_line('validating row with ID ' || i.id); DBMS_OUTPUT.put_line( json_serialize(l_validation_report pretty) ); END LOOP; END; / -- extracting portions of the error message WITH validation AS ( SELECT id, DBMS_JSON_SCHEMA.validate_report( json_data => jcol, json_schema => JSON( '{ \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\" ] }' ) ) AS report FROM json_demo ) SELECT json_serialize( v.report.errors[*].error pretty ) FROM validation v WHERE v.id = 1 / Result SQL> -- note the absence of any schema validation rules in the SQL> -- create table statement SQL> CREATE TABLE json_demo( 2 id NUMBER 3 GENERATED ALWAYS AS IDENTITY, 4 CONSTRAINT pk_json_demo PRIMARY KEY(id), 5 jcol JSON 6 ); Table created. SQL> SQL> -- insert a few rows into the table SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"contents\": \"does not match JSON schema\" }') 5 ); 1 row created. SQL> SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Martin\" }' ) 5 ); 1 row created. SQL> SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Tom\", \"salary\": 9999 }') 5 ); 1 row created. SQL> SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Emily\", \"salary\": 15000 }') 5 ); 1 row created. SQL> SQL> COMMIT; Commit complete. SQL> SQL> -- validate the contents of the table SQL> DECLARE 2 l_JSON_schema JSON := JSON( 3 '{ 4 \"type\": \"object\", 5 \"properties\": { 6 \"firstName\": { 7 \"type\": \"string\", 8 \"minLength\": 1 9 }, 10 \"salary\": { 11 \"type\": \"number\", 12 \"minimum\": 10000 13 } 14 }, 15 \"required\": [ 16 \"firstName\" 17 ] 18 }' 19 ); 20 l_validation_report JSON; 21 BEGIN 22 FOR i IN (select id, jcol from json_demo) loop 23 SELECT 24 DBMS_JSON_SCHEMA.validate_report( 25 json_data => i.jcol, 26 json_schema => l_JSON_schema 27 ) 28 INTO 29 l_validation_report 30 FROM 31 json_demo 32 WHERE 33 id = i.id; 34 DBMS_OUTPUT.put_line('validating row with ID ' || i.id); 35 DBMS_OUTPUT.put_line( 36 json_serialize(l_validation_report pretty) 37 ); 38 END LOOP; 39 END; 40 / validating row with ID 1 { \"valid\" : false, \"errors\" : [ { \"schemaPath\" : \"$\", \"instancePath\" : \"$\", \"code\" : \"JZN-00501\", \"error\" : \"JSON schema validation failed\" }, { \"schemaPath\" : \"$.required\", \"instancePath\" : \"$\", \"code\" : \"JZN-00515\", \"error\" : \"required properties not found: 'firstName'\" } ] } validating row with ID 2 { \"valid\" : true, \"errors\" : [ ] } validating row with ID 3 { \"valid\" : false, \"errors\" : [ { \"schemaPath\" : \"$\", \"instancePath\" : \"$\", \"code\" : \"JZN-00501\", \"error\" : \"JSON schema validation failed\" }, { \"schemaPath\" : \"$.properties\", \"instancePath\" : \"$\", \"code\" : \"JZN-00514\", \"error\" : \"invalid properties: 'salary'\" }, { \"schemaPath\" : \"$.properties.salary.minimum\", \"instancePath\" : \"$.salary\", \"code\" : \"JZN-00507\", \"error\" : \"value less than minimum value, actual: 9999, expected: 10000\" } ] } validating row with ID 4 { \"valid\" : true, \"errors\" : [ ] } PL/SQL procedure successfully completed. SQL> SQL> -- extracting portions of the error message SQL> WITH validation AS ( 2 SELECT 3 id, 4 DBMS_JSON_SCHEMA.validate_report( 5 json_data => jcol, 6 json_schema => JSON( 7 '{ 8 \"type\": \"object\", 9 \"properties\": { 10 \"firstName\": { 11 \"type\": \"string\", 12 \"minLength\": 1 13 }, 14 \"salary\": { 15 \"type\": \"number\", 16 \"minimum\": 10000 17 } 18 }, 19 \"required\": [ 20 \"firstName\" 21 ] 22 }' 23 ) 24 ) AS report 25 FROM 26 json_demo 27 ) 28 SELECT 29 json_serialize( 30 v.report.errors[*].error 31 pretty 32 ) errors 33 FROM 34 validation v 35 WHERE 36 v.id = 1 37 / ERRORS ----------------------------------------------------------------- [ \"JSON schema validation failed\", \"required properties not found: 'firstName'\" ] JSON is a popular format for data exchange, however with flexibility comes the risk of importing incomplete or otherwise incorrect records. JSON schema allows developers to ensure better data quality. Using validation reports contents of existing JSON columns can be checked against a schema. The validation function returns JSON, which can be parsed to only return specific parts of the validation report. Availability: All Offerings Documentation","title":"JSON Schema: check constraint","component":"guide","version":"latest","name":"json-schema-validation-report","url":"/guide/latest/categories/sql/features/json-schema-validation-report.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"74":{"id":74,"text":"Version 23.2 Categories SQL The PHONIC_ENCODE operator indexes words according to their English pronunciation using the metaphone or double metaphone algorithms. /* Get the phonic encoding of the team names The third parameter is the number of characters in the encoded string */ with teams as ( select * from ( values ( 'Champions United' ), ( 'Runner-up City' ), ( 'Midtable Town' ), ( 'Underdogs United' ), ( 'Upstart FC' ), ( 'Relegated Athletic' ) ) t ( team_name ) ) select team_name, phonic_encode ( double_metaphone, team_name, 1 ) as team_name_dm1, phonic_encode ( double_metaphone_alt, team_name, 1 ) as team_name_dm1_alt, phonic_encode ( double_metaphone, team_name, 6 ) as team_name_dm6, phonic_encode ( double_metaphone_alt, team_name, 6 ) as team_name_dm6_alt, phonic_encode ( double_metaphone, team_name, 12 ) as team_name_dm12, phonic_encode ( double_metaphone_alt, team_name, 12 ) as team_name_dm12_alt from teams; Result SQL> /* Get the phonic encoding of the team names SQL> The third parameter is the number of characters in the encoded string */ SQL> with teams as ( 2 select * from ( 3 values ( 'Champions United' ), 4 ( 'Runner-up City' ), 5 ( 'Midtable Town' ), 6 ( 'Underdogs United' ), 7 ( 'Upstart FC' ), 8 ( 'Relegated Athletic' ) 9 ) t ( team_name ) 10 ) 11 select team_name, 12 phonic_encode ( double_metaphone, team_name, 1 ) as team_name_dm1, 13 phonic_encode ( double_metaphone_alt, team_name, 1 ) as team_name_dm1_alt, 14 phonic_encode ( double_metaphone, team_name, 6 ) as team_name_dm6, 15 phonic_encode ( double_metaphone_alt, team_name, 6 ) as team_name_dm6_alt, 16 phonic_encode ( double_metaphone, team_name, 12 ) as team_name_dm12, 17 phonic_encode ( double_metaphone_alt, team_name, 12 ) as team_name_dm12_alt 18 from teams; TEAM_NAME TEAM_NAME_DM1 TEAM_NAME_DM1_ALT TEAM_NAME_DM6 TEAM_NAME_DM6_ALT TEAM_NAME_DM12 TEAM_NAME_DM12_ALT ------------------ ------------------------- ------------------------- ------------------------- ------------------------- ------------------------- ------------------------- Champions United X X XMPNSN XMPNSN XMPNSNTT XMPNSNTT Runner-up City R R RNRPST RNRPST RNRPST RNRPST Midtable Town M M MTPLTN MTPLTN MTPLTN MTPLTN Underdogs United A A ANTRTK ANTRTK ANTRTKSNTT ANTRTKSNTT Upstart FC A A APSTRT APSTRT APSTRTFK APSTRTFK Relegated Athletic R R RLKTT0 RLKTTT RLKTT0LTK RLKTTTLTK 6 rows selected. The PHONIC_ENCODE operator enables you to run data quality queries, comparing text based on how it’s spoken. Availability: All Offerings PHONIC_ENCODE Documentation","title":"PHONIC_ENCODE operator","component":"guide","version":"latest","name":"phonic-encode-operator","url":"/guide/latest/categories/sql/features/phonic-encode-operator.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"75":{"id":75,"text":"Version 12.1.0.1 Categories SQL, PL/SQL This feature enables users to write anonymous PL/SQL functions for the lifetime of a SQL query. The PL/SQL functions can be specified in the WITH clause (Common Table Expression (CTE)) and then referenced in one or many SQL queries below. This example demonstrates how to leverage two anonymous PL/SQL functions with in a SQL statement: The capitalize function capitalizes the first letter of the input string. The get_domain_name function retrieves the domain name from a URL. WITH -- Function to capitalize input string FUNCTION capitalize ( p_string VARCHAR2 ) RETURN VARCHAR2 IS BEGIN RETURN CONCAT(UPPER(SUBSTR(p_string,1,1)), SUBSTR(p_string,2)); END; -- Function to retrieve the domain name from a URL FUNCTION get_domain_name ( p_url VARCHAR2, p_sub_domain VARCHAR2 DEFAULT 'www.' ) RETURN VARCHAR2 IS v_begin_pos BINARY_INTEGER; v_length BINARY_INTEGER; BEGIN v_begin_pos := INSTR(p_url, p_sub_domain) + LENGTH(p_sub_domain); v_length := INSTR(SUBSTR(p_url, v_begin_pos), '.') - 1; RETURN SUBSTR(p_url, v_begin_pos, v_length); END; -- SQL statement SELECT capitalize(name) as name, capitalize(get_domain_name(url)) AS domain_name, url FROM products; Result SQL> WITH 2 -- Function to capitalize input string 3 FUNCTION capitalize 4 ( 5 p_string VARCHAR2 6 ) 7 RETURN VARCHAR2 8 IS 9 BEGIN 10 RETURN CONCAT(UPPER(SUBSTR(p_string,1,1)), SUBSTR(p_string,2)); 11 END; 12 -- Function to retrieve the domain name from a URL 13 FUNCTION get_domain_name 14 ( 15 p_url VARCHAR2, 16 p_sub_domain VARCHAR2 DEFAULT 'www.' 17 ) 18 RETURN VARCHAR2 19 IS 20 v_begin_pos BINARY_INTEGER; 21 v_length BINARY_INTEGER; 22 BEGIN 23 v_begin_pos := INSTR(p_url, p_sub_domain) + LENGTH(p_sub_domain); 24 v_length := INSTR(SUBSTR(p_url, v_begin_pos), '.') - 1; 25 RETURN SUBSTR(p_url, v_begin_pos, v_length); 26 END; 27 -- SQL statement 28 SELECT capitalize(name) as name, capitalize(get_domain_name(url)) AS domain_name, url 29 FROM products; 30 / NAME DOMAIN_NAME URL ________________________________ ______________ _______________________________________________________________________________________ AirPods Pro (2nd gen) Apple https://www.apple.com/shop/product/MQD83AM/A/airpods-pro SanDisk - Ultra 512GB USB 3.0 Bestbuy https://www.bestbuy.com/site/sandisk-ultra-512gb-usb-3-0-flash-drive-black/6422265.p Being able to run anonymous PL/SQL function with SQL statements can be useful where processing through PL/SQL is required or wanted but the user does either not have the necessary privileges to create a named function or does not want to reuse the function. Availability: All Offerings Documentation Example","title":"PL/SQL Function in SQL","component":"guide","version":"latest","name":"plsql-function-in-sql","url":"/guide/latest/categories/sql/features/plsql-function-in-sql.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"76":{"id":76,"text":"Version 12.1.0.1 Categories SQL Many SQL queries benefit from limiting the result set to the top-n, or first n rows. Before Oracle 12c Release 1 limiting the result set required the use of sub-selects and the rownum pseudo-column and inline views as you can see in the first examples. When Oracle Database 12c introduced support for the row limiting clause selecting the first n rows from a result set, or paging through a result set were significantly improved. /* Displaying the top 10 customers by sales using the pre- Oracle Database 12c syntax */ SELECT * FROM ( SELECT SUM(quantity_sold * amount_sold) AS revenue, cust_id FROM sales GROUP BY cust_id ORDER BY SUM(quantity_sold * amount_sold) DESC ) WHERE ROWNUM = :n; /* The same queries, however this time using the new syntax, available from Oracle Database 12c Release 1 onwards */ SELECT SUM(quantity_sold * amount_sold) AS revenue, cust_id FROM sales GROUP BY cust_id ORDER BY SUM(quantity_sold * amount_sold) DESC FETCH FIRST 10 ROWS ONLY; SELECT SUM(quantity_sold * amount_sold) AS revenue, cust_id FROM sales GROUP BY cust_id ORDER BY SUM(quantity_sold * amount_sold) DESC OFFSET 9 ROWS FETCH NEXT 11 ROWS ONLY; Result SQL> /* SQL> Displaying the top 10 customers by sales using the pre- SQL> Oracle Database 12c syntax SQL>*/ SQL> SELECT 2 * 3 FROM 4 ( 5 SELECT 6 SUM(quantity_sold * amount_sold) AS revenue, 7 cust_id 8 FROM 9 sales 10 GROUP BY 11 cust_id 12 ORDER BY 13 SUM(quantity_sold * amount_sold) DESC 14 ) 15 WHERE 16 ROWNUM /* SQL> Iterating over the result set, displaying 10 customers each using the pre- SQL> Oracle Database 12c syntax. You typically find this type of query in reports SQL> where batches of rows are displayed on screen. The following query retrieves SQL> rows n to m (say, 10 to 20) from the result set. SQL>*/ SQL> VAR n NUMBER SQL> VAR m NUMBER SQL> BEGIN 2 :n := 10; 3 :m := 20; 4 END; 5 / PL/SQL procedure successfully completed. SQL> SELECT 2 * 3 FROM 4 ( 5 SELECT 6 a.*, 7 ROWNUM rn 8 FROM 9 ( 10 SELECT 11 SUM(quantity_sold * amount_sold) AS revenue, 12 cust_id 13 FROM 14 sales 15 GROUP BY 16 cust_id 17 ORDER BY 18 SUM(quantity_sold * amount_sold) DESC 19 ) a 20 WHERE 21 ROWNUM = :n; REVENUE CUST_ID RN ___________ __________ _____ 93644,32 4759 10 92671,18 9038 11 90908,24 4090 12 89018,86 7178 13 86440,63 6279 14 85278,17 11702 15 85200,78 6265 16 84261,92 25939 17 83833,3 7994 18 83461,16 20966 19 81970,44 3453 20 11 rows selected. SQL> /* SQL> The same queries, however this time using the new syntax, available from SQL> Oracle Database 12c Release 1 onwards SQL>*/ SQL> SELECT 2 SUM(quantity_sold * amount_sold) AS revenue, 3 cust_id 4 FROM 5 sales 6 GROUP BY 7 cust_id 8 ORDER BY 9 SUM(quantity_sold * amount_sold) DESC 10 FETCH FIRST 10 ROWS ONLY; REVENUE CUST_ID ____________ __________ 103412,66 11407 99578,09 10747 98585,96 42167 98006,16 4974 97573,55 12783 97010,48 6395 94862,61 2994 94819,41 429 94786,13 1743 93644,32 4759 10 rows selected. SQL> SELECT 2 SUM(quantity_sold * amount_sold) AS revenue, 3 cust_id 4 FROM 5 sales 6 GROUP BY 7 cust_id 8 ORDER BY 9 SUM(quantity_sold * amount_sold) DESC 10 OFFSET 9 ROWS FETCH NEXT 11 ROWS ONLY; REVENUE CUST_ID ___________ __________ 93644,32 4759 92671,18 9038 90908,24 4090 89018,86 7178 86440,63 6279 85278,17 11702 85200,78 6265 84261,92 25939 83833,3 7994 83461,16 20966 81970,44 3453 11 rows selected. The FETCH FIRST and OFFSET clauses provides native SQL language support to limit the number of rows returned and to specify a starting row for the return set. Many queries need to limit the number of rows returned or offset the starting row of the results. For example, top-N queries sort their result set and then return only the first n rows. FETCH FIRST and OFFSET simplify syntax and comply with the ANSI SQL standard. Availability: All Offerings SQL Language Reference Blog post with additional examples covering many aspects of top-n queries, including analytic functions","title":"Native SQL Support for Query Row Limits and Row Offsets","component":"guide","version":"latest","name":"query-row-limits-and-offsets","url":"/guide/latest/categories/sql/features/query-row-limits-and-offsets.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"77":{"id":77,"text":"Version 23.2 Categories SQL The RETURNING INTO clause for INSERT, UPDATE, and DELETE statements are enhanced to report old and new values affected by the respective statement. This allows developers to use the same logic for each of these Data Manipulation Language (DML) types to obtain values pre- and post-statement execution. The following rules apply: UPDATE statements report old and new values. INSERT statements only report new values. DELETE statements only report old values. -- example 01: returning old and new values for a single-row update var l_old_salary number var l_new_salary number UPDATE employees SET salary = salary * 1.07 WHERE employee_id = 103 RETURNING old salary, new salary INTO :l_old_salary, :l_new_salary; SELECT :l_old_salary, :l_new_salary; ROLLBACK; -- example 02: returning old and new values for a multi-row update -- and storing the values in an audit table DROP TABLE IF EXISTS employees_history; CREATE TABLE employees_history ( employee_id NUMBER(6) NOT NULL, old_salary NUMBER(8, 2) NOT NULL, new_salary NUMBER(8, 2) NOT NULL, changed_on DATE NOT NULL ); DECLARE TYPE t_change_rec IS RECORD ( old_salary employees_history.old_salary%TYPE, new_salary employees_history.new_salary%TYPE, employee_id employees_history.employee_id%TYPE ); TYPE t_change_details IS TABLE OF t_change_rec; l_changes t_change_details; BEGIN UPDATE employees e SET salary = salary * 1.07 FROM departments d WHERE d.department_id = e.department_id AND d.department_name = 'IT' RETURNING OLD salary, NEW salary, employee_id BULK COLLECT INTO l_changes; FORALL i IN 1..l_changes.count INSERT INTO employees_history ( employee_id, old_salary, new_salary, changed_on ) VALUES ( l_changes(i).employee_id, l_changes(i).old_salary, l_changes(i).new_salary, sysdate ); END; / SELECT employee_id, old_salary, new_salary, changed_on FROM employees_history; ROLLBACK; -- example 03: no \"old\" value returned by INSERT statements DROP TABLE IF EXISTS insert_demo; CREATE TABLE insert_demo ( id NUMBER GENERATED ALWAYS AS IDENTITY, vc VARCHAR2(100) NOT NULL, d DATE DEFAULT sysdate NOT NULL, CONSTRAINT pk_insert_demo PRIMARY KEY ( id ) ) / var l_old_id number var l_new_id number INSERT INTO insert_demo ( vc ) VALUES ( 'insert demo' ) RETURNING old id, new id INTO :l_old_id, :l_new_id; SELECT :l_old_id, :l_new_id; -- example 04: no \"new\" value returning by DELETE statements DELETE insert_demo WHERE id = :l_new_id RETURNING old id, new id INTO :l_old_id, :l_new_id; SELECT :l_old_id, :l_new_id; ROLLBACK; Result SQL> -- example 01: returning old and new values for a single-row update SQL> var l_old_salary number SQL> var l_new_salary number SQL> UPDATE employees 2 SET 3 salary = salary * 1.07 4 WHERE 5 employee_id = 103 6 RETURNING 7 old salary, new salary 8 INTO 9 :l_old_salary, :l_new_salary; 1 row updated. SQL> SELECT 2 :l_old_salary, 3 :l_new_salary; :L_OLD_SALARY :L_NEW_SALARY ------------- ------------- 9000 9630 SQL> ROLLBACK; Rollback complete. SQL> -- example 02: returning old and new values for a multi-row update SQL> -- and storing the values in an audit table SQL> DROP TABLE IF EXISTS employees_history; Table dropped. SQL> CREATE TABLE employees_history ( 2 employee_id NUMBER(6) NOT NULL, 3 old_salary NUMBER(8, 2) NOT NULL, 4 new_salary NUMBER(8, 2) NOT NULL, 5 changed_on DATE NOT NULL 6 ); Table created. SQL> DECLARE 2 TYPE t_change_rec IS RECORD ( 3 old_salary employees_history.old_salary%TYPE, 4 new_salary employees_history.new_salary%TYPE, 5 employee_id employees_history.employee_id%TYPE 6 ); 7 TYPE t_change_details IS 8 TABLE OF t_change_rec; 9 l_changes t_change_details; 10 BEGIN 11 UPDATE employees e 12 SET 13 salary = salary * 1.07 14 FROM departments d 15 WHERE 16 d.department_id = e.department_id 17 AND d.department_name = 'IT' 18 RETURNING 19 OLD salary, NEW salary, employee_id 20 BULK COLLECT INTO 21 l_changes; 22 23 FORALL i IN 1..l_changes.count 24 INSERT INTO employees_history ( 25 employee_id, 26 old_salary, 27 new_salary, 28 changed_on 29 ) VALUES ( 30 l_changes(i).employee_id, 31 l_changes(i).old_salary, 32 l_changes(i).new_salary, 33 sysdate 34 ); 35 END; 36 / PL/SQL procedure successfully completed. SQL> SELECT 2 employee_id, 3 old_salary, 4 new_salary, 5 changed_on 6 FROM 7 employees_history; EMPLOYEE_ID OLD_SALARY NEW_SALARY CHANGED_O ----------- ---------- ---------- --------- 103 9000 9630 22-JUN-23 104 6000 6420 22-JUN-23 105 4800 5136 22-JUN-23 106 4800 5136 22-JUN-23 107 4200 4494 22-JUN-23 SQL> ROLLBACK; Rollback complete. SQL> -- example 03: no \"old\" value returned by INSERT statements SQL> DROP TABLE IF EXISTS insert_demo; Table dropped. SQL> CREATE TABLE insert_demo ( 2 id NUMBER 3 GENERATED ALWAYS AS IDENTITY, 4 vc VARCHAR2(100) NOT NULL, 5 d DATE DEFAULT sysdate NOT NULL, 6 CONSTRAINT pk_insert_demo PRIMARY KEY ( id ) 7 ) 8 / Table created. SQL> var l_old_id number SQL> var l_new_id number SQL> INSERT INTO insert_demo ( 2 vc 3 ) VALUES ( 4 'insert demo' 5 ) 6 RETURNING 7 old id, 8 new id 9 INTO 10 :l_old_id, 11 :l_new_id; 1 row created. SQL> SELECT 2 :l_old_id, 3 :l_new_id; :L_OLD_ID :L_NEW_ID ---------- ---------- 1 SQL> -- example 04: no \"new\" value returning by DELETE statements SQL> DELETE 2 insert_demo 3 WHERE 4 id = :l_new_id 5 RETURNING 6 old id, new id 7 INTO 8 :l_old_id, 9 :l_new_id; 1 row deleted. SQL> SELECT 2 :l_old_id, 3 :l_new_id; :L_OLD_ID :L_NEW_ID ---------- ---------- 1 SQL> ROLLBACK; Rollback complete. The ability to obtain old and new values affected by INSERT, UPDATE, and DELETE statements, as part of the SQL command’s execution, offers developers a uniform approach to reading these values and reduces the amount of work the database must perform. Availability: All Offerings SQL Language Reference: DELETE SQL Language Reference: INSERT SQL Language Reference: UPDATE","title":"Enhanced Returning-Into Clause","component":"guide","version":"latest","name":"returning-into","url":"/guide/latest/categories/sql/features/returning-into.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"78":{"id":78,"text":"Version 23.2 Categories SQL Schema privileges enable you to grant a user access to every object of the specified type in another schema. For example, to allow one user to query every table in another schema. -- create user to own tables create user data_owner no authentication; -- create user to query the tables grant create session to reporting_user identified by reporting_user; -- This gives reporting_user query privileges on every current & future table owned by data_owner grant read any table on schema data_owner to reporting_user; -- reporting_user automatically gets access to this table create table data_owner.tab ( c1 int ); conn reporting_user/reporting_user@23cfree select count(*) from data_owner.tab; Result SQL> create user data_owner 2 no authentication; User DATA_OWNER created. SQL> SQL> -- create user to query the tables SQL> grant create session to reporting_user 2 identified by reporting_user; Grant succeeded. SQL> SQL> -- This gives reporting_user query privileges on every current & future table owned by data_owner SQL> grant read any table 2 on schema data_owner 3 to reporting_user; Grant succeeded. SQL> SQL> -- reporting_user automatically gets access to this table SQL> create table data_owner.tab ( c1 int ); Table DATA_OWNER.TAB created. SQL> conn reporting_user/reporting_user@23cfree Connected. SQL> SQL> select count(*) from data_owner.tab; COUNT(*) ---------- 0 Schema privileges simplify data access controls. Availability: All Offerings GRANT Documentation","title":"Schema Level Privileges","component":"guide","version":"latest","name":"schema-level-privileges","url":"/guide/latest/categories/sql/features/schema-level-privileges.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"79":{"id":79,"text":"Version 23.2 Categories SQL You can now concatenate an unlimited number of parameters via the CONCAT() function. SELECT CONCAT('Hello World! It currently is ', TO_CHAR(sysdate,'YYYY-MM-DD HH24:MI:SS'), ' here in Vienna.') AS my_string; Result SQL> SELECT CONCAT('Hello World! It currently is ', TO_CHAR(sysdate,'YYYY-MM-DD HH24:MI:SS'), ' here in Vienna.') AS my_string; MY_STRING ___________________________________________________________________ Hello World! It currently is 2024-06-13 16:50:50 here in Vienna. Not having to nest multiple concatenations in multiple CONCAT() calls aids the readability and maintainability of code. Availability: All Offerings CONCAT Documentation","title":"Seamless concatenation via Varargs","component":"guide","version":"latest","name":"seamless-concat","url":"/guide/latest/categories/sql/features/seamless-concat.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"80":{"id":80,"text":"Version 23.2 Categories SQL You can now run SELECT expression-only queries without a FROM clause, e.g. adding from dual is no longer needed in such cases. The DUAL table has not disappeared, all queries that use it will continue to work as expected. select 2 * 3; select to_char( sysdate, 'dd.mm.yyyy' ) as today; select sysdate; Result SQL> select 2 2 * 3; 2*3 ---------- 6 SQL> select 2 to_char( 3 sysdate, 4 'dd.mm.yyyy' 5 ) as today; TODAY ---------- 20.06.2023 SQL> select 2 sysdate; SYSDATE --------- 20-JUN-23 Making the from dual clause optional in expression-only SQL statements improves SQL code portability and ease of use for developers. Availability: All Offerings Documentation","title":"SELECT without FROM clause","component":"guide","version":"latest","name":"select-without-from","url":"/guide/latest/categories/sql/features/select-without-from.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"81":{"id":81,"text":"Version 23.2 Categories SQL, PL/SQL The SQL Transpiler automatically and wherever possible converts (transpiles) PL/SQL functions within SQL into SQL expressions, without user intervention. create table employees ( employee_id integer primary key, first_name varchar2(100), last_name varchar2(100), hire_date date ); insert into employees (employee_id,first_name,last_name,hire_date) values (100,'Steven','King',to_date('17-JUN-2013 00:00','DD-MON-YYYY HH24:MI')), (101,'Neena','Yang',to_date('21-SEP-2015 00:00','DD-MON-YYYY HH24:MI')), (102,'Lex','Garcia',to_date('13-JAN-2011 00:00','DD-MON-YYYY HH24:MI')), (103,'Alexander','James',to_date('03-JAN-2016 00:00','DD-MON-YYYY HH24:MI')), (104,'Bruce','Miller',to_date('21-MAY-2017 00:00','DD-MON-YYYY HH24:MI')), (105,'David','Williams',to_date('25-JUN-2015 00:00','DD-MON-YYYY HH24:MI')), (106,'Valli','Jackson',to_date('05-FEB-2016 00:00','DD-MON-YYYY HH24:MI')), (107,'Diana','Nguyen',to_date('07-FEB-2017 00:00','DD-MON-YYYY HH24:MI')), (108,'Nancy','Gruenberg',to_date('17-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), (109,'Daniel','Faviet',to_date('16-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), (110,'John','Chen',to_date('28-SEP-2015 00:00','DD-MON-YYYY HH24:MI')); create or replace function get_year ( dt date ) return number as begin return extract ( year from dt ); end get_year; / set serveroutput off -- This disables the transpiler; it is disabled by default alter session set sql_transpiler = 'OFF'; select count (*) from employees where get_year ( hire_date ) = 2015; -- With the transpiler disabled, the predicate is the function call GET_YEAR select * from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); -- Enable the automatic SQL transpiler alter session set sql_transpiler = 'ON'; -- With the transpiler enabled, the expression in the function is extracted -- the predicate is now EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\")) -- => no SQL <> PL/SQL runtime context switch select count (*) from employees where get_year ( hire_date ) = 2017; select * from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); Result SQL> create table employees ( 2 employee_id integer primary key, 3 first_name varchar2(100), 4 last_name varchar2(100), 5 hire_date date 6 ); Table EMPLOYEES created. SQL> SQL> insert into employees (employee_id,first_name,last_name,hire_date) 2 values (100,'Steven','King',to_date('17-JUN-2013 00:00','DD-MON-YYYY HH24:MI')), 3 (101,'Neena','Yang',to_date('21-SEP-2015 00:00','DD-MON-YYYY HH24:MI')), 4 (102,'Lex','Garcia',to_date('13-JAN-2011 00:00','DD-MON-YYYY HH24:MI')), 5 (103,'Alexander','James',to_date('03-JAN-2016 00:00','DD-MON-YYYY HH24:MI')), 6 (104,'Bruce','Miller',to_date('21-MAY-2017 00:00','DD-MON-YYYY HH24:MI')), 7 (105,'David','Williams',to_date('25-JUN-2015 00:00','DD-MON-YYYY HH24:MI')), 8 (106,'Valli','Jackson',to_date('05-FEB-2016 00:00','DD-MON-YYYY HH24:MI')), 9 (107,'Diana','Nguyen',to_date('07-FEB-2017 00:00','DD-MON-YYYY HH24:MI')), 10 (108,'Nancy','Gruenberg',to_date('17-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), 11 (109,'Daniel','Faviet',to_date('16-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), 12 (110,'John','Chen',to_date('28-SEP-2015 00:00','DD-MON-YYYY HH24:MI')); 11 rows inserted. SQL> SQL> SQL> create or replace function get_year ( dt date ) 2 return number as 3 begin 4 return extract ( year from dt ); 5 end get_year; 6 / Function GET_YEAR compiled SQL> SQL> set serveroutput off SQL> -- This disables the transpiler; it is disabled by default SQL> alter session set sql_transpiler = 'OFF'; Session altered. SQL> SQL> select count (*) from employees 2 where get_year ( hire_date ) = 2015; COUNT(*) ---------- 3 SQL> SQL> -- With the transpiler disabled, the predicate is the function call GET_YEAR SQL> select * 2 from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); PLAN_TABLE_OUTPUT ---------------------------------------------------------------------------- EXPLAINED SQL STATEMENT: ------------------------ select count (*) from employees where get_year ( hire_date ) = 2015 Plan hash value: 1756381138 ---------------------------------------- | Id | Operation | Name | ---------------------------------------- | 0 | SELECT STATEMENT | | | 1 | SORT AGGREGATE | | |* 2 | TABLE ACCESS FULL| EMPLOYEES | ---------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 2 - filter(\"GET_YEAR\"(\"HIRE_DATE\")=2015) 19 rows selected. SQL> SQL> -- Enable the automatic SQL transpiler SQL> alter session set sql_transpiler = 'ON'; Session altered. SQL> SQL> -- With the transpiler enabled, the expression in the function is extracted SQL> -- the predicate is now EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\")) SQL> -- => no SQL <> PL/SQL runtime context switch SQL> select count (*) from employees 2 where get_year ( hire_date ) = 2017; COUNT(*) ---------- 2 SQL> SQL> select * 2 from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); PLAN_TABLE_OUTPUT -------------------------------------------------------------------------- EXPLAINED SQL STATEMENT: ------------------------ select count (*) from employees where get_year ( hire_date ) = 2017 Plan hash value: 1756381138 ---------------------------------------- | Id | Operation | Name | ---------------------------------------- | 0 | SELECT STATEMENT | | | 1 | SORT AGGREGATE | | |* 2 | TABLE ACCESS FULL| EMPLOYEES | ---------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 2 - filter(EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\"))=2017) 19 rows selected. The conversion operation is transparent to users and can improve performance by reducing overhead accrued from switching between the SQL and PL/SQL runtime. Availability: All Offerings SQL Tuning Guide","title":"SQL Transpiler","component":"guide","version":"latest","name":"sql-transpiler","url":"/guide/latest/categories/sql/features/sql-transpiler.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"82":{"id":82,"text":"Version 23.2 Categories SQL You can pass INTERVAL datatypes to the SUM and AVG aggregate and analytic functions. with rws as ( select interval '0' hour + numtodsinterval ( level, 'hour' ) dsi connect by level with rws as ( 2 select interval '0' hour + numtodsinterval ( level, 'hour' ) dsi 3 connect by level <= 10 4 ) 5 select sum ( dsi ) total_duration, 6 avg ( dsi ) mean_duration 7 from rws; TOTAL_DURATION MEAN_DURATION ------------------- ------------------- +02 07:00:00.000000 +00 05:30:00.000000 This enhancement makes it easier for developers to calculate totals and averages over INTERVAL values. Availability: All Offerings AVG Documentation SUM Documentation","title":"SUM and AVG over INTERVAL data types","component":"guide","version":"latest","name":"sum-and-avg-over-interval-types","url":"/guide/latest/categories/sql/features/sum-and-avg-over-interval-types.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"83":{"id":83,"text":"Version 23.2 Categories SQL The Table Value Constructor can be used to generate multiple table values (e.g. rows) in a single invocation. This feature is part of the ISO SQL:1992 standard. -- Table to demonstrate the table value constructor CREATE TABLE bookings ( id NUMBER, location VARCHAR2(25), type VARCHAR2(25) ); -- Insert multiple rows with a single insert statement INSERT INTO bookings VALUES (12113, 'Vienna', 'Family'), (62361, 'San Francisco', 'Business'), (38172, 'Berlin', 'Leisure'); -- Retrieve newly inserted rows SELECT * FROM bookings; -- Generate multiple rows using the table value constructor SELECT employee_id, first_name FROM ( VALUES (1,'Scott'), (2,'James'), (3,'John') ) employees (employee_id, first_name); Result SQL> -- Table to demonstrate the table value constructor SQL> CREATE TABLE bookings 2 ( 3 id NUMBER, 4 location VARCHAR2(25), 5 type VARCHAR2(25) 6 ); Table BOOKINGS created. SQL> -- Insert multiple rows with a single insert statement SQL> INSERT INTO bookings 2 VALUES (12113, 'Vienna', 'Family'), 3 (62361, 'San Francisco', 'Business'), 4 (38172, 'Berlin', 'Leisure'); 3 rows inserted. SQL> -- Retrieve newly inserted rows SQL> SELECT * FROM bookings; ID LOCATION TYPE -------- ---------------- -------- 12113 Vienna Family 62361 San Francisco Business 38172 Berlin Leisure SQL> -- Generate multiple rows using the table value constructor SQL> SELECT employee_id, first_name 2 FROM ( 3 VALUES (1,'Scott'), 4 (2,'James'), 5 (3,'John') 6 ) employees (employee_id, first_name); EMPLOYEE_ID FIRST_NAME -------------- ---------- 1 Scott 2 James 3 John The table value constructor enables users to insert multiple rows within a single INSERT operation. This avoids unnecessary additional INSERT executions and roundtrips from and to the client for inserting multiple rows. Using this feature can make SQL scripts more concise and readable. Using this feature can save time when writing INSERT statements manually. The table value constructor provides a convenient and concise way to generate multiple rows with values. Availability: All Offerings Multi-row INSERT and VALUES row generation documentation Multi-row INSERT and VALUES row generation example","title":"Table Value Constructor","component":"guide","version":"latest","name":"table-value-constructor","url":"/guide/latest/categories/sql/features/table-value-constructor.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"84":{"id":84,"text":"Version 23.2 Categories SQL UPDATE and DELETE statements can leverage join conditions on other tables to determine which rows to modify or delete in the source table. -- Get current salary for all employees in the IT department SELECT e.first_name, e.last_name, e.salary FROM employees e, departments d WHERE e.department_id=d.department_id AND d.department_name = 'IT'; -- Increase salary by 50% for all employees in the IT department UPDATE employees e SET e.salary=e.salary*1.5 FROM departments d WHERE e.department_id=d.department_id AND d.department_name = 'IT'; -- Verify changes SELECT e.first_name, e.last_name, e.salary FROM employees e, departments d WHERE e.department_id=d.department_id AND d.department_name = 'IT'; -- Commit changes COMMIT; -- Get all Sales Reps who were hired before the 1st of January 2016 SELECT e.first_name, e.last_name, e.hire_date FROM employees e, departments d, jobs j WHERE e.department_id=d.department_id AND d.department_name = 'Sales' AND e.job_id=j.job_id AND j.job_title = 'Sales Representative' AND e.hire_date -- Get current salary for all employees in the IT department SQL> SELECT e.first_name, e.last_name, e.salary 2 FROM employees e, departments d 3 WHERE e.department_id=d.department_id 4* AND d.department_name = 'IT'; FIRST_NAME LAST_NAME SALARY _____________ ____________ _________ Alexander James 9000 Bruce Miller 6000 David Williams 4800 Valli Jackson 4800 Diana Nguyen 4200 SQL> SQL> -- Increase salary by 50% for all employees in the IT department SQL> UPDATE employees e SET e.salary=e.salary*1.5 2 FROM departments d 3 WHERE e.department_id=d.department_id 4* AND d.department_name = 'IT'; 5 rows updated. SQL> SQL> -- Verify changes SQL> SELECT e.first_name, e.last_name, e.salary 2 FROM employees e, departments d 3 WHERE e.department_id=d.department_id 4* AND d.department_name = 'IT'; FIRST_NAME LAST_NAME SALARY _____________ ____________ _________ Alexander James 13500 Bruce Miller 9000 David Williams 7200 Valli Jackson 7200 Diana Nguyen 6300 SQL> SQL> -- Commit changes SQL> COMMIT; Commit complete. SQL> -- Get all Sales Reps who were hired before the 1st of January 2016 SQL> SELECT e.first_name, e.last_name, e.hire_date 2 FROM employees e, departments d, jobs j 3 WHERE e.department_id=d.department_id 4 AND d.department_name = 'Sales' 5 AND e.job_id=j.job_id 6 AND j.job_title = 'Sales Representative' 7* AND e.hire_date SQL> -- Delete all Sales Reps who were hired before the 1st of January 2016 SQL> DELETE FROM employees e 2 FROM departments d, jobs j 3 WHERE e.department_id=d.department_id 4 AND d.department_name = 'Sales' 5 AND e.job_id=j.job_id 6 AND j.job_title = 'Sales Representative' 7* AND e.hire_date SQL> -- Verify changes SQL> SELECT e.first_name, e.last_name, e.hire_date 2 FROM employees e, departments d, jobs j 3 WHERE e.department_id=d.department_id 4 AND d.department_name = 'Sales' 5 AND e.job_id=j.job_id 6 AND j.job_title = 'Sales Representative' 7* AND e.hire_date SQL> -- Commit changes SQL> COMMIT; Commit complete. Leveraging joins as part of UPDATE and DELETE statements makes writing, executing and reading data manipulation statements easier. Availability: All Offerings UPDATE statement and DELETE statement","title":"UPDATE/DELETE via JOIN","component":"guide","version":"latest","name":"update-delete-via-join","url":"/guide/latest/categories/sql/features/update-delete-via-join.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"85":{"id":85,"text":"Version 23.2 Categories SQL The maximum number of columns allowed in a database table or view has been increased to 4096. This feature allows you to build applications that can store attributes in a single table with more than the previous 1000-column limit. Some applications, such as Machine Learning and streaming IoT application workloads, may require the use of de-normalized tables with more than 1000 columns. The majority of existing database applications might not need extra-wide tables. Before you can create tables with more than 1000 columns you must ensure that the following initialization parameters are set to the required values: The value of the compatible parameter must be set to 23.0.0 or higher Once compatible is set accordingly you must change max_columns to extended Please refer to the Database Upgrade Guide for more details about the compatible initialization parameter and the implications of changing it. Typing a create table statement featuring 4096 columns would result in a very long statement. The example simplifies the process using Native Dynamic SQL; it assumes that the above mentioned prerequisites are met. DECLARE l_sql CLOB; c_num_cols CONSTANT PLS_INTEGER := 4096; BEGIN -- construct the `create table` statement and store it as a CLOB l_sql := 'create table demotable (' || chr(13) || ' c0001 number' || chr(13); FOR i IN 2..c_num_cols LOOP l_sql := l_sql || ',c' || lpad(i, 4, 0) || ' number' || chr(13); END LOOP; l_sql := l_sql || ')'; -- create the table EXECUTE IMMEDIATE l_sql; EXCEPTION -- notify of errors WHEN OTHERS THEN raise_application_error( -20000, 'an unexpected error occurred ' || ' (' || sqlerrm || ')' ); END; / -- validate the number of columns in the table SELECT count(*) FROM user_tab_columns WHERE table_name = 'DEMOTABLE'; Result SQL> DECLARE 2 l_sql CLOB; 3 c_num_cols CONSTANT PLS_INTEGER := 4096; 4 BEGIN 5 -- construct the `create table` statement and store it as a CLOB 6 l_sql := 'create table demotable (' || chr(13) || ' c0001 number' || chr(13); 7 FOR i IN 2..c_num_cols LOOP 8 l_sql := l_sql || ',c' || lpad(i, 4, 0) || ' number' || chr(13); 9 END LOOP; 10 l_sql := l_sql || ')'; 11 12 -- create the table 13 EXECUTE IMMEDIATE l_sql; 14 EXCEPTION 15 -- notify of errors 16 WHEN OTHERS THEN 17 raise_application_error( 18 -20000, 19 'an unexpected error occurred ' 20 || ' (' 21 || sqlerrm 22 || ')' 23 ); 24 END; 25 / PL/SQL procedure successfully completed. SQL> -- validate the number of columns in the table SQL> SELECT 2 count(*) 3 FROM 4 user_tab_columns 5 WHERE 6 table_name = 'DEMOTABLE'; COUNT(*) ---------- 4096 Whilst most database applications should be fine with the existing limit of 1000 columns per table or view, certain IoT (Internet of Things) or Machine Learning workloads might require wider tables. In such cases you can make use of the wide tables offered by Oracle Database 23c. Availability: All Offerings Database Reference: max_columns initialization parameter Database Reference: compatible initialization parameter Blog post discussing wide tables on blogs.oracle.com","title":"4096 table columns","component":"guide","version":"latest","name":"wide-tables","url":"/guide/latest/categories/sql/features/wide-tables.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"86":{"id":86,"text":"Version 21.3 Categories SQL The WINDOW clause enables you to define PARTITION BY, ORDER BY, and window frames for analytic functions. You can use these named windows in the OVER clause of functions in the SELECT clause. alter session set nls_date_format = 'DD-MON-YYYY'; select employee_id, department_id, salary, -- these calculate totals per department count (*) over ( dept_w ) emps_per_dept, sum ( salary ) over ( dept_w ) wages_per_dept, hire_date, -- this gets the running total of salaries/dept in order they were hired sum ( salary ) over ( hired_w ) cumul_sal, -- this gets the moving average of salaries for the last four hires/dept round ( avg ( salary ) over last_four ) rolling_mean from hr.employees where department_id alter session set nls_date_format = 'DD-MON-YYYY'; Session altered. SQL> select employee_id, 2 department_id, salary, 3 -- these calculate totals per department 4 count (*) over ( dept_w ) emps_per_dept, 5 sum ( salary ) over ( dept_w ) wages_per_dept, 6 hire_date, 7 -- this gets the running total of salaries/dept in order they were hired 8 sum ( salary ) over ( hired_w ) cumul_sal, 9 -- this gets the moving average of salaries for the last four hires/dept 10 round ( avg ( salary ) over last_four ) rolling_mean 11 from hr.employees 12 where department_id < 50 13 window dept_w as ( 14 -- split by department 15 partition by department_id 16 ), hired_w as ( 17 -- sort by date hired 18 dept_w order by hire_date 19 ), last_four as ( 20 -- include the previous three rows & current 21 hired_w rows 3 preceding 22 ); EMPLOYEE_ID DEPARTMENT_ID SALARY EMPS_PER_DEPT WAGES_PER_DEPT HIRE_DATE CUMUL_SAL ROLLING_MEAN ----------- ------------- ---------- ------------- -------------- ----------- ---------- ------------ 200 10 4400 1 4400 17-SEP-2013 4400 4400 201 20 13000 2 19000 17-FEB-2014 13000 13000 202 20 6000 2 19000 17-AUG-2015 19000 9500 114 30 11000 6 24900 07-DEC-2012 11000 11000 115 30 3100 6 24900 18-MAY-2013 14100 7050 117 30 2800 6 24900 24-JUL-2015 16900 5633 116 30 2900 6 24900 24-DEC-2015 19800 4950 118 30 2600 6 24900 15-NOV-2016 22400 2850 119 30 2500 6 24900 10-AUG-2017 24900 2700 203 40 6500 1 6500 07-JUN-2012 6500 6500 10 rows selected. The WINDOW clause enables you to define common windows once and reuse them in a statement. This makes queries easier to maintain. Availability: All Offerings Documentation","title":"WINDOW clause","component":"guide","version":"latest","name":"window-clause","url":"/guide/latest/categories/sql/features/window-clause.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"87":{"id":87,"text":"Version 21.3 Categories SQL Use frame exclusion to omit rows from the calculation in window functions. This has four options: EXCLUDE CURRENT ROW - remove the row being processed from the calculation. EXCLUDE GROUP - omit all rows with the same value for the window’s ORDER BY columns as the current row EXCLUDE TIES - omit all other rows with the same value for the window’s ORDER BY columns from the total as the current row, but include the current row EXCLUDE NO OTHERS - Include all rows in the window in the calculation. This is the default. alter session set nls_date_format = 'DD-MON-YYYY'; select hire_date , count(*) over ( -- include all previous rows; default hire_w rows unbounded preceding exclude no others ) include_all , count(*) over ( -- omit this row from the count hire_w rows unbounded preceding exclude current row ) omit_current , count(*) over ( -- omit all rows with the same value for hire_date as this hire_w rows unbounded preceding exclude group ) omit_group , count(*) over ( -- omit other rows with the same value for hire_date as this hire_w rows unbounded preceding exclude ties ) omit_ties from hr.employees where hire_date >= date'2015-03-03' window hire_w as ( order by hire_date ) fetch first 5 rows only; Result SQL> alter session set nls_date_format = 'DD-MON-YYYY'; Session altered. SQL> select hire_date 2 , count(*) over ( 3 -- include all previous rows; default 4 hire_w rows unbounded preceding exclude no others 5 ) include_all 6 , count(*) over ( 7 -- omit this row from the count 8 hire_w rows unbounded preceding exclude current row 9 ) omit_current 10 , count(*) over ( 11 -- omit all rows with the same value for hire_date as this 12 hire_w rows unbounded preceding exclude group 13 ) omit_group 14 , count(*) over ( 15 -- omit other rows with the same value for hire_date as this 16 hire_w rows unbounded preceding exclude ties 17 ) omit_ties 18 from hr.employees 19 where hire_date >= date'2015-03-03' 20 window hire_w as ( order by hire_date ) 21 fetch first 5 rows only; HIRE_DATE INCLUDE_ALL OMIT_CURRENT OMIT_GROUP OMIT_TIES ----------- ----------- ------------ ---------- ---------- 03-MAR-2015 1 0 0 1 10-MAR-2015 2 1 1 2 10-MAR-2015 3 2 1 2 11-MAR-2015 4 3 3 4 19-MAR-2015 5 4 4 5 Frame exclusion simplifies SQL statements that need to remove rows from running total and moving window calculations Availability: All Offerings Documentation","title":"Window functions frame exclusion","component":"guide","version":"latest","name":"window-functions-exclusion-frame","url":"/guide/latest/categories/sql/features/window-functions-exclusion-frame.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"88":{"id":88,"text":"Version 21.3 Categories SQL The GROUPS frame enables you to get running totals over the previous N sort values in window functions. This in addition to the existing ROWS and RANGE frames. The differences between these are: ROWS :N PRECEDING - include the current row and up to N rows before it RANGE :N PRECEDING - include all rows between current - N and current; current is the value of the ORDER BY column for the row the function is processing GROUPS :N PRECEDING - include all rows with the same value and previous N unique values for the columns in the window’s ORDER BY alter session set nls_date_format = 'DD-MON-YYYY'; select hire_date -- include current & three previous rows , count(*) over ( order by hire_date rows 3 preceding ) prev3_rows -- include all rows between hire_date - 3 and hire_date for the current row , count(*) over ( order by hire_date range 3 preceding ) prev3_days -- include all rows with the any of the previous three and current hire_dates , count(*) over ( order by hire_date groups 3 preceding ) prev3_values from hr.employees where hire_date >= date'2015-03-03' fetch first 5 rows only; Result SQL> alter session set nls_date_format = 'DD-MON-YYYY'; Session altered. SQL> select hire_date 2 -- include current & three previous rows 3 , count(*) over ( order by hire_date rows 3 preceding ) prev3_rows 4 -- include all rows between hire_date - 3 and hire_date for the current row 5 , count(*) over ( order by hire_date range 3 preceding ) prev3_days 6 -- include all rows with the any of the previous three and current hire_dates 7 , count(*) over ( order by hire_date groups 3 preceding ) prev3_values 8 from hr.employees 9 where hire_date >= date'2015-03-03' 10 fetch first 5 rows only; HIRE_DATE PREV3_ROWS PREV3_DAYS PREV3_VALUES ----------- ---------- ---------- ------------ 03-MAR-2015 1 1 1 10-MAR-2015 2 2 3 10-MAR-2015 3 2 3 11-MAR-2015 4 3 4 19-MAR-2015 4 1 5 The GROUPS frame simplifies SQL statements that need to calculate running totals over the previous N unique values. Availability: All Offerings Documentation","title":"Window functions GROUPS frame","component":"guide","version":"latest","name":"window-functions-groups-frame","url":"/guide/latest/categories/sql/features/window-functions-groups-frame.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"89":{"id":89,"text":"Version 12.1.0.1 Categories SQL The identity columns feature can be used to designate one column in the table as the identity for the row. The database will automatically assign an increasing integer value from a sequence generator to the identity column for each subsequent INSERT statement. This feature is sometimes also referred to as autoincrement. This feature is part of the ISO SQL:2016 standard. To declare a column as an identity in a table, use the GENERATED AS IDENTITY column attribute: -- Create a table with the column \"ID\" generated as Identity column CREATE TABLE employees ( id NUMBER GENERATED AS IDENTITY NOT NULL PRIMARY KEY, first_name VARCHAR2(10), last_name VARCHAR2(10) NOT NULL, job_title VARCHAR2(20) NOT NULL ); -- Note the absence of the \"ID\" column in the INSERT statement. -- Although it is a primary key and NOT NULL, the inserts succeed. INSERT INTO employees (first_name, last_name, job_title) VALUES ('Gerald', 'Venzl', 'Developer'); INSERT INTO employees (first_name, last_name, job_title) VALUES ('Andres', 'Almiray', 'Developer'); INSERT INTO employees (first_name, last_name, job_title) VALUES ('Chris', 'Saxon', 'Developer Evangelist'); COMMIT; -- The SELECT statement will show the \"ID\" column with values filled by the generated identity values. SELECT * FROM employees; The identity column provides additional syntax modifiers to: Always generate a new identity value, via GENERATED ALWAYS AS IDENTITY Generate a new identity value if none has been provided, via GENERATED BY DEFAULT Generate a new identity value if one has been provided by evaluates to NULL, via GENERATED BY DEFAULT ON NULL Provide additional identity generation options via GENERATED AS IDENTITY () Result SQL> -- Create a table with the column \"ID\" generated as Identity column SQL> CREATE TABLE employees 2 ( 3 id NUMBER GENERATED AS IDENTITY NOT NULL PRIMARY KEY, 4 first_name VARCHAR2(10), 5 last_name VARCHAR2(10) NOT NULL, 6 job_title VARCHAR2(20) NOT NULL 7 ); Table EMPLOYEES created. SQL> -- Note the absence of the \"ID\" column in the INSERT statement. SQL> -- Although it is a primary key and NOT NULL, the inserts succeed. SQL> INSERT INTO employees (first_name, last_name, job_title) VALUES ('Gerald', 'Venzl', 'Developer'); 1 row inserted. SQL> INSERT INTO employees (first_name, last_name, job_title) VALUES ('Andres', 'Almiray', 'Developer'); 1 row inserted. SQL> INSERT INTO employees (first_name, last_name, job_title) VALUES ('Chris', 'Saxon', 'Developer Evangelist'); 1 row inserted. SQL> COMMIT; Commit complete. SQL> -- The SELECT statement will show the \"ID\" column with values filled by the generated identity values. SQL> SELECT * FROM employees; ID FIRST_NAME LAST_NAME JOB_TITLE -- ---------- --------- -------------------- 1 Gerald Venzl Developer 2 Andres Almiray Developer 3 Chris Saxon Developer Evangelist The first relational normal form dictates that each table has to have a primary key by which a row can be uniquely identified (i.e. only one row exists for a given primary key value). Sometimes data records contain \"natural primary keys\" that uniquely identify themselves, such as the user name for a customer_accounts table, the VIN (Vehicle Identification Number) for a cars table, the driver license id for a driver _licenses table. However, often such natural primary keys do not exist within the data records and need to instead be generated, which is where identity columns can help. Identity columns ensure that the value for a new row will always be unique by using an always incrementing integer value that will never be used twice. Availability: All Offerings Documentation - CREATE TABLE identity_clause Example","title":"Identity Columns","component":"guide","version":"latest","name":"identity-columns","url":"/guide/latest/versions/12.1.0.1/features/identity-columns.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"90":{"id":90,"text":"Version 12.1.0.1 Categories SQL, PL/SQL This feature enables users to write anonymous PL/SQL functions for the lifetime of a SQL query. The PL/SQL functions can be specified in the WITH clause (Common Table Expression (CTE)) and then referenced in one or many SQL queries below. This example demonstrates how to leverage two anonymous PL/SQL functions with in a SQL statement: The capitalize function capitalizes the first letter of the input string. The get_domain_name function retrieves the domain name from a URL. WITH -- Function to capitalize input string FUNCTION capitalize ( p_string VARCHAR2 ) RETURN VARCHAR2 IS BEGIN RETURN CONCAT(UPPER(SUBSTR(p_string,1,1)), SUBSTR(p_string,2)); END; -- Function to retrieve the domain name from a URL FUNCTION get_domain_name ( p_url VARCHAR2, p_sub_domain VARCHAR2 DEFAULT 'www.' ) RETURN VARCHAR2 IS v_begin_pos BINARY_INTEGER; v_length BINARY_INTEGER; BEGIN v_begin_pos := INSTR(p_url, p_sub_domain) + LENGTH(p_sub_domain); v_length := INSTR(SUBSTR(p_url, v_begin_pos), '.') - 1; RETURN SUBSTR(p_url, v_begin_pos, v_length); END; -- SQL statement SELECT capitalize(name) as name, capitalize(get_domain_name(url)) AS domain_name, url FROM products; Result SQL> WITH 2 -- Function to capitalize input string 3 FUNCTION capitalize 4 ( 5 p_string VARCHAR2 6 ) 7 RETURN VARCHAR2 8 IS 9 BEGIN 10 RETURN CONCAT(UPPER(SUBSTR(p_string,1,1)), SUBSTR(p_string,2)); 11 END; 12 -- Function to retrieve the domain name from a URL 13 FUNCTION get_domain_name 14 ( 15 p_url VARCHAR2, 16 p_sub_domain VARCHAR2 DEFAULT 'www.' 17 ) 18 RETURN VARCHAR2 19 IS 20 v_begin_pos BINARY_INTEGER; 21 v_length BINARY_INTEGER; 22 BEGIN 23 v_begin_pos := INSTR(p_url, p_sub_domain) + LENGTH(p_sub_domain); 24 v_length := INSTR(SUBSTR(p_url, v_begin_pos), '.') - 1; 25 RETURN SUBSTR(p_url, v_begin_pos, v_length); 26 END; 27 -- SQL statement 28 SELECT capitalize(name) as name, capitalize(get_domain_name(url)) AS domain_name, url 29 FROM products; 30 / NAME DOMAIN_NAME URL ________________________________ ______________ _______________________________________________________________________________________ AirPods Pro (2nd gen) Apple https://www.apple.com/shop/product/MQD83AM/A/airpods-pro SanDisk - Ultra 512GB USB 3.0 Bestbuy https://www.bestbuy.com/site/sandisk-ultra-512gb-usb-3-0-flash-drive-black/6422265.p Being able to run anonymous PL/SQL function with SQL statements can be useful where processing through PL/SQL is required or wanted but the user does either not have the necessary privileges to create a named function or does not want to reuse the function. Availability: All Offerings Documentation Example","title":"PL/SQL Function in SQL","component":"guide","version":"latest","name":"plsql-function-in-sql","url":"/guide/latest/versions/12.1.0.1/features/plsql-function-in-sql.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"91":{"id":91,"text":"Version 12.1.0.1 Categories SQL Many SQL queries benefit from limiting the result set to the top-n, or first n rows. Before Oracle 12c Release 1 limiting the result set required the use of sub-selects and the rownum pseudo-column and inline views as you can see in the first examples. When Oracle Database 12c introduced support for the row limiting clause selecting the first n rows from a result set, or paging through a result set were significantly improved. /* Displaying the top 10 customers by sales using the pre- Oracle Database 12c syntax */ SELECT * FROM ( SELECT SUM(quantity_sold * amount_sold) AS revenue, cust_id FROM sales GROUP BY cust_id ORDER BY SUM(quantity_sold * amount_sold) DESC ) WHERE ROWNUM = :n; /* The same queries, however this time using the new syntax, available from Oracle Database 12c Release 1 onwards */ SELECT SUM(quantity_sold * amount_sold) AS revenue, cust_id FROM sales GROUP BY cust_id ORDER BY SUM(quantity_sold * amount_sold) DESC FETCH FIRST 10 ROWS ONLY; SELECT SUM(quantity_sold * amount_sold) AS revenue, cust_id FROM sales GROUP BY cust_id ORDER BY SUM(quantity_sold * amount_sold) DESC OFFSET 9 ROWS FETCH NEXT 11 ROWS ONLY; Result SQL> /* SQL> Displaying the top 10 customers by sales using the pre- SQL> Oracle Database 12c syntax SQL>*/ SQL> SELECT 2 * 3 FROM 4 ( 5 SELECT 6 SUM(quantity_sold * amount_sold) AS revenue, 7 cust_id 8 FROM 9 sales 10 GROUP BY 11 cust_id 12 ORDER BY 13 SUM(quantity_sold * amount_sold) DESC 14 ) 15 WHERE 16 ROWNUM /* SQL> Iterating over the result set, displaying 10 customers each using the pre- SQL> Oracle Database 12c syntax. You typically find this type of query in reports SQL> where batches of rows are displayed on screen. The following query retrieves SQL> rows n to m (say, 10 to 20) from the result set. SQL>*/ SQL> VAR n NUMBER SQL> VAR m NUMBER SQL> BEGIN 2 :n := 10; 3 :m := 20; 4 END; 5 / PL/SQL procedure successfully completed. SQL> SELECT 2 * 3 FROM 4 ( 5 SELECT 6 a.*, 7 ROWNUM rn 8 FROM 9 ( 10 SELECT 11 SUM(quantity_sold * amount_sold) AS revenue, 12 cust_id 13 FROM 14 sales 15 GROUP BY 16 cust_id 17 ORDER BY 18 SUM(quantity_sold * amount_sold) DESC 19 ) a 20 WHERE 21 ROWNUM = :n; REVENUE CUST_ID RN ___________ __________ _____ 93644,32 4759 10 92671,18 9038 11 90908,24 4090 12 89018,86 7178 13 86440,63 6279 14 85278,17 11702 15 85200,78 6265 16 84261,92 25939 17 83833,3 7994 18 83461,16 20966 19 81970,44 3453 20 11 rows selected. SQL> /* SQL> The same queries, however this time using the new syntax, available from SQL> Oracle Database 12c Release 1 onwards SQL>*/ SQL> SELECT 2 SUM(quantity_sold * amount_sold) AS revenue, 3 cust_id 4 FROM 5 sales 6 GROUP BY 7 cust_id 8 ORDER BY 9 SUM(quantity_sold * amount_sold) DESC 10 FETCH FIRST 10 ROWS ONLY; REVENUE CUST_ID ____________ __________ 103412,66 11407 99578,09 10747 98585,96 42167 98006,16 4974 97573,55 12783 97010,48 6395 94862,61 2994 94819,41 429 94786,13 1743 93644,32 4759 10 rows selected. SQL> SELECT 2 SUM(quantity_sold * amount_sold) AS revenue, 3 cust_id 4 FROM 5 sales 6 GROUP BY 7 cust_id 8 ORDER BY 9 SUM(quantity_sold * amount_sold) DESC 10 OFFSET 9 ROWS FETCH NEXT 11 ROWS ONLY; REVENUE CUST_ID ___________ __________ 93644,32 4759 92671,18 9038 90908,24 4090 89018,86 7178 86440,63 6279 85278,17 11702 85200,78 6265 84261,92 25939 83833,3 7994 83461,16 20966 81970,44 3453 11 rows selected. The FETCH FIRST and OFFSET clauses provides native SQL language support to limit the number of rows returned and to specify a starting row for the return set. Many queries need to limit the number of rows returned or offset the starting row of the results. For example, top-N queries sort their result set and then return only the first n rows. FETCH FIRST and OFFSET simplify syntax and comply with the ANSI SQL standard. Availability: All Offerings SQL Language Reference Blog post with additional examples covering many aspects of top-n queries, including analytic functions","title":"Native SQL Support for Query Row Limits and Row Offsets","component":"guide","version":"latest","name":"query-row-limits-and-offsets","url":"/guide/latest/versions/12.1.0.1/features/query-row-limits-and-offsets.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"92":{"id":92,"text":"Oracle Database supports a rich set of languages for writing user-defined functions and stored procedures, including PL/SQL, Java, and C. With Oracle Database Multilingual Engine (MLE), developers have the additional option to run JavaScript code starting with Oracle Database 23c.","title":"JavaScript","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/12.1.0.1/javascript/index.html","titles":[]},"93":{"id":93,"text":"PL/SQL provides a server-side, stored procedural language that is easy-to-use, seamless with SQL, robust, portable, and secure. You can access and manipulate data inside the database using procedural objects called PL/SQL units. PL/SQL units generally are categorized as follows: A PL/SQL subprogram is a PL/SQL block that is stored in the database and can be called by name from an application. When you create a subprogram, the database parses the subprogram and stores its parsed representation in the database. You can declare a subprogram as a procedure or a function. A PL/SQL anonymous block is a PL/SQL block that appears in your application and is not named or stored in the database. In many applications, PL/SQL blocks can appear wherever SQL statements can appear. PL/SQL includes procedural language elements such as conditions and loops and can handle exceptions. It allows declaration of constants, variables, procedures, functions, packages, types and variables of those types, and triggers. Arrays are supported via the use of PL/SQL collections. For more information about PL/SQL see Overview of PL/SQL.","title":"PL/SQL","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/12.1.0.1/plsql/index.html","titles":[]},"94":{"id":94,"text":"Version 12.1.0.1 Categories SQL, PL/SQL This feature enables users to write anonymous PL/SQL functions for the lifetime of a SQL query. The PL/SQL functions can be specified in the WITH clause (Common Table Expression (CTE)) and then referenced in one or many SQL queries below. This example demonstrates how to leverage two anonymous PL/SQL functions with in a SQL statement: The capitalize function capitalizes the first letter of the input string. The get_domain_name function retrieves the domain name from a URL. WITH -- Function to capitalize input string FUNCTION capitalize ( p_string VARCHAR2 ) RETURN VARCHAR2 IS BEGIN RETURN CONCAT(UPPER(SUBSTR(p_string,1,1)), SUBSTR(p_string,2)); END; -- Function to retrieve the domain name from a URL FUNCTION get_domain_name ( p_url VARCHAR2, p_sub_domain VARCHAR2 DEFAULT 'www.' ) RETURN VARCHAR2 IS v_begin_pos BINARY_INTEGER; v_length BINARY_INTEGER; BEGIN v_begin_pos := INSTR(p_url, p_sub_domain) + LENGTH(p_sub_domain); v_length := INSTR(SUBSTR(p_url, v_begin_pos), '.') - 1; RETURN SUBSTR(p_url, v_begin_pos, v_length); END; -- SQL statement SELECT capitalize(name) as name, capitalize(get_domain_name(url)) AS domain_name, url FROM products; Result SQL> WITH 2 -- Function to capitalize input string 3 FUNCTION capitalize 4 ( 5 p_string VARCHAR2 6 ) 7 RETURN VARCHAR2 8 IS 9 BEGIN 10 RETURN CONCAT(UPPER(SUBSTR(p_string,1,1)), SUBSTR(p_string,2)); 11 END; 12 -- Function to retrieve the domain name from a URL 13 FUNCTION get_domain_name 14 ( 15 p_url VARCHAR2, 16 p_sub_domain VARCHAR2 DEFAULT 'www.' 17 ) 18 RETURN VARCHAR2 19 IS 20 v_begin_pos BINARY_INTEGER; 21 v_length BINARY_INTEGER; 22 BEGIN 23 v_begin_pos := INSTR(p_url, p_sub_domain) + LENGTH(p_sub_domain); 24 v_length := INSTR(SUBSTR(p_url, v_begin_pos), '.') - 1; 25 RETURN SUBSTR(p_url, v_begin_pos, v_length); 26 END; 27 -- SQL statement 28 SELECT capitalize(name) as name, capitalize(get_domain_name(url)) AS domain_name, url 29 FROM products; 30 / NAME DOMAIN_NAME URL ________________________________ ______________ _______________________________________________________________________________________ AirPods Pro (2nd gen) Apple https://www.apple.com/shop/product/MQD83AM/A/airpods-pro SanDisk - Ultra 512GB USB 3.0 Bestbuy https://www.bestbuy.com/site/sandisk-ultra-512gb-usb-3-0-flash-drive-black/6422265.p Being able to run anonymous PL/SQL function with SQL statements can be useful where processing through PL/SQL is required or wanted but the user does either not have the necessary privileges to create a named function or does not want to reuse the function. Availability: All Offerings Documentation Example","title":"PL/SQL Function in SQL","component":"guide","version":"latest","name":"plsql-function-in-sql","url":"/guide/latest/versions/12.1.0.1/plsql/plsql-function-in-sql.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"95":{"id":95,"text":"Version 12.1.0.1 Categories SQL The identity columns feature can be used to designate one column in the table as the identity for the row. The database will automatically assign an increasing integer value from a sequence generator to the identity column for each subsequent INSERT statement. This feature is sometimes also referred to as autoincrement. This feature is part of the ISO SQL:2016 standard. To declare a column as an identity in a table, use the GENERATED AS IDENTITY column attribute: -- Create a table with the column \"ID\" generated as Identity column CREATE TABLE employees ( id NUMBER GENERATED AS IDENTITY NOT NULL PRIMARY KEY, first_name VARCHAR2(10), last_name VARCHAR2(10) NOT NULL, job_title VARCHAR2(20) NOT NULL ); -- Note the absence of the \"ID\" column in the INSERT statement. -- Although it is a primary key and NOT NULL, the inserts succeed. INSERT INTO employees (first_name, last_name, job_title) VALUES ('Gerald', 'Venzl', 'Developer'); INSERT INTO employees (first_name, last_name, job_title) VALUES ('Andres', 'Almiray', 'Developer'); INSERT INTO employees (first_name, last_name, job_title) VALUES ('Chris', 'Saxon', 'Developer Evangelist'); COMMIT; -- The SELECT statement will show the \"ID\" column with values filled by the generated identity values. SELECT * FROM employees; The identity column provides additional syntax modifiers to: Always generate a new identity value, via GENERATED ALWAYS AS IDENTITY Generate a new identity value if none has been provided, via GENERATED BY DEFAULT Generate a new identity value if one has been provided by evaluates to NULL, via GENERATED BY DEFAULT ON NULL Provide additional identity generation options via GENERATED AS IDENTITY () Result SQL> -- Create a table with the column \"ID\" generated as Identity column SQL> CREATE TABLE employees 2 ( 3 id NUMBER GENERATED AS IDENTITY NOT NULL PRIMARY KEY, 4 first_name VARCHAR2(10), 5 last_name VARCHAR2(10) NOT NULL, 6 job_title VARCHAR2(20) NOT NULL 7 ); Table EMPLOYEES created. SQL> -- Note the absence of the \"ID\" column in the INSERT statement. SQL> -- Although it is a primary key and NOT NULL, the inserts succeed. SQL> INSERT INTO employees (first_name, last_name, job_title) VALUES ('Gerald', 'Venzl', 'Developer'); 1 row inserted. SQL> INSERT INTO employees (first_name, last_name, job_title) VALUES ('Andres', 'Almiray', 'Developer'); 1 row inserted. SQL> INSERT INTO employees (first_name, last_name, job_title) VALUES ('Chris', 'Saxon', 'Developer Evangelist'); 1 row inserted. SQL> COMMIT; Commit complete. SQL> -- The SELECT statement will show the \"ID\" column with values filled by the generated identity values. SQL> SELECT * FROM employees; ID FIRST_NAME LAST_NAME JOB_TITLE -- ---------- --------- -------------------- 1 Gerald Venzl Developer 2 Andres Almiray Developer 3 Chris Saxon Developer Evangelist The first relational normal form dictates that each table has to have a primary key by which a row can be uniquely identified (i.e. only one row exists for a given primary key value). Sometimes data records contain \"natural primary keys\" that uniquely identify themselves, such as the user name for a customer_accounts table, the VIN (Vehicle Identification Number) for a cars table, the driver license id for a driver _licenses table. However, often such natural primary keys do not exist within the data records and need to instead be generated, which is where identity columns can help. Identity columns ensure that the value for a new row will always be unique by using an always incrementing integer value that will never be used twice. Availability: All Offerings Documentation - CREATE TABLE identity_clause Example","title":"Identity Columns","component":"guide","version":"latest","name":"identity-columns","url":"/guide/latest/versions/12.1.0.1/sql/identity-columns.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"96":{"id":96,"text":"SQL is the set-based, high-level declarative (4GL) computer language with which all programs and users access data in a relational database. SQL unifies tasks such as the following in one consistent language: Creating, replacing, altering, and dropping objects Inserting, updating, and deleting table rows Querying and analyzing data Controlling access to the database and its objects Guaranteeing database consistency and integrity SQL became a standard of the American National Standards Institute (ANSI) in 1986 and of the International Organization for Standardization (ISO) in 1987. Oracle SQL includes many extensions to the ANSI/ISO standard SQL language, and Oracle Database tools and applications provide additional statements. For more information about SQL see SQL Language Reference.","title":"SQL","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/12.1.0.1/sql/index.html","titles":[]},"97":{"id":97,"text":"Version 12.1.0.1 Categories SQL, PL/SQL This feature enables users to write anonymous PL/SQL functions for the lifetime of a SQL query. The PL/SQL functions can be specified in the WITH clause (Common Table Expression (CTE)) and then referenced in one or many SQL queries below. This example demonstrates how to leverage two anonymous PL/SQL functions with in a SQL statement: The capitalize function capitalizes the first letter of the input string. The get_domain_name function retrieves the domain name from a URL. WITH -- Function to capitalize input string FUNCTION capitalize ( p_string VARCHAR2 ) RETURN VARCHAR2 IS BEGIN RETURN CONCAT(UPPER(SUBSTR(p_string,1,1)), SUBSTR(p_string,2)); END; -- Function to retrieve the domain name from a URL FUNCTION get_domain_name ( p_url VARCHAR2, p_sub_domain VARCHAR2 DEFAULT 'www.' ) RETURN VARCHAR2 IS v_begin_pos BINARY_INTEGER; v_length BINARY_INTEGER; BEGIN v_begin_pos := INSTR(p_url, p_sub_domain) + LENGTH(p_sub_domain); v_length := INSTR(SUBSTR(p_url, v_begin_pos), '.') - 1; RETURN SUBSTR(p_url, v_begin_pos, v_length); END; -- SQL statement SELECT capitalize(name) as name, capitalize(get_domain_name(url)) AS domain_name, url FROM products; Result SQL> WITH 2 -- Function to capitalize input string 3 FUNCTION capitalize 4 ( 5 p_string VARCHAR2 6 ) 7 RETURN VARCHAR2 8 IS 9 BEGIN 10 RETURN CONCAT(UPPER(SUBSTR(p_string,1,1)), SUBSTR(p_string,2)); 11 END; 12 -- Function to retrieve the domain name from a URL 13 FUNCTION get_domain_name 14 ( 15 p_url VARCHAR2, 16 p_sub_domain VARCHAR2 DEFAULT 'www.' 17 ) 18 RETURN VARCHAR2 19 IS 20 v_begin_pos BINARY_INTEGER; 21 v_length BINARY_INTEGER; 22 BEGIN 23 v_begin_pos := INSTR(p_url, p_sub_domain) + LENGTH(p_sub_domain); 24 v_length := INSTR(SUBSTR(p_url, v_begin_pos), '.') - 1; 25 RETURN SUBSTR(p_url, v_begin_pos, v_length); 26 END; 27 -- SQL statement 28 SELECT capitalize(name) as name, capitalize(get_domain_name(url)) AS domain_name, url 29 FROM products; 30 / NAME DOMAIN_NAME URL ________________________________ ______________ _______________________________________________________________________________________ AirPods Pro (2nd gen) Apple https://www.apple.com/shop/product/MQD83AM/A/airpods-pro SanDisk - Ultra 512GB USB 3.0 Bestbuy https://www.bestbuy.com/site/sandisk-ultra-512gb-usb-3-0-flash-drive-black/6422265.p Being able to run anonymous PL/SQL function with SQL statements can be useful where processing through PL/SQL is required or wanted but the user does either not have the necessary privileges to create a named function or does not want to reuse the function. Availability: All Offerings Documentation Example","title":"PL/SQL Function in SQL","component":"guide","version":"latest","name":"plsql-function-in-sql","url":"/guide/latest/versions/12.1.0.1/sql/plsql-function-in-sql.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"98":{"id":98,"text":"Version 12.1.0.1 Categories SQL Many SQL queries benefit from limiting the result set to the top-n, or first n rows. Before Oracle 12c Release 1 limiting the result set required the use of sub-selects and the rownum pseudo-column and inline views as you can see in the first examples. When Oracle Database 12c introduced support for the row limiting clause selecting the first n rows from a result set, or paging through a result set were significantly improved. /* Displaying the top 10 customers by sales using the pre- Oracle Database 12c syntax */ SELECT * FROM ( SELECT SUM(quantity_sold * amount_sold) AS revenue, cust_id FROM sales GROUP BY cust_id ORDER BY SUM(quantity_sold * amount_sold) DESC ) WHERE ROWNUM = :n; /* The same queries, however this time using the new syntax, available from Oracle Database 12c Release 1 onwards */ SELECT SUM(quantity_sold * amount_sold) AS revenue, cust_id FROM sales GROUP BY cust_id ORDER BY SUM(quantity_sold * amount_sold) DESC FETCH FIRST 10 ROWS ONLY; SELECT SUM(quantity_sold * amount_sold) AS revenue, cust_id FROM sales GROUP BY cust_id ORDER BY SUM(quantity_sold * amount_sold) DESC OFFSET 9 ROWS FETCH NEXT 11 ROWS ONLY; Result SQL> /* SQL> Displaying the top 10 customers by sales using the pre- SQL> Oracle Database 12c syntax SQL>*/ SQL> SELECT 2 * 3 FROM 4 ( 5 SELECT 6 SUM(quantity_sold * amount_sold) AS revenue, 7 cust_id 8 FROM 9 sales 10 GROUP BY 11 cust_id 12 ORDER BY 13 SUM(quantity_sold * amount_sold) DESC 14 ) 15 WHERE 16 ROWNUM /* SQL> Iterating over the result set, displaying 10 customers each using the pre- SQL> Oracle Database 12c syntax. You typically find this type of query in reports SQL> where batches of rows are displayed on screen. The following query retrieves SQL> rows n to m (say, 10 to 20) from the result set. SQL>*/ SQL> VAR n NUMBER SQL> VAR m NUMBER SQL> BEGIN 2 :n := 10; 3 :m := 20; 4 END; 5 / PL/SQL procedure successfully completed. SQL> SELECT 2 * 3 FROM 4 ( 5 SELECT 6 a.*, 7 ROWNUM rn 8 FROM 9 ( 10 SELECT 11 SUM(quantity_sold * amount_sold) AS revenue, 12 cust_id 13 FROM 14 sales 15 GROUP BY 16 cust_id 17 ORDER BY 18 SUM(quantity_sold * amount_sold) DESC 19 ) a 20 WHERE 21 ROWNUM = :n; REVENUE CUST_ID RN ___________ __________ _____ 93644,32 4759 10 92671,18 9038 11 90908,24 4090 12 89018,86 7178 13 86440,63 6279 14 85278,17 11702 15 85200,78 6265 16 84261,92 25939 17 83833,3 7994 18 83461,16 20966 19 81970,44 3453 20 11 rows selected. SQL> /* SQL> The same queries, however this time using the new syntax, available from SQL> Oracle Database 12c Release 1 onwards SQL>*/ SQL> SELECT 2 SUM(quantity_sold * amount_sold) AS revenue, 3 cust_id 4 FROM 5 sales 6 GROUP BY 7 cust_id 8 ORDER BY 9 SUM(quantity_sold * amount_sold) DESC 10 FETCH FIRST 10 ROWS ONLY; REVENUE CUST_ID ____________ __________ 103412,66 11407 99578,09 10747 98585,96 42167 98006,16 4974 97573,55 12783 97010,48 6395 94862,61 2994 94819,41 429 94786,13 1743 93644,32 4759 10 rows selected. SQL> SELECT 2 SUM(quantity_sold * amount_sold) AS revenue, 3 cust_id 4 FROM 5 sales 6 GROUP BY 7 cust_id 8 ORDER BY 9 SUM(quantity_sold * amount_sold) DESC 10 OFFSET 9 ROWS FETCH NEXT 11 ROWS ONLY; REVENUE CUST_ID ___________ __________ 93644,32 4759 92671,18 9038 90908,24 4090 89018,86 7178 86440,63 6279 85278,17 11702 85200,78 6265 84261,92 25939 83833,3 7994 83461,16 20966 81970,44 3453 11 rows selected. The FETCH FIRST and OFFSET clauses provides native SQL language support to limit the number of rows returned and to specify a starting row for the return set. Many queries need to limit the number of rows returned or offset the starting row of the results. For example, top-N queries sort their result set and then return only the first n rows. FETCH FIRST and OFFSET simplify syntax and comply with the ANSI SQL standard. Availability: All Offerings SQL Language Reference Blog post with additional examples covering many aspects of top-n queries, including analytic functions","title":"Native SQL Support for Query Row Limits and Row Offsets","component":"guide","version":"latest","name":"query-row-limits-and-offsets","url":"/guide/latest/versions/12.1.0.1/sql/query-row-limits-and-offsets.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"99":{"id":99,"text":"Oracle Database supports a rich set of languages for writing user-defined functions and stored procedures, including PL/SQL, Java, and C. With Oracle Database Multilingual Engine (MLE), developers have the additional option to run JavaScript code starting with Oracle Database 23c.","title":"JavaScript","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/12.1.0.2/javascript/index.html","titles":[]},"100":{"id":100,"text":"PL/SQL provides a server-side, stored procedural language that is easy-to-use, seamless with SQL, robust, portable, and secure. You can access and manipulate data inside the database using procedural objects called PL/SQL units. PL/SQL units generally are categorized as follows: A PL/SQL subprogram is a PL/SQL block that is stored in the database and can be called by name from an application. When you create a subprogram, the database parses the subprogram and stores its parsed representation in the database. You can declare a subprogram as a procedure or a function. A PL/SQL anonymous block is a PL/SQL block that appears in your application and is not named or stored in the database. In many applications, PL/SQL blocks can appear wherever SQL statements can appear. PL/SQL includes procedural language elements such as conditions and loops and can handle exceptions. It allows declaration of constants, variables, procedures, functions, packages, types and variables of those types, and triggers. Arrays are supported via the use of PL/SQL collections. For more information about PL/SQL see Overview of PL/SQL.","title":"PL/SQL","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/12.1.0.2/plsql/index.html","titles":[]},"101":{"id":101,"text":"SQL is the set-based, high-level declarative (4GL) computer language with which all programs and users access data in a relational database. SQL unifies tasks such as the following in one consistent language: Creating, replacing, altering, and dropping objects Inserting, updating, and deleting table rows Querying and analyzing data Controlling access to the database and its objects Guaranteeing database consistency and integrity SQL became a standard of the American National Standards Institute (ANSI) in 1986 and of the International Organization for Standardization (ISO) in 1987. Oracle SQL includes many extensions to the ANSI/ISO standard SQL language, and Oracle Database tools and applications provide additional statements. For more information about SQL see SQL Language Reference.","title":"SQL","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/12.1.0.2/sql/index.html","titles":[]},"102":{"id":102,"text":"Version 21.3 Categories SQL The WINDOW clause enables you to define PARTITION BY, ORDER BY, and window frames for analytic functions. You can use these named windows in the OVER clause of functions in the SELECT clause. alter session set nls_date_format = 'DD-MON-YYYY'; select employee_id, department_id, salary, -- these calculate totals per department count (*) over ( dept_w ) emps_per_dept, sum ( salary ) over ( dept_w ) wages_per_dept, hire_date, -- this gets the running total of salaries/dept in order they were hired sum ( salary ) over ( hired_w ) cumul_sal, -- this gets the moving average of salaries for the last four hires/dept round ( avg ( salary ) over last_four ) rolling_mean from hr.employees where department_id alter session set nls_date_format = 'DD-MON-YYYY'; Session altered. SQL> select employee_id, 2 department_id, salary, 3 -- these calculate totals per department 4 count (*) over ( dept_w ) emps_per_dept, 5 sum ( salary ) over ( dept_w ) wages_per_dept, 6 hire_date, 7 -- this gets the running total of salaries/dept in order they were hired 8 sum ( salary ) over ( hired_w ) cumul_sal, 9 -- this gets the moving average of salaries for the last four hires/dept 10 round ( avg ( salary ) over last_four ) rolling_mean 11 from hr.employees 12 where department_id < 50 13 window dept_w as ( 14 -- split by department 15 partition by department_id 16 ), hired_w as ( 17 -- sort by date hired 18 dept_w order by hire_date 19 ), last_four as ( 20 -- include the previous three rows & current 21 hired_w rows 3 preceding 22 ); EMPLOYEE_ID DEPARTMENT_ID SALARY EMPS_PER_DEPT WAGES_PER_DEPT HIRE_DATE CUMUL_SAL ROLLING_MEAN ----------- ------------- ---------- ------------- -------------- ----------- ---------- ------------ 200 10 4400 1 4400 17-SEP-2013 4400 4400 201 20 13000 2 19000 17-FEB-2014 13000 13000 202 20 6000 2 19000 17-AUG-2015 19000 9500 114 30 11000 6 24900 07-DEC-2012 11000 11000 115 30 3100 6 24900 18-MAY-2013 14100 7050 117 30 2800 6 24900 24-JUL-2015 16900 5633 116 30 2900 6 24900 24-DEC-2015 19800 4950 118 30 2600 6 24900 15-NOV-2016 22400 2850 119 30 2500 6 24900 10-AUG-2017 24900 2700 203 40 6500 1 6500 07-JUN-2012 6500 6500 10 rows selected. The WINDOW clause enables you to define common windows once and reuse them in a statement. This makes queries easier to maintain. Availability: All Offerings Documentation","title":"WINDOW clause","component":"guide","version":"latest","name":"window-clause","url":"/guide/latest/versions/21.3/features/window-clause.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"103":{"id":103,"text":"Version 21.3 Categories SQL Use frame exclusion to omit rows from the calculation in window functions. This has four options: EXCLUDE CURRENT ROW - remove the row being processed from the calculation. EXCLUDE GROUP - omit all rows with the same value for the window’s ORDER BY columns as the current row EXCLUDE TIES - omit all other rows with the same value for the window’s ORDER BY columns from the total as the current row, but include the current row EXCLUDE NO OTHERS - Include all rows in the window in the calculation. This is the default. alter session set nls_date_format = 'DD-MON-YYYY'; select hire_date , count(*) over ( -- include all previous rows; default hire_w rows unbounded preceding exclude no others ) include_all , count(*) over ( -- omit this row from the count hire_w rows unbounded preceding exclude current row ) omit_current , count(*) over ( -- omit all rows with the same value for hire_date as this hire_w rows unbounded preceding exclude group ) omit_group , count(*) over ( -- omit other rows with the same value for hire_date as this hire_w rows unbounded preceding exclude ties ) omit_ties from hr.employees where hire_date >= date'2015-03-03' window hire_w as ( order by hire_date ) fetch first 5 rows only; Result SQL> alter session set nls_date_format = 'DD-MON-YYYY'; Session altered. SQL> select hire_date 2 , count(*) over ( 3 -- include all previous rows; default 4 hire_w rows unbounded preceding exclude no others 5 ) include_all 6 , count(*) over ( 7 -- omit this row from the count 8 hire_w rows unbounded preceding exclude current row 9 ) omit_current 10 , count(*) over ( 11 -- omit all rows with the same value for hire_date as this 12 hire_w rows unbounded preceding exclude group 13 ) omit_group 14 , count(*) over ( 15 -- omit other rows with the same value for hire_date as this 16 hire_w rows unbounded preceding exclude ties 17 ) omit_ties 18 from hr.employees 19 where hire_date >= date'2015-03-03' 20 window hire_w as ( order by hire_date ) 21 fetch first 5 rows only; HIRE_DATE INCLUDE_ALL OMIT_CURRENT OMIT_GROUP OMIT_TIES ----------- ----------- ------------ ---------- ---------- 03-MAR-2015 1 0 0 1 10-MAR-2015 2 1 1 2 10-MAR-2015 3 2 1 2 11-MAR-2015 4 3 3 4 19-MAR-2015 5 4 4 5 Frame exclusion simplifies SQL statements that need to remove rows from running total and moving window calculations Availability: All Offerings Documentation","title":"Window functions frame exclusion","component":"guide","version":"latest","name":"window-functions-exclusion-frame","url":"/guide/latest/versions/21.3/features/window-functions-exclusion-frame.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"104":{"id":104,"text":"Version 21.3 Categories SQL The GROUPS frame enables you to get running totals over the previous N sort values in window functions. This in addition to the existing ROWS and RANGE frames. The differences between these are: ROWS :N PRECEDING - include the current row and up to N rows before it RANGE :N PRECEDING - include all rows between current - N and current; current is the value of the ORDER BY column for the row the function is processing GROUPS :N PRECEDING - include all rows with the same value and previous N unique values for the columns in the window’s ORDER BY alter session set nls_date_format = 'DD-MON-YYYY'; select hire_date -- include current & three previous rows , count(*) over ( order by hire_date rows 3 preceding ) prev3_rows -- include all rows between hire_date - 3 and hire_date for the current row , count(*) over ( order by hire_date range 3 preceding ) prev3_days -- include all rows with the any of the previous three and current hire_dates , count(*) over ( order by hire_date groups 3 preceding ) prev3_values from hr.employees where hire_date >= date'2015-03-03' fetch first 5 rows only; Result SQL> alter session set nls_date_format = 'DD-MON-YYYY'; Session altered. SQL> select hire_date 2 -- include current & three previous rows 3 , count(*) over ( order by hire_date rows 3 preceding ) prev3_rows 4 -- include all rows between hire_date - 3 and hire_date for the current row 5 , count(*) over ( order by hire_date range 3 preceding ) prev3_days 6 -- include all rows with the any of the previous three and current hire_dates 7 , count(*) over ( order by hire_date groups 3 preceding ) prev3_values 8 from hr.employees 9 where hire_date >= date'2015-03-03' 10 fetch first 5 rows only; HIRE_DATE PREV3_ROWS PREV3_DAYS PREV3_VALUES ----------- ---------- ---------- ------------ 03-MAR-2015 1 1 1 10-MAR-2015 2 2 3 10-MAR-2015 3 2 3 11-MAR-2015 4 3 4 19-MAR-2015 4 1 5 The GROUPS frame simplifies SQL statements that need to calculate running totals over the previous N unique values. Availability: All Offerings Documentation","title":"Window functions GROUPS frame","component":"guide","version":"latest","name":"window-functions-groups-frame","url":"/guide/latest/versions/21.3/features/window-functions-groups-frame.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"105":{"id":105,"text":"Oracle Database supports a rich set of languages for writing user-defined functions and stored procedures, including PL/SQL, Java, and C. With Oracle Database Multilingual Engine (MLE), developers have the additional option to run JavaScript code starting with Oracle Database 23c.","title":"JavaScript","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/21.3/javascript/index.html","titles":[]},"106":{"id":106,"text":"PL/SQL provides a server-side, stored procedural language that is easy-to-use, seamless with SQL, robust, portable, and secure. You can access and manipulate data inside the database using procedural objects called PL/SQL units. PL/SQL units generally are categorized as follows: A PL/SQL subprogram is a PL/SQL block that is stored in the database and can be called by name from an application. When you create a subprogram, the database parses the subprogram and stores its parsed representation in the database. You can declare a subprogram as a procedure or a function. A PL/SQL anonymous block is a PL/SQL block that appears in your application and is not named or stored in the database. In many applications, PL/SQL blocks can appear wherever SQL statements can appear. PL/SQL includes procedural language elements such as conditions and loops and can handle exceptions. It allows declaration of constants, variables, procedures, functions, packages, types and variables of those types, and triggers. Arrays are supported via the use of PL/SQL collections. For more information about PL/SQL see Overview of PL/SQL.","title":"PL/SQL","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/21.3/plsql/index.html","titles":[]},"107":{"id":107,"text":"SQL is the set-based, high-level declarative (4GL) computer language with which all programs and users access data in a relational database. SQL unifies tasks such as the following in one consistent language: Creating, replacing, altering, and dropping objects Inserting, updating, and deleting table rows Querying and analyzing data Controlling access to the database and its objects Guaranteeing database consistency and integrity SQL became a standard of the American National Standards Institute (ANSI) in 1986 and of the International Organization for Standardization (ISO) in 1987. Oracle SQL includes many extensions to the ANSI/ISO standard SQL language, and Oracle Database tools and applications provide additional statements. For more information about SQL see SQL Language Reference.","title":"SQL","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/21.3/sql/index.html","titles":[]},"108":{"id":108,"text":"Version 21.3 Categories SQL The WINDOW clause enables you to define PARTITION BY, ORDER BY, and window frames for analytic functions. You can use these named windows in the OVER clause of functions in the SELECT clause. alter session set nls_date_format = 'DD-MON-YYYY'; select employee_id, department_id, salary, -- these calculate totals per department count (*) over ( dept_w ) emps_per_dept, sum ( salary ) over ( dept_w ) wages_per_dept, hire_date, -- this gets the running total of salaries/dept in order they were hired sum ( salary ) over ( hired_w ) cumul_sal, -- this gets the moving average of salaries for the last four hires/dept round ( avg ( salary ) over last_four ) rolling_mean from hr.employees where department_id alter session set nls_date_format = 'DD-MON-YYYY'; Session altered. SQL> select employee_id, 2 department_id, salary, 3 -- these calculate totals per department 4 count (*) over ( dept_w ) emps_per_dept, 5 sum ( salary ) over ( dept_w ) wages_per_dept, 6 hire_date, 7 -- this gets the running total of salaries/dept in order they were hired 8 sum ( salary ) over ( hired_w ) cumul_sal, 9 -- this gets the moving average of salaries for the last four hires/dept 10 round ( avg ( salary ) over last_four ) rolling_mean 11 from hr.employees 12 where department_id < 50 13 window dept_w as ( 14 -- split by department 15 partition by department_id 16 ), hired_w as ( 17 -- sort by date hired 18 dept_w order by hire_date 19 ), last_four as ( 20 -- include the previous three rows & current 21 hired_w rows 3 preceding 22 ); EMPLOYEE_ID DEPARTMENT_ID SALARY EMPS_PER_DEPT WAGES_PER_DEPT HIRE_DATE CUMUL_SAL ROLLING_MEAN ----------- ------------- ---------- ------------- -------------- ----------- ---------- ------------ 200 10 4400 1 4400 17-SEP-2013 4400 4400 201 20 13000 2 19000 17-FEB-2014 13000 13000 202 20 6000 2 19000 17-AUG-2015 19000 9500 114 30 11000 6 24900 07-DEC-2012 11000 11000 115 30 3100 6 24900 18-MAY-2013 14100 7050 117 30 2800 6 24900 24-JUL-2015 16900 5633 116 30 2900 6 24900 24-DEC-2015 19800 4950 118 30 2600 6 24900 15-NOV-2016 22400 2850 119 30 2500 6 24900 10-AUG-2017 24900 2700 203 40 6500 1 6500 07-JUN-2012 6500 6500 10 rows selected. The WINDOW clause enables you to define common windows once and reuse them in a statement. This makes queries easier to maintain. Availability: All Offerings Documentation","title":"WINDOW clause","component":"guide","version":"latest","name":"window-clause","url":"/guide/latest/versions/21.3/sql/window-clause.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"109":{"id":109,"text":"Version 21.3 Categories SQL Use frame exclusion to omit rows from the calculation in window functions. This has four options: EXCLUDE CURRENT ROW - remove the row being processed from the calculation. EXCLUDE GROUP - omit all rows with the same value for the window’s ORDER BY columns as the current row EXCLUDE TIES - omit all other rows with the same value for the window’s ORDER BY columns from the total as the current row, but include the current row EXCLUDE NO OTHERS - Include all rows in the window in the calculation. This is the default. alter session set nls_date_format = 'DD-MON-YYYY'; select hire_date , count(*) over ( -- include all previous rows; default hire_w rows unbounded preceding exclude no others ) include_all , count(*) over ( -- omit this row from the count hire_w rows unbounded preceding exclude current row ) omit_current , count(*) over ( -- omit all rows with the same value for hire_date as this hire_w rows unbounded preceding exclude group ) omit_group , count(*) over ( -- omit other rows with the same value for hire_date as this hire_w rows unbounded preceding exclude ties ) omit_ties from hr.employees where hire_date >= date'2015-03-03' window hire_w as ( order by hire_date ) fetch first 5 rows only; Result SQL> alter session set nls_date_format = 'DD-MON-YYYY'; Session altered. SQL> select hire_date 2 , count(*) over ( 3 -- include all previous rows; default 4 hire_w rows unbounded preceding exclude no others 5 ) include_all 6 , count(*) over ( 7 -- omit this row from the count 8 hire_w rows unbounded preceding exclude current row 9 ) omit_current 10 , count(*) over ( 11 -- omit all rows with the same value for hire_date as this 12 hire_w rows unbounded preceding exclude group 13 ) omit_group 14 , count(*) over ( 15 -- omit other rows with the same value for hire_date as this 16 hire_w rows unbounded preceding exclude ties 17 ) omit_ties 18 from hr.employees 19 where hire_date >= date'2015-03-03' 20 window hire_w as ( order by hire_date ) 21 fetch first 5 rows only; HIRE_DATE INCLUDE_ALL OMIT_CURRENT OMIT_GROUP OMIT_TIES ----------- ----------- ------------ ---------- ---------- 03-MAR-2015 1 0 0 1 10-MAR-2015 2 1 1 2 10-MAR-2015 3 2 1 2 11-MAR-2015 4 3 3 4 19-MAR-2015 5 4 4 5 Frame exclusion simplifies SQL statements that need to remove rows from running total and moving window calculations Availability: All Offerings Documentation","title":"Window functions frame exclusion","component":"guide","version":"latest","name":"window-functions-exclusion-frame","url":"/guide/latest/versions/21.3/sql/window-functions-exclusion-frame.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"110":{"id":110,"text":"Version 21.3 Categories SQL The GROUPS frame enables you to get running totals over the previous N sort values in window functions. This in addition to the existing ROWS and RANGE frames. The differences between these are: ROWS :N PRECEDING - include the current row and up to N rows before it RANGE :N PRECEDING - include all rows between current - N and current; current is the value of the ORDER BY column for the row the function is processing GROUPS :N PRECEDING - include all rows with the same value and previous N unique values for the columns in the window’s ORDER BY alter session set nls_date_format = 'DD-MON-YYYY'; select hire_date -- include current & three previous rows , count(*) over ( order by hire_date rows 3 preceding ) prev3_rows -- include all rows between hire_date - 3 and hire_date for the current row , count(*) over ( order by hire_date range 3 preceding ) prev3_days -- include all rows with the any of the previous three and current hire_dates , count(*) over ( order by hire_date groups 3 preceding ) prev3_values from hr.employees where hire_date >= date'2015-03-03' fetch first 5 rows only; Result SQL> alter session set nls_date_format = 'DD-MON-YYYY'; Session altered. SQL> select hire_date 2 -- include current & three previous rows 3 , count(*) over ( order by hire_date rows 3 preceding ) prev3_rows 4 -- include all rows between hire_date - 3 and hire_date for the current row 5 , count(*) over ( order by hire_date range 3 preceding ) prev3_days 6 -- include all rows with the any of the previous three and current hire_dates 7 , count(*) over ( order by hire_date groups 3 preceding ) prev3_values 8 from hr.employees 9 where hire_date >= date'2015-03-03' 10 fetch first 5 rows only; HIRE_DATE PREV3_ROWS PREV3_DAYS PREV3_VALUES ----------- ---------- ---------- ------------ 03-MAR-2015 1 1 1 10-MAR-2015 2 2 3 10-MAR-2015 3 2 3 11-MAR-2015 4 3 4 19-MAR-2015 4 1 5 The GROUPS frame simplifies SQL statements that need to calculate running totals over the previous N unique values. Availability: All Offerings Documentation","title":"Window functions GROUPS frame","component":"guide","version":"latest","name":"window-functions-groups-frame","url":"/guide/latest/versions/21.3/sql/window-functions-groups-frame.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"111":{"id":111,"text":"Version 23.2 Categories SQL Annotations are a lightweight declarative facility for developers to centrally register usage properties for database schema objects. Annotations are stored in dictionary tables and available to any application looking to standardize behavior across common data in related applications. Annotations are not interpreted by the database in any way and are custom data properties for database metadata - including table columns, tables, and indexes. Applications can use annotations as additional property metadata for rendering user interfaces or customizing application logic. -- example 01: table-level annotation CREATE TABLE customers ( customer_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY, email_address VARCHAR2(255 CHAR) NOT NULL, full_name VARCHAR2(255 CHAR) NOT NULL ) ANNOTATIONS ( sensitivity 'high', departments 'sales, delivery', frontOffice ) / -- example 02: adding a column-level annotation ALTER TABLE customers MODIFY ( email_address ANNOTATIONS ( sensitivity 'highest' ) ) / -- example 03: table and column level annotations CREATE TABLE employees ( id NUMBER(5) ANNOTATIONS ( identity, display_as 'Employee ID', group_name 'Emp_Info'), name VARCHAR2(50) ANNOTATIONS ( display_as 'Employee Name', group_name 'Emp_Info'), salary NUMBER ANNOTATIONS ( display_as 'Employee Salary', UI_hidden) ) ANNOTATIONS ( display_as 'Employee Table' ) / -- example 04: query the dictionary for annotation usage SELECT object_name, object_type, column_name, annotation_name, annotation_value FROM user_annotations_usage ORDER BY object_name, column_name / Result SQL> -- example 01: table-level annotation SQL> CREATE TABLE customers ( 2 customer_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY, 3 email_address VARCHAR2(255 CHAR) NOT NULL, 4 full_name VARCHAR2(255 CHAR) NOT NULL 5 ) 6 ANNOTATIONS ( 7 sensitivity 'high', 8 departments 'sales, delivery', 9 frontOffice 10 ) 11 / Table CUSTOMERS created. SQL> -- example 02: adding a column-level annotation SQL> ALTER TABLE customers MODIFY ( 2 email_address ANNOTATIONS ( sensitivity 'highest' ) 3 ) 4 / Table CUSTOMERS altered. SQL> -- example 03: table and column level annotations SQL> CREATE TABLE employees 2 ( 3 id NUMBER(5) 4 ANNOTATIONS ( 5 identity, 6 display_as 'Employee ID', 7 group_name 'Emp_Info'), 8 name VARCHAR2(50) 9 ANNOTATIONS ( 10 display_as 'Employee Name', 11 group_name 'Emp_Info'), 12 salary NUMBER 13 ANNOTATIONS ( 14 display_as 'Employee Salary', UI_hidden) 15 ) 16 ANNOTATIONS ( 17 display_as 'Employee Table' 18 ) 19 / Table EMPLOYEES created. SQL> -- example 04: query the dictionary for annotation usage SQL> SELECT 2 object_name, 4 column_name, 5 annotation_name, 6 annotation_value 7 FROM 8 user_annotations_usage 9 ORDER BY 10 object_name, 11 column_name 12 / OBJECT_NAME COLUMN_NAME ANNOTATION_NAME ANNOTATION_VALUE ______________ ________________ __________________ ___________________ CUSTOMERS EMAIL_ADDRESS SENSITIVITY highest CUSTOMERS DEPARTMENTS sales, delivery CUSTOMERS FRONTOFFICE CUSTOMERS SENSITIVITY high EMPLOYEES ID IDENTITY EMPLOYEES ID GROUP_NAME Emp_Info EMPLOYEES ID DISPLAY_AS Employee ID EMPLOYEES NAME DISPLAY_AS Employee Name EMPLOYEES NAME GROUP_NAME Emp_Info EMPLOYEES SALARY DISPLAY_AS Employee Salary EMPLOYEES SALARY UI_HIDDEN EMPLOYEES DISPLAY_AS Employee Table 12 rows selected. Annotating the data model with metadata provides additional data integrity, consistency and data model documentation benefits. Your applications can store user-defined metadata for database objects and table columns that other applications or users can retrieve and use. Storing the metadata along with the data guarantees consistency and universal accessibility to any user or application that uses the data. Availability: All Offerings Database Concepts Guide Database Development Guide","title":"Annotations","component":"guide","version":"latest","name":"annotations","url":"/guide/latest/versions/23.2/features/annotations.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"112":{"id":112,"text":"Version 23.2 Categories SQL The BOOLEAN data type enables the storage and processing of TRUE and FALSE values. Boolean values can be used as table column values or inside SQL query expressions. To declare a table column of type BOOLEAN, either use the BOOLEAN or BOOL keyword. This feature is part of the ISO SQL:1999 standard. -- Create a new table containing two boolean columns CREATE TABLE email_addresses ( user_id NUMBER NOT NULL, email VARCHAR2(255) NOT NULL, active BOOLEAN NOT NULL, primary BOOL NOT NULL ); -- Insert values into the table INSERT INTO email_addresses (user_id, active, primary, email) VALUES ( 1, true, true, 'jon.doe@example.com'), ( 2, true, true, 'jane.smith@gmail.com'), ( 2, false, false, 'jsmith@gmail.com'), ( 3, true, true, 'max.well@example.com'), ( 3, true, false, 'mwell@gmail.com'); COMMIT; -- Select all email addresses that are active SELECT email FROM email_addresses WHERE active; -- Select all email addresses that are active but not primary SELECT email FROM email_addresses WHERE active AND NOT primary; Result SQL> -- Create a new table containing two boolean columns SQL> CREATE TABLE email_addresses ( user_id NUMBER NOT NULL, email VARCHAR2(255) NOT NULL, active BOOLEAN NOT NULL, primary BOOL NOT NULL ); Table created. SQL> -- Insert values into the table SQL> INSERT INTO email_addresses (user_id, active, primary, email) VALUES ( 1, true, true, 'jon.doe@example.com'), ( 2, true, true, 'jane.smith@gmail.com'), ( 2, false, false, 'jsmith@gmail.com'), ( 3, true, true, 'max.well@example.com'), ( 3, true, false, 'mwell@gmail.com'); 5 rows created. SQL> COMMIT; Commit complete. SQL> -- Select all email addresses that are active SQL> SELECT email FROM email_addresses WHERE active; EMAIL -------------------------------------------------------------------------------- jon.doe@example.com jane.smith@gmail.com max.well@example.com mwell@gmail.com SQL> -- Select all email addresses that are active but not primary SQL> SELECT email FROM email_addresses WHERE active AND NOT primary; EMAIL -------------------------------------------------------------------------------- mwell@gmail.com The BOOLEAN data type standardizes the storage of \"Yes\" and \"No\" values. Availability: All Offerings Documentation Example","title":"Boolean data type","component":"guide","version":"latest","name":"boolean","url":"/guide/latest/versions/23.2/features/boolean.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"113":{"id":113,"text":"Version 23.2 Categories SQL You can now pass DATE, TIMESTAMP, and INTERVAL values to the CEIL and FLOOR functions. These functions include an optional second argument to specify a rounding unit. You can also pass INTERVAL values to ROUND and TRUNC functions. with vals as ( select interval '+123-5' year(9) to month ymi, interval '+0 12:34:56' day to second dsi, to_date ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) dt, to_timestamp ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) ts ) select -- CEIL rounds up values ceil ( ymi ) as year_ceil, ceil ( dsi ) as day_ceil, ceil ( dt ) as dt_day_ceil, ceil ( ts ) as ts_day_ceil, -- FLOOR rounds down the datetime value to the units in the second paramter floor ( ymi, 'year' ) as ymi_year_floor, floor ( dsi, 'hh24' ) as dsi_hour_floor, floor ( dt, 'hh24' ) as dt_hour_floor, floor ( ts, 'hh24' ) as ts_hour_floor, -- ROUND now supports INTERVALs round ( dsi, 'mi' ) as dsi_minute_round from vals; Result SQL> with vals as ( 2 select 3 interval '+123-5' year(9) to month ymi, 4 interval '+0 12:34:56' day to second dsi, 5 to_date ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) dt, 6 to_timestamp ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) ts 7 ) 8 select 9 -- CEIL rounds up values 10 ceil ( ymi ) as year_ceil, 11 ceil ( dsi ) as day_ceil, 12 ceil ( dt ) as dt_day_ceil, 13 ceil ( ts ) as ts_day_ceil, 14 -- FLOOR rounds down the datetime value to the units in the second paramter 15 floor ( ymi, 'year' ) as ymi_year_floor, 16 floor ( dsi, 'hh24' ) as dsi_hour_floor, 17 floor ( dt, 'hh24' ) as dt_hour_floor, 18 floor ( ts, 'hh24' ) as ts_hour_floor, 19 -- ROUND now supports INTERVALs 20 round ( dsi, 'mi' ) as dsi_minute_round 21 from vals; YEAR_CE DAY_CEIL DT_DAY_CEIL TS_DAY_CEIL YMI_YEA DSI_HOUR_FLOOR DT_HOUR_FLOOR TS_HOUR_FLOOR DSI_MINUTE_ROUND ------- ------------------- ----------------- ----------------- ------- ------------------- ----------------- ----------------- ------------------- +124-00 +01 00:00:00.000000 13-APR-2023 00:00 13-APR-2023 00:00 +123-00 +00 12:00:00.000000 12-APR-2023 12:00 12-APR-2023 12:00 +00 12:35:00.000000 These functions make it easy to find the upper and lower bounds for date and time values for a specified unit. Availability: All Offerings CEIL, FLOOR, ROUND, and TRUNC Date Functions Documentation","title":"CEIL, FLOOR, and ROUND for datetime data types","component":"guide","version":"latest","name":"ceil-floor-round-for-datetime-types","url":"/guide/latest/versions/23.2/features/ceil-floor-round-for-datetime-types.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"114":{"id":114,"text":"Version 23.2 Categories SQL You can specify a default value when updating a column to NULL. The database assigns the default value to the column instead of NULL. create table default_values ( id integer, c1 number default extract ( second from systimestamp ), c2 number default on null extract ( second from systimestamp ), c3 number default on null for insert only extract ( second from systimestamp ), c4 number default on null for insert and update extract ( second from systimestamp ) ); -- For the columns with DEFAULT ON NULL, the database replaces NULL with the timestamp value insert into default_values values ( 1, null, null, null, null ); select * from default_values; -- The standard DEFAULT clause has no impact on UPDATEs, so C1 remains NULL update default_values set c1 = null; -- DEFAULT ON NULL adds an implicit NOT NULL constraint to the column -- The default only applies on insert, so this raises an ORA-01407 error update default_values set c2 = null; -- DEFAULT ON NULL FOR INSERT ONLY is equivalent to DEFAULT ON NULL -- So this also raises an ORA-01407 error update default_values set c3 = null; -- C4 is DEFAULT ON NULL FOR INSERT AND UPDATE -- So the database replaces NULL with its default value update default_values set c4 = null; -- The value of C4 has changed; all other columns retain their INSERT value select * from default_values; Result SQL> create table default_values ( 2 id integer, 3 c1 number default extract ( second from systimestamp ), 4 c2 number default on null extract ( second from systimestamp ), 5 c3 number default on null for insert only extract ( second from systimestamp ), 6 c4 number default on null for insert and update extract ( second from systimestamp ) 7 ); Table created. SQL> SQL> -- For the columns with DEFAULT ON NULL, the database replaces NULL with the timestamp value SQL> insert into default_values 2 values ( 1, null, null, null, null ); 1 row created. SQL> SQL> select * from default_values; ID C1 C2 C3 C4 ---------- ---------- ---------- ---------- ---------- 1 1.585189 1.585189 1.585189 SQL> SQL> -- The standard DEFAULT clause has no impact on UPDATEs, so C1 remains NULL SQL> update default_values 2 set c1 = null; 1 row updated. SQL> SQL> -- DEFAULT ON NULL adds an implicit NOT NULL constraint to the column SQL> -- The default only applies on insert, so this raises an ORA-01407 error SQL> update default_values 2 set c2 = null; set c2 = null * ERROR at line 2: ORA-01407: cannot update (\"CHRIS\".\"DEFAULT_VALUES\".\"C2\") to NULL SQL> SQL> -- DEFAULT ON NULL FOR INSERT ONLY is equivalent to DEFAULT ON NULL SQL> -- So this also raises an ORA-01407 error SQL> update default_values 2 set c3 = null; set c3 = null * ERROR at line 2: ORA-01407: cannot update (\"CHRIS\".\"DEFAULT_VALUES\".\"C3\") to NULL SQL> SQL> -- C4 is DEFAULT ON NULL FOR INSERT AND UPDATE SQL> -- So the database replaces NULL with its default value SQL> update default_values 2 set c4 = null; 1 row updated. SQL> SQL> -- The value of C4 has changed; all other columns retain their INSERT value SQL> select * from default_values; ID C1 C2 C3 C4 ---------- ---------- ---------- ---------- ---------- 1 1.585189 1.585189 1.608401 Providing a default value for NULL on UPDATE simplifies code to map NULL to a non NULL value when changing data. Availability: All Offerings CREATE TABLE Documentation","title":"Default ON NULL for UPDATE statements","component":"guide","version":"latest","name":"default-on-null-update","url":"/guide/latest/versions/23.2/features/default-on-null-update.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"115":{"id":115,"text":"Version 23.2 Categories PL/SQL The CASE statement is extended in PL/SQL to be consistent with the updated definitions of CASE expressions and CASE statements in the SQL:2003 Standard [ISO03a, ISO03b]. At the time of writing there is no SQL equivalent of the extended PL/SQL CASE statement. begin -- example 01: assign grades to result percentages for inx in -1, 19, 50, 75, 99, null loop dbms_output.put_line ( nvl ( to_char ( inx ), 'null' ) || ' = ' || case inx when 100 then 'invalid result' when is null then 'no result' when between 90 and 100 then 'A' when >= 80 then 'B' when >= 70 then 'C' when >= 60 then 'D' when >= 50 then 'E' else 'fail' end ); end loop; end; / Result SQL> begin 2 -- example 01: assign grades to result percentages 3 for inx in -1, 19, 50, 75, 99, null loop 4 dbms_output.put_line ( 5 nvl ( to_char ( inx ), 'null' ) || ' = ' || 6 case inx 7 when 100 then 'invalid result' 8 when is null then 'no result' 9 when between 90 and 100 then 'A' 10 when >= 80 then 'B' 11 when >= 70 then 'C' 12 when >= 60 then 'D' 13 when >= 50 then 'E' 14 else 'fail' 15 end 16 ); 17 end loop; 18 end; 19 / -1 = invalid result 19 = fail 50 = E 75 = C 99 = A null = no result PL/SQL procedure successfully completed. Dangling predicates allow tests other than equality to be performed in simple CASE operations. Multiple choices in WHEN clauses allow CASE operations in PL/SQL to be written with less duplicated code. Availability: All Offerings Database PL/SQL Language Reference","title":"Extended CASE Controls","component":"guide","version":"latest","name":"extended-case-controls","url":"/guide/latest/versions/23.2/features/extended-case-controls.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"116":{"id":116,"text":"Version 23.2 Categories SQL The FUZZY_MATCH operator enables you to compare strings for similarity using algorithms such as Jaro-Winkler and Levenshtein distance. /* Compare the team names to \"Champions City\" with the different fuzzy matching algorithms */ with teams as ( select * from ( values ( 'Champions United' ), ( 'Runner-up City' ), ( 'Midtable Town' ), ( 'Underdogs United' ), ( 'Upstart FC' ), ( 'Relegated Athletic' ) ) t ( team_name ) ), match_value as ( select 'Champions City' match_team ) select team_name, match_team, fuzzy_match ( levenshtein, team_name, match_team ) as levenshtein, fuzzy_match ( jaro_winkler, team_name, match_team ) as jaro_winkler, fuzzy_match ( bigram, team_name, match_team ) as bigram, fuzzy_match ( trigram, team_name, match_team ) as trigram, fuzzy_match ( whole_word_match, team_name, match_team ) as wwm, fuzzy_match ( longest_common_substring, team_name, match_team ) as lcs from teams cross join match_value; /* Find the team names that match \"Champions City\" with Jaro-Winkler score > 90 */ with teams as ( select * from ( values ( 'Champions United' ), ( 'Runner-up City' ), ( 'Midtable Town' ), ( 'Underdogs United' ), ( 'Upstart FC' ), ( 'Relegated Athletic' ) ) t ( team_name ) ), match_value as ( select 'Champions City' match_team ) select team_name, match_team from teams join match_value on fuzzy_match ( jaro_winkler, team_name, match_team ) > 90; Result SQL> /* Compare the team names to \"Champions City\" for the different fuzzy matching algorithms */ SQL> with teams as ( 2 select * from ( 3 values ( 'Champions United' ), 4 ( 'Runner-up City' ), 5 ( 'Midtable Town' ), 6 ( 'Underdogs United' ), 7 ( 'Upstart FC' ), 8 ( 'Relegated Athletic' ) 9 ) t ( team_name ) 10 ), match_value as ( 11 select 'Champions City' match_team 12 ) 13 select team_name, match_team, 14 fuzzy_match ( levenshtein, team_name, match_team ) as levenshtein, 15 fuzzy_match ( jaro_winkler, team_name, match_team ) as jaro_winkler, 16 fuzzy_match ( bigram, team_name, match_team ) as bigram, 17 fuzzy_match ( trigram, team_name, match_team ) as trigram, 18 fuzzy_match ( whole_word_match, team_name, match_team ) as wwm, 19 fuzzy_match ( longest_common_substring, team_name, match_team ) as lcs 20 from teams 21 cross join match_value; TEAM_NAME MATCH_TEAM LEVENSHTEIN JARO_WINKLER BIGRAM TRIGRAM WWM LCS ------------------ -------------- ----------- ------------ ---------- ---------- ---------- ---------- Champions United Champions City 75 92 66 57 50 62 Runner-up City Champions City 36 57 30 25 50 35 Midtable Town Champions City 8 44 0 0 0 7 Underdogs United Champions City 32 49 13 0 0 12 Upstart FC Champions City 8 56 0 0 0 7 Relegated Athletic Champions City 12 41 0 0 0 5 6 rows selected. SQL> SQL> /* Find the team names that match \"Champions City\" with Jaro-Winkler score > 90 */ SQL> with teams as ( 2 select * from ( 3 values ( 'Champions United' ), 4 ( 'Runner-up City' ), 5 ( 'Midtable Town' ), 6 ( 'Underdogs United' ), 7 ( 'Upstart FC' ), 8 ( 'Relegated Athletic' ) 9 ) t ( team_name ) 10 ), match_value as ( 11 select 'Champions City' match_team 12 ) 13 select team_name, match_team 14 from teams 15 join match_value 16 on fuzzy_match ( jaro_winkler, team_name, match_team ) > 90; TEAM_NAME MATCH_TEAM ------------------ -------------- Champions United Champions City This operator makes it easier to find similar strings with SQL. Availability: All Offerings FUZZY_MATCH Documentation","title":"FUZZY_MATCH operator","component":"guide","version":"latest","name":"fuzzy-match-operator","url":"/guide/latest/versions/23.2/features/fuzzy-match-operator.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"117":{"id":117,"text":"Version 23.2 Categories SQL The GROUP BY column alias feature is a shorthand for not having to repeat lengthy expressions from the SELECT clause in the GROUP BY and/or HAVING clause but instead use the defined column alias. The GROUP BY position feature is a similar shorthand and great for ad-hoc queries by simply referring to the expression position in the SELECT clause. Caution is required when using this feature, however, as it can lead novices to wrong conclusions and unexpected results as they may be surprised by or not aware of that data is being grouped differently when the position of the expression in the SELECT clause changes. This is particularly important for GROUP BY ROLLUP() and other super-aggregate grouping functions, hence this functionality is guarded behind a session parameter group_by_position_enabled. Note the GROUP BY combined_name which refers to a column alias in the SELECT. SELECT CONCAT(r.name, ': ', co.name) AS combined_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY combined_name ORDER BY combined_name; Result SQL> SELECT CONCAT(r.name, ': ', co.name) AS combined_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY combined_name ORDER BY combined_name; COMBINED_NAME POPULATION_M ------------------------------ ------------ Oceania: Australia 23.47 Oceania: Fiji .926 Oceania: Kiribati .109 Oceania: Marshall Islands .076 Oceania: Micronesia .104 Oceania: Nauru .01 Oceania: New Zealand 4.546 Oceania: Palau .022 Oceania: Papua New Guinea 7.027 Oceania: Samoa .201 Oceania: Solomon Islands .66 Oceania: Tonga .106 Oceania: Tuvalu .011 Oceania: Vanuatu .288 South America: Argentina 44.694 South America: Bolivia 11.306 South America: Brazil 208.847 South America: Chile 17.925 South America: Colombia 48.169 South America: Ecuador 16.291 South America: Guyana .741 South America: Paraguay 7.026 South America: Peru 31.331 South America: Suriname .598 South America: Uruguay 3.369 South America: Venezuela 31.689 26 rows selected. Note the GROUP BY ROLLUP (1, 2) which refers to the first and second column in the SELECT. -- Enable the GROUP_BY_POSITION parameter for the session ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; SELECT r.name AS region_name, co.name AS country_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; Result SQL> -- Enable the GROUP_BY_POSITION parameter for the session SQL> ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; Session altered. SQL> SELECT r.name AS region_name, co.name AS country_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; REGION_NAME COUNTRY_NAME POPULATION_M ------------- ---------------- ------------ Oceania Australia 23.47 Oceania Fiji .926 Oceania Kiribati .109 Oceania Marshall Islands .076 Oceania Micronesia .104 Oceania Nauru .01 Oceania New Zealand 4.546 Oceania Palau .022 Oceania Papua New Guinea 7.027 Oceania Samoa .201 Oceania Solomon Islands .66 Oceania Tonga .106 Oceania Tuvalu .011 Oceania Vanuatu .288 Oceania 37.556 South America Argentina 44.694 South America Bolivia 11.306 South America Brazil 208.847 South America Chile 17.925 South America Colombia 48.169 South America Ecuador 16.291 South America Guyana .741 South America Paraguay 7.026 South America Peru 31.331 South America Suriname .598 South America Uruguay 3.369 South America Venezuela 31.689 South America 421.986 459.542 29 rows selected. Let’s assume that the report was supposed to list countries first and the region next to it instead of the current region first and the country next to it. If you change the columns in the SELECT but forget to amend the GROUP BY ROLLUP clause as well, because you are grouping by column position in the SELECT list, your results will be grouped differently and be no longer be the same. -- Enable the GROUP_BY_POSITION parameter for the session (only needed once per session) ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; Result SQL> -- Enable the GROUP_BY_POSITION parameter for the session (only needed once per session) SQL> ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; Session altered. SQL> SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; COUNTRY_NAME REGION_NAME POPULATION_M ---------------- ------------- ------------ Samoa Oceania .201 Fiji Oceania .926 Micronesia Oceania .104 Kiribati Oceania .109 Marshall Islands Oceania .076 Nauru Oceania .01 New Zealand Oceania 4.546 Papua New Guinea Oceania 7.027 Palau Oceania .022 Solomon Islands Oceania .66 Tonga Oceania .106 Tuvalu Oceania .011 Australia Oceania 23.47 Vanuatu Oceania .288 Argentina South America 44.694 Bolivia South America 11.306 Brazil South America 208.847 Chile South America 17.925 Colombia South America 48.169 Venezuela South America 31.689 Guyana South America .741 Peru South America 31.331 Paraguay South America 7.026 Suriname South America .598 Uruguay South America 3.369 Ecuador South America 16.291 Venezuela 31.689 Uruguay 3.369 Suriname .598 Paraguay 7.026 Peru 31.331 Guyana .741 Ecuador 16.291 Colombia 48.169 Chile 17.925 Brazil 208.847 Bolivia 11.306 Argentina 44.694 Samoa .201 Vanuatu .288 Tuvalu .011 Tonga .106 Solomon Islands .66 Palau .022 Papua New Guinea 7.027 New Zealand 4.546 Nauru .01 Marshall Islands .076 Kiribati .109 Micronesia .104 Fiji .926 459.542 Australia 23.47 53 rows selected. In comparison, this does not happen when using the column alias: SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (region_name, country_name) ORDER BY region_name; Result SQL> SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (region_name, country_name) ORDER BY region_name; COUNTRY_NAME REGION_NAME POPULATION_M ---------------- ------------- ------------ Australia Oceania 23.47 Fiji Oceania .926 Kiribati Oceania .109 Marshall Islands Oceania .076 Micronesia Oceania .104 Nauru Oceania .01 New Zealand Oceania 4.546 Palau Oceania .022 Papua New Guinea Oceania 7.027 Samoa Oceania .201 Solomon Islands Oceania .66 Tonga Oceania .106 Tuvalu Oceania .011 Vanuatu Oceania .288 Oceania 37.556 Argentina South America 44.694 Bolivia South America 11.306 Brazil South America 208.847 Chile South America 17.925 Colombia South America 48.169 Ecuador South America 16.291 Guyana South America .741 Paraguay South America 7.026 Peru South America 31.331 Suriname South America .598 Uruguay South America 3.369 Venezuela South America 31.689 South America 421.986 459.542 29 rows selected. GROUP BY column alias and position are both convenient shorthands for writing concise ad-hoc SQL statements. Extra caution should be given when using GROUP BY column position as changing the column position in the SELECT part can have direct influence over the grouping of the data. Availability: All Offerings Documentation","title":"GROUP BY column alias or position","component":"guide","version":"latest","name":"group-by-alias-position","url":"/guide/latest/versions/23.2/features/group-by-alias-position.html","titles":[{"text":"GROUP BY column alias","hash":"_group_by_column_alias","id":1},{"text":"GROUP BY column position","hash":"_group_by_column_position","id":2},{"text":"Caution","hash":"_caution","id":3},{"text":"Benefits","hash":"_benefits","id":4},{"text":"Further information","hash":"_further_information","id":5}]},"118":{"id":118,"text":"Version 23.2 Categories SQL The IF [NOT] EXISTS syntax can be used to ignore errors when dropping objects that do not exist or create objects that already exist. Objects can now be dropped via DROP IF EXISTS Objects can now be created via CREATE IF NOT EXISTS -- Drop table if left over from a previous incomplete test run -- (this will produce an error) DROP TABLE my_test; -- Recreate the table in a clean state CREATE TABLE my_test ( id NUMBER NOT NULL PRIMARY KEY, name VARCHAR2(255), created_tms DATE DEFAULT SYSDATE NOT NULL ); -- Execute INSERT INTO tests for default value INSERT INTO my_test (id, name) VALUES (1, 'Test'); -- Clean up test DROP TABLE my_test; -- -- Second test run -- -- Drop table if left over from a previous incomplete test run -- (the table has already been dropped in a previous test run, -- however, due to using IF EXISTS, no error will be raised) DROP TABLE IF EXISTS my_test; -- Recreate the table in a clean state CREATE TABLE my_test ( id NUMBER NOT NULL PRIMARY KEY, name VARCHAR2(255), created_tms DATE DEFAULT SYSDATE NOT NULL ); -- Execute INSERT INTO tests for default value of `created_tms` INSERT INTO my_test (id, name) VALUES (1, 'Test'); -- Clean up test DROP TABLE my_test; Result SQL> -- Drop table if left over from a previous incomplete test run SQL> -- (this will produce an error) SQL> DROP TABLE my_test; Error starting at line : 1 in command - DROP TABLE my_test Error report - ORA-00942: table or view does not exist SQL> SQL> -- Recreate the table in a clean state SQL> CREATE TABLE my_test 2 ( 3 id NUMBER NOT NULL PRIMARY KEY, 4 name VARCHAR2(255), 5 created_tms DATE DEFAULT SYSDATE NOT NULL 6 ); Table MY_TEST created. SQL> SQL> -- Execute INSERT INTO tests for default value of `created_tms` SQL> INSERT INTO my_test (id, name) VALUES (1, 'Test'); 1 row inserted. SQL> SQL> -- Clean up test SQL> DROP TABLE my_test; Table MY_TEST dropped. SQL> SQL> -- 2* -- Second test run SQL> -- 2* SQL> -- Drop table if left over from a previous incomplete test run SQL> -- (the table has already been dropped in a previous test run, SQL> -- however, due to using IF EXISTS, no error will be raised) SQL> DROP TABLE IF EXISTS my_test; Table MY_TEST dropped. SQL> SQL> -- Recreate the table in a clean state SQL> CREATE TABLE my_test 2 ( 3 id NUMBER NOT NULL PRIMARY KEY, 4 name VARCHAR2(255), 5 created_tms DATE DEFAULT SYSDATE NOT NULL 6 ); Table MY_TEST created. SQL> SQL> -- Execute INSERT INTO tests for default value SQL> INSERT INTO my_test (id, name) VALUES (1, 'Test'); 1 row inserted. SQL> SQL> -- Clean up test SQL> DROP TABLE my_test; Table MY_TEST dropped. Ignoring the error when dropping a non existing object or creating an object that already exists can be very useful especially in testing scripts that always want to ensure a clean state at the beginning of tests but not produce false positives by e.g. receiving an error when dropping an object that does not exist. Availability: All Offerings DROP TABLE documentation","title":"IF [NOT] EXISTS","component":"guide","version":"latest","name":"if-not-exists","url":"/guide/latest/versions/23.2/features/if-not-exists.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"119":{"id":119,"text":"Version 23.2 Categories JavaScript Inlined JavaScript procedures allow you to embed JavaScript code directly in the CREATE FUNCTION and CREATE PROCEDURE statements without the need of creating a module first. If you want to implement a less complex JavaScript feature quickly, inlined procedures and functions are a good choice. The following example coverts seconds-since-epoch to an Oracle Date. create or replace function epoch_to_Date ( P_EPOCH number ) return date as mle language javascript q'~ let d = new Date(0); d.setUTCSeconds(P_EPOCH); return d; ~'; / select to_char( epoch_to_date(1684758614), 'yyyy-mm-dd hh24:mi:ss' ) the_date; Result SQL> create or replace function epoch_to_date ( 2 P_EPOCH number 3 ) return date 4 as mle language javascript 5 q'~ 6 let d = new Date(0); 7 d.setUTCSeconds(P_EPOCH); 8 9 return d; 10 ~'; 11 / Function created. SQL> SQL> select 2 to_char( 3 epoch_to_date(1684758614), 4 'yyyy-mm-dd hh24:mi:ss' 5 ) the_date; THE_DATE ------------------- 2023-05-22 12:30:14 Inline JavaScript functions and procedures are a convenient way of exposing functionality in JavaScript to SQL and PL/SQL. You aren’t limited to using built-in JavaScript objects, you are free to perform any manipulation you like. If more complex processing, including importing 3rd party JavaScript modules is required you should use modules and environments instead. Availability: All Offerings Documentation","title":"Inline JavaScript Procedures","component":"guide","version":"latest","name":"inline-javascript","url":"/guide/latest/versions/23.2/features/inline-javascript.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"120":{"id":120,"text":"Version 23.2 Categories JavaScript Writing JavaScript modules and environments are the first steps towards the creation of your application. Once the JavaScript code is ready you can expose it to SQL and PL/SQL thanks to a so-called call specification. A JavaScript call specification consists of the following: the module name an (optional) reference to a environment the (simplified) JavaScript function’s signature as per the module code All client code, regardless whether it’s written in Java, Python, or even with node-oracledb, can access JavaScript stored procedures in the database. The following example demonstrates The creation of a JavaScript module (hello_module) in the current user’s schema featuring a single function named hello() The addition of a call specification f_hello() exposing the JavaScript function to SQL and PL/SQL A sample invocation of the previously defined function create or replace mle module hello_module language javascript as // JavaScript code to follow from here /** * return a friendly greeting * @param {string} who - who should be greeted? * @returns {string} */ export function hello(who) { return 'hello ' + who; } / create or replace function f_hello( p_who varchar2) return varchar2 as mle module hello_module signature 'hello'; / select f_hello('JavaScript'); Result SQL> create or replace mle module hello_module 2 language javascript as 3 4 export function hello(who) { 5 6 return 'hello ' + who; 7 } 8 / MLE module created. SQL> create or replace function f_hello( 2 p_who varchar2) 3 return varchar2 4 as mle module hello_module 5 signature 'hello'; 6 / Function created. SQL> select 2 hello('JavaScript'); HELLO('JAVASCRIPT') ------------------------------------------------------------------------------- hello JavaScript JavaScript Call Specifications expose JavaScript code to SQL and PL/SQL allowing any programming language with a SQL driver to make use of it. In addition to standalone functions and procedures packages can be used to create a container for call specifications originating from the same JavaScript module. Availability: All Offerings Documentation Example Introductory Blog Post","title":"JavaScript Call Specifications","component":"guide","version":"latest","name":"javascript-call-specifications","url":"/guide/latest/versions/23.2/features/javascript-call-specifications.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"121":{"id":121,"text":"Version 23.2 Categories JavaScript JavaScript Environments, just like JavaScript modules, are schema objects persisted in the database. They perform a vital function in applications involving multiple JavaScript modules. Unlike node.js or deno projects JavaScript modules aren’t persisted on the file system, they are stored in the database. Developers cannot simply import modules based on their location in the file system, they need to use environments instead. The following example demonstrates the use of environments. create or replace MLE module module_one language javascript as // this function is exported and will be called by // module_2's greeting() function export function hello(who) { return 'hello ' + who; } / create or replace MLE module module_two language javascript as // before module_1's hello() function can be imported a // so-called import name must be defined by means of creating // a JavaScript environment. The module name does not have to // match the import name import { hello } from 'module1' export function greeting() { const who = 'JavaScript'; return hello(who); } / // the mapping between import name and module name is defined // in an environment create or replace mle env example_env imports ( 'module1' module module_one ); // with the module in place it is possible to invoke module_2's // greeting function. Refer to the section about call specifications // for more details about invoking JavaScript code in SQL and PL/SQL create or replace function f_greeting return varchar2 as mle module module_two env example_env signature 'greeting'; / select f_greeting; Result SQL> create or replace MLE module module_one 2 language javascript as 3 4 // this function is exported and will be called by 5 // module_2's greeting() function 6 export function hello(who) { 7 8 return 'hello ' + who; 9 } 10 / MLE module created. SQL> create or replace MLE module module_two 2 language javascript as 3 4 // before module_1's hello() function can be imported a 5 // so-called import name must be defined by means of creating 6 // a JavaScript environment. The module name does not have to 7 // match the import name 8 import { hello } from 'module1' 9 10 export function greeting() { 11 12 const who = 'JavaScript'; 13 return hello(who); 14 } 15 / MLE module created. SQL> -- the mapping between import name and module name is defined SQL> -- in an environment SQL> create or replace mle env example_env 2 imports ( 3 'module1' module module_one 4 ); MLE env created. SQL> -- with the module in place it is possible to invoke module_2's SQL> -- greeting function. Refer to the section about call specifications SQL> -- for more details about invoking JavaScript code in SQL and PL/SQL SQL> create or replace function f_greeting 2 return varchar2 as 3 mle module module_two 4 env example_env 5 signature 'greeting'; 6 / Function created. SQL> -- call the function SQL> select 2 f_greeting; F_GREETING ------------------------------------------------------------------------------- hello JavaScript JavaScript Environments play a crucial role during the development of JavaScript stored procedures. They are most useful providing means to map an import name as used in a JavaScript module to the actual module itself. Furthermore they are essential entities for the definition of call specifications. Availability: All Offerings Documentation Blog post","title":"JavaScript Environments","component":"guide","version":"latest","name":"javascript-environments","url":"/guide/latest/versions/23.2/features/javascript-environments.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"122":{"id":122,"text":"Version 23.2 Categories JavaScript A JavaScript module is the equivalent of an ECMAScript module commonly found in node.js and deno projects, but instead of storing it in a file in a file system it is persisted as a schema object in the database. JavaScript modules can either be provided by the community, or they can consist of specific, custom application code. JavaScript modules can reference functionality from other JavaScript modules allowing you to build complex applications that are easier to maintain. Just as Java stored procedures JavaScript code can be made available to SQL and PL/SQL by means of a call specification. The following example demonstrates the creation of a JavaScript module with the code provided inline with the module definition. create or replace mle module example_module language javascript as // this is where the JavaScript code section begins /** * convert a delimited string into key-value pairs and return JSON * @param {string} inputString - the input string to be converted * @returns {JSON} */ function string2obj(inputString) { if ( inputString === undefined ) { throw `string must comply with a form of key1=value1;...;keyN=valueN`; } let myObject = {}; if ( inputString.length === 0 ) { return myObject; } const kvPairs = inputString.split(\";\"); kvPairs.forEach( pair => { const tuple = pair.split(\"=\"); if ( tuple.length === 1 ) { tuple[1] = false; } else if ( tuple.length != 2 ) { throw \"parse error: you need to use exactly one '=' between \" + \"key and value and not use '=' in either key or value\"; } myObject[tuple[0]] = tuple[1]; }); return myObject; } /** * convert a JavaScript object to a string * @param {object} inputObject - the object to transform to a string * @returns {string} */ function obj2String(inputObject) { if ( typeof inputObject != 'object' ) { throw \"inputObject isn't an object\"; } return JSON.stringify(inputObject); } export { string2obj, obj2String } / Result When executing the above statement in sqlplus or sqlcl you will get a message that the MLE module has been successfully created. Verify the module has been created as follows: select module_name, language_name from user_mle_modules where module_name = 'EXAMPLE_MODULE' MODULE_NAME LANGUAGE_NAME ------------------------------ ------------------------------ EXAMPLE_MODULE JAVASCRIPT You can also view the source code of the JavaScript module: select text from user_source where name = 'EXAMPLE_MODULE' order by line; TEXT -------------------------------------------------------------------------------- // this is where the JavaScript code section begins /** * convert a delimited string into key-value pairs and return JSON * @param {string} inputString - the input string to be converted * @returns {JSON} */ function string2obj(inputString) { if ( inputString === undefined ) { throw `string must comply with a form of key1=value1;...;keyN=valueN`; } let myObject = {}; if ( inputString.length === 0 ) { return myObject; } const kvPairs = inputString.split(\";\"); kvPairs.forEach( pair => { const tuple = pair.split(\"=\"); if ( tuple.length === 1 ) { tuple[1] = false; } else if ( tuple.length != 2 ) { throw \"parse error: you need to use exactly one '=' between \" + \"key and value and not use '=' in either key or value\"; } myObject[tuple[0]] = tuple[1]; }); return myObject; } /** * convert a JavaScript object to a string * @param {object} inputObject - the object to transform to a string * @returns {string} */ function obj2String(inputObject) { if ( typeof inputObject != 'object' ) { throw \"inputObject isn't an object\"; } return JSON.stringify(inputObject); } export { string2obj, obj2String } Storing processing logic inside the database rather than in the middle-tier provides numerous advantages especially when it comes to latency, security, auditing, data integrity, and many more. It also helps developers realise the complete database feature set. Availability: All Offerings Documentation Example Feature Introduction","title":"JavaScript Modules","component":"guide","version":"latest","name":"javascript-modules","url":"/guide/latest/versions/23.2/features/javascript-modules.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"123":{"id":123,"text":"Version 23.2 Categories PL/SQL The JSON constructor can now accept a PL/SQL array or record type and return a JSON object or array populated with the aggregate type data. Conversely, the built-in function json_value now supports PL/SQL array and record types in the RETURNING clause, mapping from JSON to the specified aggregate type. declare type money_rec is record ( currency_code char(3), amount number ); type country_price_arr is table of money_rec index by varchar2(2); country_prices country_price_arr; price_json json; begin country_prices := country_price_arr ( 'US' => money_rec ( 'USD', 9.99 ), 'GB' => money_rec ( 'GBP', 8.99 ), 'DE' => money_rec ( 'EUR', 8.99 ), 'IN' => money_rec ( 'INR', 849 ) ); /* Automatically convert PL/SQL types to JSON by passing to JSON constructor */ price_json := json ( country_prices ); dbms_output.put_line ( json_serialize ( price_json returning clob pretty ) ); for country, price in pairs of /* Convert JSON to PL/SQL types with JSON_value */ json_value ( price_json, '$' returning country_price_arr ) loop dbms_output.put_line ( country || ' = ' || price.currency_code || to_char ( price.amount, '990.00' ) ); end loop; end; / Result SQL> declare 2 type money_rec is record ( 3 currency_code char(3), 4 amount number 5 ); 6 7 type country_price_arr is table of money_rec 8 index by varchar2(2); 9 10 country_prices country_price_arr; 11 price_json json; 12 begin 13 country_prices := country_price_arr ( 14 'US' => money_rec ( 'USD', 9.99 ), 15 'GB' => money_rec ( 'GBP', 8.99 ), 16 'DE' => money_rec ( 'EUR', 8.99 ), 17 'IN' => money_rec ( 'INR', 849 ) 18 ); 19 20 /* Automatically convert PL/SQL types to JSON by passing to JSON constructor */ 21 price_json := json ( country_prices ); 22 23 dbms_output.put_line ( json_serialize ( price_json returning clob pretty ) ); 24 25 for country, price in pairs of 26 /* Convert JSON to PL/SQL types with JSON_value */ 27 json_value ( price_json, '$' returning country_price_arr ) 28 loop 29 dbms_output.put_line ( 30 country || ' = ' || price.currency_code || to_char ( price.amount, '990.00' ) 31 ); 32 end loop; 33 end; 34 / { \"DE\" : { \"CURRENCY_CODE\" : \"EUR\", \"AMOUNT\" : 8.99 }, \"GB\" : { \"CURRENCY_CODE\" : \"GBP\", \"AMOUNT\" : 8.99 }, \"IN\" : { \"CURRENCY_CODE\" : \"INR\", \"AMOUNT\" : 849 }, \"US\" : { \"CURRENCY_CODE\" : \"USD\", \"AMOUNT\" : 9.99 } } DE = EUR 8.99 GB = GBP 8.99 IN = INR 849.00 US = USD 9.99 PL/SQL to JSON type mappings enables you to convert JSON to PL/SQL types and back using built-in functions. Availability: All Offerings PL/SQL and JSON Type Conversions Documentation","title":"PL/SQL and JSON type conversions","component":"guide","version":"latest","name":"json-plsql-type-conversions","url":"/guide/latest/versions/23.2/features/json-plsql-type-conversions.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"124":{"id":124,"text":"Version 23.2 Categories SQL JSON offers the flexibility of schemaless application design. Sometimes however, you might want some JSON data to conform to a schema. You might want to ensure that all data stored in a given column has the structure defined by a schema, or you might want to check whether a given JSON document has such a structure, before processing it. A JSON schema is a JSON document that respects the JSON Schema standard, which is a Request For Comments (RFC) draft. JSON schemas are in turn used to validate other JSON documents. Refer to the JSON schema website for more details. A JSON schema specifies the structure and the types of allowed values of JSON data that it considers valid. This example demonstrates how to query data in a relational table containing a JSON column and match it against a JSON schema. The following JSON schema ensures that only objects can be stored in the JSON column, containing both a firstName and lastName field with a minimum length of 1 character each. The numeric salary field is optional, however if defined, the salary must be greater than 10000. { \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"lastName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\", \"lastName\" ] } CREATE TABLE json_demo( id NUMBER GENERATED ALWAYS AS IDENTITY, CONSTRAINT pk_json_demo PRIMARY KEY(id), jcol JSON NOT NULL ); -- will result in an error: salary too low INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\", \"salary\": 9999 }') ); -- will result in an error: required lastName not present INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"salary\": 10001 }') ); -- will result in an error: lastName not spelled correctly INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"last_name\": \"King\", \"salary\": 10001 }') ); -- this record is fine INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\" }') ); -- fetch valid data SELECT jcol FROM json_demo WHERE jcol IS JSON VALIDATE '{ \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"lastName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\", \"lastName\" ] }'; Result SQL> CREATE TABLE json_demo( 2 id NUMBER 3 GENERATED ALWAYS AS IDENTITY, 4 CONSTRAINT pk_json_demo PRIMARY KEY(id), 5 jcol JSON NOT NULL 6 ); Table JSON_DEMO created. SQL> -- will result in an error: salary too low SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\", \"salary\": 9999 }') 5 ); 1 row inserted. SQL> -- will result in an error: required lastName not present SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"salary\": 10001 }') 5 ); 1 row inserted. SQL> -- will result in an error: lastName not spelled correctly SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"last_name\": \"King\", \"salary\": 10001 }') 5 ); 1 row inserted. SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\" }') 5 ); 1 row inserted. SQL> -- fetch valid data SQL> SELECT 2 jcol 3 FROM 4 json_demo 5 WHERE 6 jcol IS JSON VALIDATE 7 '{ 8 \"type\": \"object\", 9 \"properties\": { 10 \"firstName\": { 11 \"type\": \"string\", 12 \"minLength\": 1 13 }, 14 \"lastName\": { 15 \"type\": \"string\", 16 \"minLength\": 1 17 }, 18 \"salary\": { 19 \"type\": \"number\", 20 \"minimum\": 10000 21 } 22 }, 23 \"required\": [ 24 \"firstName\", 25 \"lastName\" 26 ] 27 }'; JCOL ___________________________________________ {\"firstName\":\"Steven\",\"lastName\":\"King\"} JSON is a popular format for data exchange, however with flexibility comes the risk of working with incomplete or wrong records. JSON schema allows developers to ensure better data quality. Using the IS JSON VALIDATE clause allows developers to vet JSON data in a column using a JSON schema. The above SELECT statement is the perfect partner for an INSERT INTO table_name SELECT …​ IS JSON VALIDATE …​ Availability: All Offerings Documentation","title":"JSON Schema: validate rows in a table","component":"guide","version":"latest","name":"json-schema-validate-rows","url":"/guide/latest/versions/23.2/features/json-schema-validate-rows.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"125":{"id":125,"text":"Version 23.2 Categories SQL JSON offers the flexibility of schemaless application design. Sometimes however, you might want some JSON data to conform to a schema. You might want to ensure that all data stored in a given column has the structure defined by a schema, or you might want to check whether a given JSON document has such a structure, before processing it. A JSON schema is a JSON document that respects the JSON Schema standard, which is a Request For Comments (RFC) draft. JSON schemas are in turn used to validate other JSON documents. Refer to the JSON schema website for more details. A JSON schema specifies the structure and the types of allowed values of JSON data that it considers valid. This example demonstrates how to create a JSON schema validation report. The following JSON schema ensures that only objects can be stored in the JSON column, containing at least a firstName field with a minimum length of 1 character. The numeric salary field is optional, however if defined, the salary must be greater than 10000. { \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\" ] } -- note the absence of any schema validation rules in the -- create table statement CREATE TABLE json_demo( id NUMBER GENERATED ALWAYS AS IDENTITY, CONSTRAINT pk_json_demo PRIMARY KEY(id), jcol JSON ); -- insert a few rows into the table INSERT INTO json_demo ( jcol ) values ( JSON('{ \"contents\": \"does not match JSON schema\" }') ); INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Martin\" }' ) ); INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Tom\", \"salary\": 9999 }') ); INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Emily\", \"salary\": 15000 }') ); COMMIT; -- validate the contents of the table DECLARE l_JSON_schema JSON := JSON( '{ \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\" ] }' ); l_validation_report JSON; BEGIN FOR i IN (select id, jcol from json_demo) loop SELECT DBMS_JSON_SCHEMA.validate_report( json_data => i.jcol, json_schema => l_JSON_schema ) INTO l_validation_report FROM json_demo WHERE id = i.id; DBMS_OUTPUT.put_line('validating row with ID ' || i.id); DBMS_OUTPUT.put_line( json_serialize(l_validation_report pretty) ); END LOOP; END; / -- extracting portions of the error message WITH validation AS ( SELECT id, DBMS_JSON_SCHEMA.validate_report( json_data => jcol, json_schema => JSON( '{ \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\" ] }' ) ) AS report FROM json_demo ) SELECT json_serialize( v.report.errors[*].error pretty ) FROM validation v WHERE v.id = 1 / Result SQL> -- note the absence of any schema validation rules in the SQL> -- create table statement SQL> CREATE TABLE json_demo( 2 id NUMBER 3 GENERATED ALWAYS AS IDENTITY, 4 CONSTRAINT pk_json_demo PRIMARY KEY(id), 5 jcol JSON 6 ); Table created. SQL> SQL> -- insert a few rows into the table SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"contents\": \"does not match JSON schema\" }') 5 ); 1 row created. SQL> SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Martin\" }' ) 5 ); 1 row created. SQL> SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Tom\", \"salary\": 9999 }') 5 ); 1 row created. SQL> SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Emily\", \"salary\": 15000 }') 5 ); 1 row created. SQL> SQL> COMMIT; Commit complete. SQL> SQL> -- validate the contents of the table SQL> DECLARE 2 l_JSON_schema JSON := JSON( 3 '{ 4 \"type\": \"object\", 5 \"properties\": { 6 \"firstName\": { 7 \"type\": \"string\", 8 \"minLength\": 1 9 }, 10 \"salary\": { 11 \"type\": \"number\", 12 \"minimum\": 10000 13 } 14 }, 15 \"required\": [ 16 \"firstName\" 17 ] 18 }' 19 ); 20 l_validation_report JSON; 21 BEGIN 22 FOR i IN (select id, jcol from json_demo) loop 23 SELECT 24 DBMS_JSON_SCHEMA.validate_report( 25 json_data => i.jcol, 26 json_schema => l_JSON_schema 27 ) 28 INTO 29 l_validation_report 30 FROM 31 json_demo 32 WHERE 33 id = i.id; 34 DBMS_OUTPUT.put_line('validating row with ID ' || i.id); 35 DBMS_OUTPUT.put_line( 36 json_serialize(l_validation_report pretty) 37 ); 38 END LOOP; 39 END; 40 / validating row with ID 1 { \"valid\" : false, \"errors\" : [ { \"schemaPath\" : \"$\", \"instancePath\" : \"$\", \"code\" : \"JZN-00501\", \"error\" : \"JSON schema validation failed\" }, { \"schemaPath\" : \"$.required\", \"instancePath\" : \"$\", \"code\" : \"JZN-00515\", \"error\" : \"required properties not found: 'firstName'\" } ] } validating row with ID 2 { \"valid\" : true, \"errors\" : [ ] } validating row with ID 3 { \"valid\" : false, \"errors\" : [ { \"schemaPath\" : \"$\", \"instancePath\" : \"$\", \"code\" : \"JZN-00501\", \"error\" : \"JSON schema validation failed\" }, { \"schemaPath\" : \"$.properties\", \"instancePath\" : \"$\", \"code\" : \"JZN-00514\", \"error\" : \"invalid properties: 'salary'\" }, { \"schemaPath\" : \"$.properties.salary.minimum\", \"instancePath\" : \"$.salary\", \"code\" : \"JZN-00507\", \"error\" : \"value less than minimum value, actual: 9999, expected: 10000\" } ] } validating row with ID 4 { \"valid\" : true, \"errors\" : [ ] } PL/SQL procedure successfully completed. SQL> SQL> -- extracting portions of the error message SQL> WITH validation AS ( 2 SELECT 3 id, 4 DBMS_JSON_SCHEMA.validate_report( 5 json_data => jcol, 6 json_schema => JSON( 7 '{ 8 \"type\": \"object\", 9 \"properties\": { 10 \"firstName\": { 11 \"type\": \"string\", 12 \"minLength\": 1 13 }, 14 \"salary\": { 15 \"type\": \"number\", 16 \"minimum\": 10000 17 } 18 }, 19 \"required\": [ 20 \"firstName\" 21 ] 22 }' 23 ) 24 ) AS report 25 FROM 26 json_demo 27 ) 28 SELECT 29 json_serialize( 30 v.report.errors[*].error 31 pretty 32 ) errors 33 FROM 34 validation v 35 WHERE 36 v.id = 1 37 / ERRORS ----------------------------------------------------------------- [ \"JSON schema validation failed\", \"required properties not found: 'firstName'\" ] JSON is a popular format for data exchange, however with flexibility comes the risk of importing incomplete or otherwise incorrect records. JSON schema allows developers to ensure better data quality. Using validation reports contents of existing JSON columns can be checked against a schema. The validation function returns JSON, which can be parsed to only return specific parts of the validation report. Availability: All Offerings Documentation","title":"JSON Schema: check constraint","component":"guide","version":"latest","name":"json-schema-validation-report","url":"/guide/latest/versions/23.2/features/json-schema-validation-report.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"126":{"id":126,"text":"Version 23.2 Categories SQL The PHONIC_ENCODE operator indexes words according to their English pronunciation using the metaphone or double metaphone algorithms. /* Get the phonic encoding of the team names The third parameter is the number of characters in the encoded string */ with teams as ( select * from ( values ( 'Champions United' ), ( 'Runner-up City' ), ( 'Midtable Town' ), ( 'Underdogs United' ), ( 'Upstart FC' ), ( 'Relegated Athletic' ) ) t ( team_name ) ) select team_name, phonic_encode ( double_metaphone, team_name, 1 ) as team_name_dm1, phonic_encode ( double_metaphone_alt, team_name, 1 ) as team_name_dm1_alt, phonic_encode ( double_metaphone, team_name, 6 ) as team_name_dm6, phonic_encode ( double_metaphone_alt, team_name, 6 ) as team_name_dm6_alt, phonic_encode ( double_metaphone, team_name, 12 ) as team_name_dm12, phonic_encode ( double_metaphone_alt, team_name, 12 ) as team_name_dm12_alt from teams; Result SQL> /* Get the phonic encoding of the team names SQL> The third parameter is the number of characters in the encoded string */ SQL> with teams as ( 2 select * from ( 3 values ( 'Champions United' ), 4 ( 'Runner-up City' ), 5 ( 'Midtable Town' ), 6 ( 'Underdogs United' ), 7 ( 'Upstart FC' ), 8 ( 'Relegated Athletic' ) 9 ) t ( team_name ) 10 ) 11 select team_name, 12 phonic_encode ( double_metaphone, team_name, 1 ) as team_name_dm1, 13 phonic_encode ( double_metaphone_alt, team_name, 1 ) as team_name_dm1_alt, 14 phonic_encode ( double_metaphone, team_name, 6 ) as team_name_dm6, 15 phonic_encode ( double_metaphone_alt, team_name, 6 ) as team_name_dm6_alt, 16 phonic_encode ( double_metaphone, team_name, 12 ) as team_name_dm12, 17 phonic_encode ( double_metaphone_alt, team_name, 12 ) as team_name_dm12_alt 18 from teams; TEAM_NAME TEAM_NAME_DM1 TEAM_NAME_DM1_ALT TEAM_NAME_DM6 TEAM_NAME_DM6_ALT TEAM_NAME_DM12 TEAM_NAME_DM12_ALT ------------------ ------------------------- ------------------------- ------------------------- ------------------------- ------------------------- ------------------------- Champions United X X XMPNSN XMPNSN XMPNSNTT XMPNSNTT Runner-up City R R RNRPST RNRPST RNRPST RNRPST Midtable Town M M MTPLTN MTPLTN MTPLTN MTPLTN Underdogs United A A ANTRTK ANTRTK ANTRTKSNTT ANTRTKSNTT Upstart FC A A APSTRT APSTRT APSTRTFK APSTRTFK Relegated Athletic R R RLKTT0 RLKTTT RLKTT0LTK RLKTTTLTK 6 rows selected. The PHONIC_ENCODE operator enables you to run data quality queries, comparing text based on how it’s spoken. Availability: All Offerings PHONIC_ENCODE Documentation","title":"PHONIC_ENCODE operator","component":"guide","version":"latest","name":"phonic-encode-operator","url":"/guide/latest/versions/23.2/features/phonic-encode-operator.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"127":{"id":127,"text":"Version 23.2 Categories SQL The RETURNING INTO clause for INSERT, UPDATE, and DELETE statements are enhanced to report old and new values affected by the respective statement. This allows developers to use the same logic for each of these Data Manipulation Language (DML) types to obtain values pre- and post-statement execution. The following rules apply: UPDATE statements report old and new values. INSERT statements only report new values. DELETE statements only report old values. -- example 01: returning old and new values for a single-row update var l_old_salary number var l_new_salary number UPDATE employees SET salary = salary * 1.07 WHERE employee_id = 103 RETURNING old salary, new salary INTO :l_old_salary, :l_new_salary; SELECT :l_old_salary, :l_new_salary; ROLLBACK; -- example 02: returning old and new values for a multi-row update -- and storing the values in an audit table DROP TABLE IF EXISTS employees_history; CREATE TABLE employees_history ( employee_id NUMBER(6) NOT NULL, old_salary NUMBER(8, 2) NOT NULL, new_salary NUMBER(8, 2) NOT NULL, changed_on DATE NOT NULL ); DECLARE TYPE t_change_rec IS RECORD ( old_salary employees_history.old_salary%TYPE, new_salary employees_history.new_salary%TYPE, employee_id employees_history.employee_id%TYPE ); TYPE t_change_details IS TABLE OF t_change_rec; l_changes t_change_details; BEGIN UPDATE employees e SET salary = salary * 1.07 FROM departments d WHERE d.department_id = e.department_id AND d.department_name = 'IT' RETURNING OLD salary, NEW salary, employee_id BULK COLLECT INTO l_changes; FORALL i IN 1..l_changes.count INSERT INTO employees_history ( employee_id, old_salary, new_salary, changed_on ) VALUES ( l_changes(i).employee_id, l_changes(i).old_salary, l_changes(i).new_salary, sysdate ); END; / SELECT employee_id, old_salary, new_salary, changed_on FROM employees_history; ROLLBACK; -- example 03: no \"old\" value returned by INSERT statements DROP TABLE IF EXISTS insert_demo; CREATE TABLE insert_demo ( id NUMBER GENERATED ALWAYS AS IDENTITY, vc VARCHAR2(100) NOT NULL, d DATE DEFAULT sysdate NOT NULL, CONSTRAINT pk_insert_demo PRIMARY KEY ( id ) ) / var l_old_id number var l_new_id number INSERT INTO insert_demo ( vc ) VALUES ( 'insert demo' ) RETURNING old id, new id INTO :l_old_id, :l_new_id; SELECT :l_old_id, :l_new_id; -- example 04: no \"new\" value returning by DELETE statements DELETE insert_demo WHERE id = :l_new_id RETURNING old id, new id INTO :l_old_id, :l_new_id; SELECT :l_old_id, :l_new_id; ROLLBACK; Result SQL> -- example 01: returning old and new values for a single-row update SQL> var l_old_salary number SQL> var l_new_salary number SQL> UPDATE employees 2 SET 3 salary = salary * 1.07 4 WHERE 5 employee_id = 103 6 RETURNING 7 old salary, new salary 8 INTO 9 :l_old_salary, :l_new_salary; 1 row updated. SQL> SELECT 2 :l_old_salary, 3 :l_new_salary; :L_OLD_SALARY :L_NEW_SALARY ------------- ------------- 9000 9630 SQL> ROLLBACK; Rollback complete. SQL> -- example 02: returning old and new values for a multi-row update SQL> -- and storing the values in an audit table SQL> DROP TABLE IF EXISTS employees_history; Table dropped. SQL> CREATE TABLE employees_history ( 2 employee_id NUMBER(6) NOT NULL, 3 old_salary NUMBER(8, 2) NOT NULL, 4 new_salary NUMBER(8, 2) NOT NULL, 5 changed_on DATE NOT NULL 6 ); Table created. SQL> DECLARE 2 TYPE t_change_rec IS RECORD ( 3 old_salary employees_history.old_salary%TYPE, 4 new_salary employees_history.new_salary%TYPE, 5 employee_id employees_history.employee_id%TYPE 6 ); 7 TYPE t_change_details IS 8 TABLE OF t_change_rec; 9 l_changes t_change_details; 10 BEGIN 11 UPDATE employees e 12 SET 13 salary = salary * 1.07 14 FROM departments d 15 WHERE 16 d.department_id = e.department_id 17 AND d.department_name = 'IT' 18 RETURNING 19 OLD salary, NEW salary, employee_id 20 BULK COLLECT INTO 21 l_changes; 22 23 FORALL i IN 1..l_changes.count 24 INSERT INTO employees_history ( 25 employee_id, 26 old_salary, 27 new_salary, 28 changed_on 29 ) VALUES ( 30 l_changes(i).employee_id, 31 l_changes(i).old_salary, 32 l_changes(i).new_salary, 33 sysdate 34 ); 35 END; 36 / PL/SQL procedure successfully completed. SQL> SELECT 2 employee_id, 3 old_salary, 4 new_salary, 5 changed_on 6 FROM 7 employees_history; EMPLOYEE_ID OLD_SALARY NEW_SALARY CHANGED_O ----------- ---------- ---------- --------- 103 9000 9630 22-JUN-23 104 6000 6420 22-JUN-23 105 4800 5136 22-JUN-23 106 4800 5136 22-JUN-23 107 4200 4494 22-JUN-23 SQL> ROLLBACK; Rollback complete. SQL> -- example 03: no \"old\" value returned by INSERT statements SQL> DROP TABLE IF EXISTS insert_demo; Table dropped. SQL> CREATE TABLE insert_demo ( 2 id NUMBER 3 GENERATED ALWAYS AS IDENTITY, 4 vc VARCHAR2(100) NOT NULL, 5 d DATE DEFAULT sysdate NOT NULL, 6 CONSTRAINT pk_insert_demo PRIMARY KEY ( id ) 7 ) 8 / Table created. SQL> var l_old_id number SQL> var l_new_id number SQL> INSERT INTO insert_demo ( 2 vc 3 ) VALUES ( 4 'insert demo' 5 ) 6 RETURNING 7 old id, 8 new id 9 INTO 10 :l_old_id, 11 :l_new_id; 1 row created. SQL> SELECT 2 :l_old_id, 3 :l_new_id; :L_OLD_ID :L_NEW_ID ---------- ---------- 1 SQL> -- example 04: no \"new\" value returning by DELETE statements SQL> DELETE 2 insert_demo 3 WHERE 4 id = :l_new_id 5 RETURNING 6 old id, new id 7 INTO 8 :l_old_id, 9 :l_new_id; 1 row deleted. SQL> SELECT 2 :l_old_id, 3 :l_new_id; :L_OLD_ID :L_NEW_ID ---------- ---------- 1 SQL> ROLLBACK; Rollback complete. The ability to obtain old and new values affected by INSERT, UPDATE, and DELETE statements, as part of the SQL command’s execution, offers developers a uniform approach to reading these values and reduces the amount of work the database must perform. Availability: All Offerings SQL Language Reference: DELETE SQL Language Reference: INSERT SQL Language Reference: UPDATE","title":"Enhanced Returning-Into Clause","component":"guide","version":"latest","name":"returning-into","url":"/guide/latest/versions/23.2/features/returning-into.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"128":{"id":128,"text":"Version 23.2 Categories SQL Schema privileges enable you to grant a user access to every object of the specified type in another schema. For example, to allow one user to query every table in another schema. -- create user to own tables create user data_owner no authentication; -- create user to query the tables grant create session to reporting_user identified by reporting_user; -- This gives reporting_user query privileges on every current & future table owned by data_owner grant read any table on schema data_owner to reporting_user; -- reporting_user automatically gets access to this table create table data_owner.tab ( c1 int ); conn reporting_user/reporting_user@23cfree select count(*) from data_owner.tab; Result SQL> create user data_owner 2 no authentication; User DATA_OWNER created. SQL> SQL> -- create user to query the tables SQL> grant create session to reporting_user 2 identified by reporting_user; Grant succeeded. SQL> SQL> -- This gives reporting_user query privileges on every current & future table owned by data_owner SQL> grant read any table 2 on schema data_owner 3 to reporting_user; Grant succeeded. SQL> SQL> -- reporting_user automatically gets access to this table SQL> create table data_owner.tab ( c1 int ); Table DATA_OWNER.TAB created. SQL> conn reporting_user/reporting_user@23cfree Connected. SQL> SQL> select count(*) from data_owner.tab; COUNT(*) ---------- 0 Schema privileges simplify data access controls. Availability: All Offerings GRANT Documentation","title":"Schema Level Privileges","component":"guide","version":"latest","name":"schema-level-privileges","url":"/guide/latest/versions/23.2/features/schema-level-privileges.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"129":{"id":129,"text":"Version 23.2 Categories SQL You can now concatenate an unlimited number of parameters via the CONCAT() function. SELECT CONCAT('Hello World! It currently is ', TO_CHAR(sysdate,'YYYY-MM-DD HH24:MI:SS'), ' here in Vienna.') AS my_string; Result SQL> SELECT CONCAT('Hello World! It currently is ', TO_CHAR(sysdate,'YYYY-MM-DD HH24:MI:SS'), ' here in Vienna.') AS my_string; MY_STRING ___________________________________________________________________ Hello World! It currently is 2024-06-13 16:50:50 here in Vienna. Not having to nest multiple concatenations in multiple CONCAT() calls aids the readability and maintainability of code. Availability: All Offerings CONCAT Documentation","title":"Seamless concatenation via Varargs","component":"guide","version":"latest","name":"seamless-concat","url":"/guide/latest/versions/23.2/features/seamless-concat.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"130":{"id":130,"text":"Version 23.2 Categories SQL You can now run SELECT expression-only queries without a FROM clause, e.g. adding from dual is no longer needed in such cases. The DUAL table has not disappeared, all queries that use it will continue to work as expected. select 2 * 3; select to_char( sysdate, 'dd.mm.yyyy' ) as today; select sysdate; Result SQL> select 2 2 * 3; 2*3 ---------- 6 SQL> select 2 to_char( 3 sysdate, 4 'dd.mm.yyyy' 5 ) as today; TODAY ---------- 20.06.2023 SQL> select 2 sysdate; SYSDATE --------- 20-JUN-23 Making the from dual clause optional in expression-only SQL statements improves SQL code portability and ease of use for developers. Availability: All Offerings Documentation","title":"SELECT without FROM clause","component":"guide","version":"latest","name":"select-without-from","url":"/guide/latest/versions/23.2/features/select-without-from.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"131":{"id":131,"text":"Version 23.2 Categories SQL, PL/SQL The SQL Transpiler automatically and wherever possible converts (transpiles) PL/SQL functions within SQL into SQL expressions, without user intervention. create table employees ( employee_id integer primary key, first_name varchar2(100), last_name varchar2(100), hire_date date ); insert into employees (employee_id,first_name,last_name,hire_date) values (100,'Steven','King',to_date('17-JUN-2013 00:00','DD-MON-YYYY HH24:MI')), (101,'Neena','Yang',to_date('21-SEP-2015 00:00','DD-MON-YYYY HH24:MI')), (102,'Lex','Garcia',to_date('13-JAN-2011 00:00','DD-MON-YYYY HH24:MI')), (103,'Alexander','James',to_date('03-JAN-2016 00:00','DD-MON-YYYY HH24:MI')), (104,'Bruce','Miller',to_date('21-MAY-2017 00:00','DD-MON-YYYY HH24:MI')), (105,'David','Williams',to_date('25-JUN-2015 00:00','DD-MON-YYYY HH24:MI')), (106,'Valli','Jackson',to_date('05-FEB-2016 00:00','DD-MON-YYYY HH24:MI')), (107,'Diana','Nguyen',to_date('07-FEB-2017 00:00','DD-MON-YYYY HH24:MI')), (108,'Nancy','Gruenberg',to_date('17-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), (109,'Daniel','Faviet',to_date('16-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), (110,'John','Chen',to_date('28-SEP-2015 00:00','DD-MON-YYYY HH24:MI')); create or replace function get_year ( dt date ) return number as begin return extract ( year from dt ); end get_year; / set serveroutput off -- This disables the transpiler; it is disabled by default alter session set sql_transpiler = 'OFF'; select count (*) from employees where get_year ( hire_date ) = 2015; -- With the transpiler disabled, the predicate is the function call GET_YEAR select * from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); -- Enable the automatic SQL transpiler alter session set sql_transpiler = 'ON'; -- With the transpiler enabled, the expression in the function is extracted -- the predicate is now EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\")) -- => no SQL <> PL/SQL runtime context switch select count (*) from employees where get_year ( hire_date ) = 2017; select * from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); Result SQL> create table employees ( 2 employee_id integer primary key, 3 first_name varchar2(100), 4 last_name varchar2(100), 5 hire_date date 6 ); Table EMPLOYEES created. SQL> SQL> insert into employees (employee_id,first_name,last_name,hire_date) 2 values (100,'Steven','King',to_date('17-JUN-2013 00:00','DD-MON-YYYY HH24:MI')), 3 (101,'Neena','Yang',to_date('21-SEP-2015 00:00','DD-MON-YYYY HH24:MI')), 4 (102,'Lex','Garcia',to_date('13-JAN-2011 00:00','DD-MON-YYYY HH24:MI')), 5 (103,'Alexander','James',to_date('03-JAN-2016 00:00','DD-MON-YYYY HH24:MI')), 6 (104,'Bruce','Miller',to_date('21-MAY-2017 00:00','DD-MON-YYYY HH24:MI')), 7 (105,'David','Williams',to_date('25-JUN-2015 00:00','DD-MON-YYYY HH24:MI')), 8 (106,'Valli','Jackson',to_date('05-FEB-2016 00:00','DD-MON-YYYY HH24:MI')), 9 (107,'Diana','Nguyen',to_date('07-FEB-2017 00:00','DD-MON-YYYY HH24:MI')), 10 (108,'Nancy','Gruenberg',to_date('17-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), 11 (109,'Daniel','Faviet',to_date('16-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), 12 (110,'John','Chen',to_date('28-SEP-2015 00:00','DD-MON-YYYY HH24:MI')); 11 rows inserted. SQL> SQL> SQL> create or replace function get_year ( dt date ) 2 return number as 3 begin 4 return extract ( year from dt ); 5 end get_year; 6 / Function GET_YEAR compiled SQL> SQL> set serveroutput off SQL> -- This disables the transpiler; it is disabled by default SQL> alter session set sql_transpiler = 'OFF'; Session altered. SQL> SQL> select count (*) from employees 2 where get_year ( hire_date ) = 2015; COUNT(*) ---------- 3 SQL> SQL> -- With the transpiler disabled, the predicate is the function call GET_YEAR SQL> select * 2 from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); PLAN_TABLE_OUTPUT ---------------------------------------------------------------------------- EXPLAINED SQL STATEMENT: ------------------------ select count (*) from employees where get_year ( hire_date ) = 2015 Plan hash value: 1756381138 ---------------------------------------- | Id | Operation | Name | ---------------------------------------- | 0 | SELECT STATEMENT | | | 1 | SORT AGGREGATE | | |* 2 | TABLE ACCESS FULL| EMPLOYEES | ---------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 2 - filter(\"GET_YEAR\"(\"HIRE_DATE\")=2015) 19 rows selected. SQL> SQL> -- Enable the automatic SQL transpiler SQL> alter session set sql_transpiler = 'ON'; Session altered. SQL> SQL> -- With the transpiler enabled, the expression in the function is extracted SQL> -- the predicate is now EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\")) SQL> -- => no SQL <> PL/SQL runtime context switch SQL> select count (*) from employees 2 where get_year ( hire_date ) = 2017; COUNT(*) ---------- 2 SQL> SQL> select * 2 from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); PLAN_TABLE_OUTPUT -------------------------------------------------------------------------- EXPLAINED SQL STATEMENT: ------------------------ select count (*) from employees where get_year ( hire_date ) = 2017 Plan hash value: 1756381138 ---------------------------------------- | Id | Operation | Name | ---------------------------------------- | 0 | SELECT STATEMENT | | | 1 | SORT AGGREGATE | | |* 2 | TABLE ACCESS FULL| EMPLOYEES | ---------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 2 - filter(EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\"))=2017) 19 rows selected. The conversion operation is transparent to users and can improve performance by reducing overhead accrued from switching between the SQL and PL/SQL runtime. Availability: All Offerings SQL Tuning Guide","title":"SQL Transpiler","component":"guide","version":"latest","name":"sql-transpiler","url":"/guide/latest/versions/23.2/features/sql-transpiler.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"132":{"id":132,"text":"Version 23.2 Categories SQL You can pass INTERVAL datatypes to the SUM and AVG aggregate and analytic functions. with rws as ( select interval '0' hour + numtodsinterval ( level, 'hour' ) dsi connect by level with rws as ( 2 select interval '0' hour + numtodsinterval ( level, 'hour' ) dsi 3 connect by level <= 10 4 ) 5 select sum ( dsi ) total_duration, 6 avg ( dsi ) mean_duration 7 from rws; TOTAL_DURATION MEAN_DURATION ------------------- ------------------- +02 07:00:00.000000 +00 05:30:00.000000 This enhancement makes it easier for developers to calculate totals and averages over INTERVAL values. Availability: All Offerings AVG Documentation SUM Documentation","title":"SUM and AVG over INTERVAL data types","component":"guide","version":"latest","name":"sum-and-avg-over-interval-types","url":"/guide/latest/versions/23.2/features/sum-and-avg-over-interval-types.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"133":{"id":133,"text":"Version 23.2 Categories SQL The Table Value Constructor can be used to generate multiple table values (e.g. rows) in a single invocation. This feature is part of the ISO SQL:1992 standard. -- Table to demonstrate the table value constructor CREATE TABLE bookings ( id NUMBER, location VARCHAR2(25), type VARCHAR2(25) ); -- Insert multiple rows with a single insert statement INSERT INTO bookings VALUES (12113, 'Vienna', 'Family'), (62361, 'San Francisco', 'Business'), (38172, 'Berlin', 'Leisure'); -- Retrieve newly inserted rows SELECT * FROM bookings; -- Generate multiple rows using the table value constructor SELECT employee_id, first_name FROM ( VALUES (1,'Scott'), (2,'James'), (3,'John') ) employees (employee_id, first_name); Result SQL> -- Table to demonstrate the table value constructor SQL> CREATE TABLE bookings 2 ( 3 id NUMBER, 4 location VARCHAR2(25), 5 type VARCHAR2(25) 6 ); Table BOOKINGS created. SQL> -- Insert multiple rows with a single insert statement SQL> INSERT INTO bookings 2 VALUES (12113, 'Vienna', 'Family'), 3 (62361, 'San Francisco', 'Business'), 4 (38172, 'Berlin', 'Leisure'); 3 rows inserted. SQL> -- Retrieve newly inserted rows SQL> SELECT * FROM bookings; ID LOCATION TYPE -------- ---------------- -------- 12113 Vienna Family 62361 San Francisco Business 38172 Berlin Leisure SQL> -- Generate multiple rows using the table value constructor SQL> SELECT employee_id, first_name 2 FROM ( 3 VALUES (1,'Scott'), 4 (2,'James'), 5 (3,'John') 6 ) employees (employee_id, first_name); EMPLOYEE_ID FIRST_NAME -------------- ---------- 1 Scott 2 James 3 John The table value constructor enables users to insert multiple rows within a single INSERT operation. This avoids unnecessary additional INSERT executions and roundtrips from and to the client for inserting multiple rows. Using this feature can make SQL scripts more concise and readable. Using this feature can save time when writing INSERT statements manually. The table value constructor provides a convenient and concise way to generate multiple rows with values. Availability: All Offerings Multi-row INSERT and VALUES row generation documentation Multi-row INSERT and VALUES row generation example","title":"Table Value Constructor","component":"guide","version":"latest","name":"table-value-constructor","url":"/guide/latest/versions/23.2/features/table-value-constructor.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"134":{"id":134,"text":"Version 23.2 Categories SQL UPDATE and DELETE statements can leverage join conditions on other tables to determine which rows to modify or delete in the source table. -- Get current salary for all employees in the IT department SELECT e.first_name, e.last_name, e.salary FROM employees e, departments d WHERE e.department_id=d.department_id AND d.department_name = 'IT'; -- Increase salary by 50% for all employees in the IT department UPDATE employees e SET e.salary=e.salary*1.5 FROM departments d WHERE e.department_id=d.department_id AND d.department_name = 'IT'; -- Verify changes SELECT e.first_name, e.last_name, e.salary FROM employees e, departments d WHERE e.department_id=d.department_id AND d.department_name = 'IT'; -- Commit changes COMMIT; -- Get all Sales Reps who were hired before the 1st of January 2016 SELECT e.first_name, e.last_name, e.hire_date FROM employees e, departments d, jobs j WHERE e.department_id=d.department_id AND d.department_name = 'Sales' AND e.job_id=j.job_id AND j.job_title = 'Sales Representative' AND e.hire_date -- Get current salary for all employees in the IT department SQL> SELECT e.first_name, e.last_name, e.salary 2 FROM employees e, departments d 3 WHERE e.department_id=d.department_id 4* AND d.department_name = 'IT'; FIRST_NAME LAST_NAME SALARY _____________ ____________ _________ Alexander James 9000 Bruce Miller 6000 David Williams 4800 Valli Jackson 4800 Diana Nguyen 4200 SQL> SQL> -- Increase salary by 50% for all employees in the IT department SQL> UPDATE employees e SET e.salary=e.salary*1.5 2 FROM departments d 3 WHERE e.department_id=d.department_id 4* AND d.department_name = 'IT'; 5 rows updated. SQL> SQL> -- Verify changes SQL> SELECT e.first_name, e.last_name, e.salary 2 FROM employees e, departments d 3 WHERE e.department_id=d.department_id 4* AND d.department_name = 'IT'; FIRST_NAME LAST_NAME SALARY _____________ ____________ _________ Alexander James 13500 Bruce Miller 9000 David Williams 7200 Valli Jackson 7200 Diana Nguyen 6300 SQL> SQL> -- Commit changes SQL> COMMIT; Commit complete. SQL> -- Get all Sales Reps who were hired before the 1st of January 2016 SQL> SELECT e.first_name, e.last_name, e.hire_date 2 FROM employees e, departments d, jobs j 3 WHERE e.department_id=d.department_id 4 AND d.department_name = 'Sales' 5 AND e.job_id=j.job_id 6 AND j.job_title = 'Sales Representative' 7* AND e.hire_date SQL> -- Delete all Sales Reps who were hired before the 1st of January 2016 SQL> DELETE FROM employees e 2 FROM departments d, jobs j 3 WHERE e.department_id=d.department_id 4 AND d.department_name = 'Sales' 5 AND e.job_id=j.job_id 6 AND j.job_title = 'Sales Representative' 7* AND e.hire_date SQL> -- Verify changes SQL> SELECT e.first_name, e.last_name, e.hire_date 2 FROM employees e, departments d, jobs j 3 WHERE e.department_id=d.department_id 4 AND d.department_name = 'Sales' 5 AND e.job_id=j.job_id 6 AND j.job_title = 'Sales Representative' 7* AND e.hire_date SQL> -- Commit changes SQL> COMMIT; Commit complete. Leveraging joins as part of UPDATE and DELETE statements makes writing, executing and reading data manipulation statements easier. Availability: All Offerings UPDATE statement and DELETE statement","title":"UPDATE/DELETE via JOIN","component":"guide","version":"latest","name":"update-delete-via-join","url":"/guide/latest/versions/23.2/features/update-delete-via-join.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"135":{"id":135,"text":"Version 23.2 Categories SQL The maximum number of columns allowed in a database table or view has been increased to 4096. This feature allows you to build applications that can store attributes in a single table with more than the previous 1000-column limit. Some applications, such as Machine Learning and streaming IoT application workloads, may require the use of de-normalized tables with more than 1000 columns. The majority of existing database applications might not need extra-wide tables. Before you can create tables with more than 1000 columns you must ensure that the following initialization parameters are set to the required values: The value of the compatible parameter must be set to 23.0.0 or higher Once compatible is set accordingly you must change max_columns to extended Please refer to the Database Upgrade Guide for more details about the compatible initialization parameter and the implications of changing it. Typing a create table statement featuring 4096 columns would result in a very long statement. The example simplifies the process using Native Dynamic SQL; it assumes that the above mentioned prerequisites are met. DECLARE l_sql CLOB; c_num_cols CONSTANT PLS_INTEGER := 4096; BEGIN -- construct the `create table` statement and store it as a CLOB l_sql := 'create table demotable (' || chr(13) || ' c0001 number' || chr(13); FOR i IN 2..c_num_cols LOOP l_sql := l_sql || ',c' || lpad(i, 4, 0) || ' number' || chr(13); END LOOP; l_sql := l_sql || ')'; -- create the table EXECUTE IMMEDIATE l_sql; EXCEPTION -- notify of errors WHEN OTHERS THEN raise_application_error( -20000, 'an unexpected error occurred ' || ' (' || sqlerrm || ')' ); END; / -- validate the number of columns in the table SELECT count(*) FROM user_tab_columns WHERE table_name = 'DEMOTABLE'; Result SQL> DECLARE 2 l_sql CLOB; 3 c_num_cols CONSTANT PLS_INTEGER := 4096; 4 BEGIN 5 -- construct the `create table` statement and store it as a CLOB 6 l_sql := 'create table demotable (' || chr(13) || ' c0001 number' || chr(13); 7 FOR i IN 2..c_num_cols LOOP 8 l_sql := l_sql || ',c' || lpad(i, 4, 0) || ' number' || chr(13); 9 END LOOP; 10 l_sql := l_sql || ')'; 11 12 -- create the table 13 EXECUTE IMMEDIATE l_sql; 14 EXCEPTION 15 -- notify of errors 16 WHEN OTHERS THEN 17 raise_application_error( 18 -20000, 19 'an unexpected error occurred ' 20 || ' (' 21 || sqlerrm 22 || ')' 23 ); 24 END; 25 / PL/SQL procedure successfully completed. SQL> -- validate the number of columns in the table SQL> SELECT 2 count(*) 3 FROM 4 user_tab_columns 5 WHERE 6 table_name = 'DEMOTABLE'; COUNT(*) ---------- 4096 Whilst most database applications should be fine with the existing limit of 1000 columns per table or view, certain IoT (Internet of Things) or Machine Learning workloads might require wider tables. In such cases you can make use of the wide tables offered by Oracle Database 23c. Availability: All Offerings Database Reference: max_columns initialization parameter Database Reference: compatible initialization parameter Blog post discussing wide tables on blogs.oracle.com","title":"4096 table columns","component":"guide","version":"latest","name":"wide-tables","url":"/guide/latest/versions/23.2/features/wide-tables.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"136":{"id":136,"text":"Oracle Database supports a rich set of languages for writing user-defined functions and stored procedures, including PL/SQL, Java, and C. With Oracle Database Multilingual Engine (MLE), developers have the additional option to run JavaScript code starting with Oracle Database 23c.","title":"JavaScript","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/23.2/javascript/index.html","titles":[]},"137":{"id":137,"text":"Version 23.2 Categories JavaScript Inlined JavaScript procedures allow you to embed JavaScript code directly in the CREATE FUNCTION and CREATE PROCEDURE statements without the need of creating a module first. If you want to implement a less complex JavaScript feature quickly, inlined procedures and functions are a good choice. The following example coverts seconds-since-epoch to an Oracle Date. create or replace function epoch_to_Date ( P_EPOCH number ) return date as mle language javascript q'~ let d = new Date(0); d.setUTCSeconds(P_EPOCH); return d; ~'; / select to_char( epoch_to_date(1684758614), 'yyyy-mm-dd hh24:mi:ss' ) the_date; Result SQL> create or replace function epoch_to_date ( 2 P_EPOCH number 3 ) return date 4 as mle language javascript 5 q'~ 6 let d = new Date(0); 7 d.setUTCSeconds(P_EPOCH); 8 9 return d; 10 ~'; 11 / Function created. SQL> SQL> select 2 to_char( 3 epoch_to_date(1684758614), 4 'yyyy-mm-dd hh24:mi:ss' 5 ) the_date; THE_DATE ------------------- 2023-05-22 12:30:14 Inline JavaScript functions and procedures are a convenient way of exposing functionality in JavaScript to SQL and PL/SQL. You aren’t limited to using built-in JavaScript objects, you are free to perform any manipulation you like. If more complex processing, including importing 3rd party JavaScript modules is required you should use modules and environments instead. Availability: All Offerings Documentation","title":"Inline JavaScript Procedures","component":"guide","version":"latest","name":"inline-javascript","url":"/guide/latest/versions/23.2/javascript/inline-javascript.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"138":{"id":138,"text":"Version 23.2 Categories JavaScript Writing JavaScript modules and environments are the first steps towards the creation of your application. Once the JavaScript code is ready you can expose it to SQL and PL/SQL thanks to a so-called call specification. A JavaScript call specification consists of the following: the module name an (optional) reference to a environment the (simplified) JavaScript function’s signature as per the module code All client code, regardless whether it’s written in Java, Python, or even with node-oracledb, can access JavaScript stored procedures in the database. The following example demonstrates The creation of a JavaScript module (hello_module) in the current user’s schema featuring a single function named hello() The addition of a call specification f_hello() exposing the JavaScript function to SQL and PL/SQL A sample invocation of the previously defined function create or replace mle module hello_module language javascript as // JavaScript code to follow from here /** * return a friendly greeting * @param {string} who - who should be greeted? * @returns {string} */ export function hello(who) { return 'hello ' + who; } / create or replace function f_hello( p_who varchar2) return varchar2 as mle module hello_module signature 'hello'; / select f_hello('JavaScript'); Result SQL> create or replace mle module hello_module 2 language javascript as 3 4 export function hello(who) { 5 6 return 'hello ' + who; 7 } 8 / MLE module created. SQL> create or replace function f_hello( 2 p_who varchar2) 3 return varchar2 4 as mle module hello_module 5 signature 'hello'; 6 / Function created. SQL> select 2 hello('JavaScript'); HELLO('JAVASCRIPT') ------------------------------------------------------------------------------- hello JavaScript JavaScript Call Specifications expose JavaScript code to SQL and PL/SQL allowing any programming language with a SQL driver to make use of it. In addition to standalone functions and procedures packages can be used to create a container for call specifications originating from the same JavaScript module. Availability: All Offerings Documentation Example Introductory Blog Post","title":"JavaScript Call Specifications","component":"guide","version":"latest","name":"javascript-call-specifications","url":"/guide/latest/versions/23.2/javascript/javascript-call-specifications.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"139":{"id":139,"text":"Version 23.2 Categories JavaScript JavaScript Environments, just like JavaScript modules, are schema objects persisted in the database. They perform a vital function in applications involving multiple JavaScript modules. Unlike node.js or deno projects JavaScript modules aren’t persisted on the file system, they are stored in the database. Developers cannot simply import modules based on their location in the file system, they need to use environments instead. The following example demonstrates the use of environments. create or replace MLE module module_one language javascript as // this function is exported and will be called by // module_2's greeting() function export function hello(who) { return 'hello ' + who; } / create or replace MLE module module_two language javascript as // before module_1's hello() function can be imported a // so-called import name must be defined by means of creating // a JavaScript environment. The module name does not have to // match the import name import { hello } from 'module1' export function greeting() { const who = 'JavaScript'; return hello(who); } / // the mapping between import name and module name is defined // in an environment create or replace mle env example_env imports ( 'module1' module module_one ); // with the module in place it is possible to invoke module_2's // greeting function. Refer to the section about call specifications // for more details about invoking JavaScript code in SQL and PL/SQL create or replace function f_greeting return varchar2 as mle module module_two env example_env signature 'greeting'; / select f_greeting; Result SQL> create or replace MLE module module_one 2 language javascript as 3 4 // this function is exported and will be called by 5 // module_2's greeting() function 6 export function hello(who) { 7 8 return 'hello ' + who; 9 } 10 / MLE module created. SQL> create or replace MLE module module_two 2 language javascript as 3 4 // before module_1's hello() function can be imported a 5 // so-called import name must be defined by means of creating 6 // a JavaScript environment. The module name does not have to 7 // match the import name 8 import { hello } from 'module1' 9 10 export function greeting() { 11 12 const who = 'JavaScript'; 13 return hello(who); 14 } 15 / MLE module created. SQL> -- the mapping between import name and module name is defined SQL> -- in an environment SQL> create or replace mle env example_env 2 imports ( 3 'module1' module module_one 4 ); MLE env created. SQL> -- with the module in place it is possible to invoke module_2's SQL> -- greeting function. Refer to the section about call specifications SQL> -- for more details about invoking JavaScript code in SQL and PL/SQL SQL> create or replace function f_greeting 2 return varchar2 as 3 mle module module_two 4 env example_env 5 signature 'greeting'; 6 / Function created. SQL> -- call the function SQL> select 2 f_greeting; F_GREETING ------------------------------------------------------------------------------- hello JavaScript JavaScript Environments play a crucial role during the development of JavaScript stored procedures. They are most useful providing means to map an import name as used in a JavaScript module to the actual module itself. Furthermore they are essential entities for the definition of call specifications. Availability: All Offerings Documentation Blog post","title":"JavaScript Environments","component":"guide","version":"latest","name":"javascript-environments","url":"/guide/latest/versions/23.2/javascript/javascript-environments.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"140":{"id":140,"text":"Version 23.2 Categories JavaScript A JavaScript module is the equivalent of an ECMAScript module commonly found in node.js and deno projects, but instead of storing it in a file in a file system it is persisted as a schema object in the database. JavaScript modules can either be provided by the community, or they can consist of specific, custom application code. JavaScript modules can reference functionality from other JavaScript modules allowing you to build complex applications that are easier to maintain. Just as Java stored procedures JavaScript code can be made available to SQL and PL/SQL by means of a call specification. The following example demonstrates the creation of a JavaScript module with the code provided inline with the module definition. create or replace mle module example_module language javascript as // this is where the JavaScript code section begins /** * convert a delimited string into key-value pairs and return JSON * @param {string} inputString - the input string to be converted * @returns {JSON} */ function string2obj(inputString) { if ( inputString === undefined ) { throw `string must comply with a form of key1=value1;...;keyN=valueN`; } let myObject = {}; if ( inputString.length === 0 ) { return myObject; } const kvPairs = inputString.split(\";\"); kvPairs.forEach( pair => { const tuple = pair.split(\"=\"); if ( tuple.length === 1 ) { tuple[1] = false; } else if ( tuple.length != 2 ) { throw \"parse error: you need to use exactly one '=' between \" + \"key and value and not use '=' in either key or value\"; } myObject[tuple[0]] = tuple[1]; }); return myObject; } /** * convert a JavaScript object to a string * @param {object} inputObject - the object to transform to a string * @returns {string} */ function obj2String(inputObject) { if ( typeof inputObject != 'object' ) { throw \"inputObject isn't an object\"; } return JSON.stringify(inputObject); } export { string2obj, obj2String } / Result When executing the above statement in sqlplus or sqlcl you will get a message that the MLE module has been successfully created. Verify the module has been created as follows: select module_name, language_name from user_mle_modules where module_name = 'EXAMPLE_MODULE' MODULE_NAME LANGUAGE_NAME ------------------------------ ------------------------------ EXAMPLE_MODULE JAVASCRIPT You can also view the source code of the JavaScript module: select text from user_source where name = 'EXAMPLE_MODULE' order by line; TEXT -------------------------------------------------------------------------------- // this is where the JavaScript code section begins /** * convert a delimited string into key-value pairs and return JSON * @param {string} inputString - the input string to be converted * @returns {JSON} */ function string2obj(inputString) { if ( inputString === undefined ) { throw `string must comply with a form of key1=value1;...;keyN=valueN`; } let myObject = {}; if ( inputString.length === 0 ) { return myObject; } const kvPairs = inputString.split(\";\"); kvPairs.forEach( pair => { const tuple = pair.split(\"=\"); if ( tuple.length === 1 ) { tuple[1] = false; } else if ( tuple.length != 2 ) { throw \"parse error: you need to use exactly one '=' between \" + \"key and value and not use '=' in either key or value\"; } myObject[tuple[0]] = tuple[1]; }); return myObject; } /** * convert a JavaScript object to a string * @param {object} inputObject - the object to transform to a string * @returns {string} */ function obj2String(inputObject) { if ( typeof inputObject != 'object' ) { throw \"inputObject isn't an object\"; } return JSON.stringify(inputObject); } export { string2obj, obj2String } Storing processing logic inside the database rather than in the middle-tier provides numerous advantages especially when it comes to latency, security, auditing, data integrity, and many more. It also helps developers realise the complete database feature set. Availability: All Offerings Documentation Example Feature Introduction","title":"JavaScript Modules","component":"guide","version":"latest","name":"javascript-modules","url":"/guide/latest/versions/23.2/javascript/javascript-modules.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"141":{"id":141,"text":"Version 23.2 Categories PL/SQL The CASE statement is extended in PL/SQL to be consistent with the updated definitions of CASE expressions and CASE statements in the SQL:2003 Standard [ISO03a, ISO03b]. At the time of writing there is no SQL equivalent of the extended PL/SQL CASE statement. begin -- example 01: assign grades to result percentages for inx in -1, 19, 50, 75, 99, null loop dbms_output.put_line ( nvl ( to_char ( inx ), 'null' ) || ' = ' || case inx when 100 then 'invalid result' when is null then 'no result' when between 90 and 100 then 'A' when >= 80 then 'B' when >= 70 then 'C' when >= 60 then 'D' when >= 50 then 'E' else 'fail' end ); end loop; end; / Result SQL> begin 2 -- example 01: assign grades to result percentages 3 for inx in -1, 19, 50, 75, 99, null loop 4 dbms_output.put_line ( 5 nvl ( to_char ( inx ), 'null' ) || ' = ' || 6 case inx 7 when 100 then 'invalid result' 8 when is null then 'no result' 9 when between 90 and 100 then 'A' 10 when >= 80 then 'B' 11 when >= 70 then 'C' 12 when >= 60 then 'D' 13 when >= 50 then 'E' 14 else 'fail' 15 end 16 ); 17 end loop; 18 end; 19 / -1 = invalid result 19 = fail 50 = E 75 = C 99 = A null = no result PL/SQL procedure successfully completed. Dangling predicates allow tests other than equality to be performed in simple CASE operations. Multiple choices in WHEN clauses allow CASE operations in PL/SQL to be written with less duplicated code. Availability: All Offerings Database PL/SQL Language Reference","title":"Extended CASE Controls","component":"guide","version":"latest","name":"extended-case-controls","url":"/guide/latest/versions/23.2/plsql/extended-case-controls.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"142":{"id":142,"text":"PL/SQL provides a server-side, stored procedural language that is easy-to-use, seamless with SQL, robust, portable, and secure. You can access and manipulate data inside the database using procedural objects called PL/SQL units. PL/SQL units generally are categorized as follows: A PL/SQL subprogram is a PL/SQL block that is stored in the database and can be called by name from an application. When you create a subprogram, the database parses the subprogram and stores its parsed representation in the database. You can declare a subprogram as a procedure or a function. A PL/SQL anonymous block is a PL/SQL block that appears in your application and is not named or stored in the database. In many applications, PL/SQL blocks can appear wherever SQL statements can appear. PL/SQL includes procedural language elements such as conditions and loops and can handle exceptions. It allows declaration of constants, variables, procedures, functions, packages, types and variables of those types, and triggers. Arrays are supported via the use of PL/SQL collections. For more information about PL/SQL see Overview of PL/SQL.","title":"PL/SQL","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/23.2/plsql/index.html","titles":[]},"143":{"id":143,"text":"Version 23.2 Categories PL/SQL The JSON constructor can now accept a PL/SQL array or record type and return a JSON object or array populated with the aggregate type data. Conversely, the built-in function json_value now supports PL/SQL array and record types in the RETURNING clause, mapping from JSON to the specified aggregate type. declare type money_rec is record ( currency_code char(3), amount number ); type country_price_arr is table of money_rec index by varchar2(2); country_prices country_price_arr; price_json json; begin country_prices := country_price_arr ( 'US' => money_rec ( 'USD', 9.99 ), 'GB' => money_rec ( 'GBP', 8.99 ), 'DE' => money_rec ( 'EUR', 8.99 ), 'IN' => money_rec ( 'INR', 849 ) ); /* Automatically convert PL/SQL types to JSON by passing to JSON constructor */ price_json := json ( country_prices ); dbms_output.put_line ( json_serialize ( price_json returning clob pretty ) ); for country, price in pairs of /* Convert JSON to PL/SQL types with JSON_value */ json_value ( price_json, '$' returning country_price_arr ) loop dbms_output.put_line ( country || ' = ' || price.currency_code || to_char ( price.amount, '990.00' ) ); end loop; end; / Result SQL> declare 2 type money_rec is record ( 3 currency_code char(3), 4 amount number 5 ); 6 7 type country_price_arr is table of money_rec 8 index by varchar2(2); 9 10 country_prices country_price_arr; 11 price_json json; 12 begin 13 country_prices := country_price_arr ( 14 'US' => money_rec ( 'USD', 9.99 ), 15 'GB' => money_rec ( 'GBP', 8.99 ), 16 'DE' => money_rec ( 'EUR', 8.99 ), 17 'IN' => money_rec ( 'INR', 849 ) 18 ); 19 20 /* Automatically convert PL/SQL types to JSON by passing to JSON constructor */ 21 price_json := json ( country_prices ); 22 23 dbms_output.put_line ( json_serialize ( price_json returning clob pretty ) ); 24 25 for country, price in pairs of 26 /* Convert JSON to PL/SQL types with JSON_value */ 27 json_value ( price_json, '$' returning country_price_arr ) 28 loop 29 dbms_output.put_line ( 30 country || ' = ' || price.currency_code || to_char ( price.amount, '990.00' ) 31 ); 32 end loop; 33 end; 34 / { \"DE\" : { \"CURRENCY_CODE\" : \"EUR\", \"AMOUNT\" : 8.99 }, \"GB\" : { \"CURRENCY_CODE\" : \"GBP\", \"AMOUNT\" : 8.99 }, \"IN\" : { \"CURRENCY_CODE\" : \"INR\", \"AMOUNT\" : 849 }, \"US\" : { \"CURRENCY_CODE\" : \"USD\", \"AMOUNT\" : 9.99 } } DE = EUR 8.99 GB = GBP 8.99 IN = INR 849.00 US = USD 9.99 PL/SQL to JSON type mappings enables you to convert JSON to PL/SQL types and back using built-in functions. Availability: All Offerings PL/SQL and JSON Type Conversions Documentation","title":"PL/SQL and JSON type conversions","component":"guide","version":"latest","name":"json-plsql-type-conversions","url":"/guide/latest/versions/23.2/plsql/json-plsql-type-conversions.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"144":{"id":144,"text":"Version 23.2 Categories SQL, PL/SQL The SQL Transpiler automatically and wherever possible converts (transpiles) PL/SQL functions within SQL into SQL expressions, without user intervention. create table employees ( employee_id integer primary key, first_name varchar2(100), last_name varchar2(100), hire_date date ); insert into employees (employee_id,first_name,last_name,hire_date) values (100,'Steven','King',to_date('17-JUN-2013 00:00','DD-MON-YYYY HH24:MI')), (101,'Neena','Yang',to_date('21-SEP-2015 00:00','DD-MON-YYYY HH24:MI')), (102,'Lex','Garcia',to_date('13-JAN-2011 00:00','DD-MON-YYYY HH24:MI')), (103,'Alexander','James',to_date('03-JAN-2016 00:00','DD-MON-YYYY HH24:MI')), (104,'Bruce','Miller',to_date('21-MAY-2017 00:00','DD-MON-YYYY HH24:MI')), (105,'David','Williams',to_date('25-JUN-2015 00:00','DD-MON-YYYY HH24:MI')), (106,'Valli','Jackson',to_date('05-FEB-2016 00:00','DD-MON-YYYY HH24:MI')), (107,'Diana','Nguyen',to_date('07-FEB-2017 00:00','DD-MON-YYYY HH24:MI')), (108,'Nancy','Gruenberg',to_date('17-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), (109,'Daniel','Faviet',to_date('16-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), (110,'John','Chen',to_date('28-SEP-2015 00:00','DD-MON-YYYY HH24:MI')); create or replace function get_year ( dt date ) return number as begin return extract ( year from dt ); end get_year; / set serveroutput off -- This disables the transpiler; it is disabled by default alter session set sql_transpiler = 'OFF'; select count (*) from employees where get_year ( hire_date ) = 2015; -- With the transpiler disabled, the predicate is the function call GET_YEAR select * from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); -- Enable the automatic SQL transpiler alter session set sql_transpiler = 'ON'; -- With the transpiler enabled, the expression in the function is extracted -- the predicate is now EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\")) -- => no SQL <> PL/SQL runtime context switch select count (*) from employees where get_year ( hire_date ) = 2017; select * from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); Result SQL> create table employees ( 2 employee_id integer primary key, 3 first_name varchar2(100), 4 last_name varchar2(100), 5 hire_date date 6 ); Table EMPLOYEES created. SQL> SQL> insert into employees (employee_id,first_name,last_name,hire_date) 2 values (100,'Steven','King',to_date('17-JUN-2013 00:00','DD-MON-YYYY HH24:MI')), 3 (101,'Neena','Yang',to_date('21-SEP-2015 00:00','DD-MON-YYYY HH24:MI')), 4 (102,'Lex','Garcia',to_date('13-JAN-2011 00:00','DD-MON-YYYY HH24:MI')), 5 (103,'Alexander','James',to_date('03-JAN-2016 00:00','DD-MON-YYYY HH24:MI')), 6 (104,'Bruce','Miller',to_date('21-MAY-2017 00:00','DD-MON-YYYY HH24:MI')), 7 (105,'David','Williams',to_date('25-JUN-2015 00:00','DD-MON-YYYY HH24:MI')), 8 (106,'Valli','Jackson',to_date('05-FEB-2016 00:00','DD-MON-YYYY HH24:MI')), 9 (107,'Diana','Nguyen',to_date('07-FEB-2017 00:00','DD-MON-YYYY HH24:MI')), 10 (108,'Nancy','Gruenberg',to_date('17-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), 11 (109,'Daniel','Faviet',to_date('16-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), 12 (110,'John','Chen',to_date('28-SEP-2015 00:00','DD-MON-YYYY HH24:MI')); 11 rows inserted. SQL> SQL> SQL> create or replace function get_year ( dt date ) 2 return number as 3 begin 4 return extract ( year from dt ); 5 end get_year; 6 / Function GET_YEAR compiled SQL> SQL> set serveroutput off SQL> -- This disables the transpiler; it is disabled by default SQL> alter session set sql_transpiler = 'OFF'; Session altered. SQL> SQL> select count (*) from employees 2 where get_year ( hire_date ) = 2015; COUNT(*) ---------- 3 SQL> SQL> -- With the transpiler disabled, the predicate is the function call GET_YEAR SQL> select * 2 from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); PLAN_TABLE_OUTPUT ---------------------------------------------------------------------------- EXPLAINED SQL STATEMENT: ------------------------ select count (*) from employees where get_year ( hire_date ) = 2015 Plan hash value: 1756381138 ---------------------------------------- | Id | Operation | Name | ---------------------------------------- | 0 | SELECT STATEMENT | | | 1 | SORT AGGREGATE | | |* 2 | TABLE ACCESS FULL| EMPLOYEES | ---------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 2 - filter(\"GET_YEAR\"(\"HIRE_DATE\")=2015) 19 rows selected. SQL> SQL> -- Enable the automatic SQL transpiler SQL> alter session set sql_transpiler = 'ON'; Session altered. SQL> SQL> -- With the transpiler enabled, the expression in the function is extracted SQL> -- the predicate is now EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\")) SQL> -- => no SQL <> PL/SQL runtime context switch SQL> select count (*) from employees 2 where get_year ( hire_date ) = 2017; COUNT(*) ---------- 2 SQL> SQL> select * 2 from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); PLAN_TABLE_OUTPUT -------------------------------------------------------------------------- EXPLAINED SQL STATEMENT: ------------------------ select count (*) from employees where get_year ( hire_date ) = 2017 Plan hash value: 1756381138 ---------------------------------------- | Id | Operation | Name | ---------------------------------------- | 0 | SELECT STATEMENT | | | 1 | SORT AGGREGATE | | |* 2 | TABLE ACCESS FULL| EMPLOYEES | ---------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 2 - filter(EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\"))=2017) 19 rows selected. The conversion operation is transparent to users and can improve performance by reducing overhead accrued from switching between the SQL and PL/SQL runtime. Availability: All Offerings SQL Tuning Guide","title":"SQL Transpiler","component":"guide","version":"latest","name":"sql-transpiler","url":"/guide/latest/versions/23.2/plsql/sql-transpiler.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"145":{"id":145,"text":"Version 23.2 Categories SQL Annotations are a lightweight declarative facility for developers to centrally register usage properties for database schema objects. Annotations are stored in dictionary tables and available to any application looking to standardize behavior across common data in related applications. Annotations are not interpreted by the database in any way and are custom data properties for database metadata - including table columns, tables, and indexes. Applications can use annotations as additional property metadata for rendering user interfaces or customizing application logic. -- example 01: table-level annotation CREATE TABLE customers ( customer_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY, email_address VARCHAR2(255 CHAR) NOT NULL, full_name VARCHAR2(255 CHAR) NOT NULL ) ANNOTATIONS ( sensitivity 'high', departments 'sales, delivery', frontOffice ) / -- example 02: adding a column-level annotation ALTER TABLE customers MODIFY ( email_address ANNOTATIONS ( sensitivity 'highest' ) ) / -- example 03: table and column level annotations CREATE TABLE employees ( id NUMBER(5) ANNOTATIONS ( identity, display_as 'Employee ID', group_name 'Emp_Info'), name VARCHAR2(50) ANNOTATIONS ( display_as 'Employee Name', group_name 'Emp_Info'), salary NUMBER ANNOTATIONS ( display_as 'Employee Salary', UI_hidden) ) ANNOTATIONS ( display_as 'Employee Table' ) / -- example 04: query the dictionary for annotation usage SELECT object_name, object_type, column_name, annotation_name, annotation_value FROM user_annotations_usage ORDER BY object_name, column_name / Result SQL> -- example 01: table-level annotation SQL> CREATE TABLE customers ( 2 customer_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY, 3 email_address VARCHAR2(255 CHAR) NOT NULL, 4 full_name VARCHAR2(255 CHAR) NOT NULL 5 ) 6 ANNOTATIONS ( 7 sensitivity 'high', 8 departments 'sales, delivery', 9 frontOffice 10 ) 11 / Table CUSTOMERS created. SQL> -- example 02: adding a column-level annotation SQL> ALTER TABLE customers MODIFY ( 2 email_address ANNOTATIONS ( sensitivity 'highest' ) 3 ) 4 / Table CUSTOMERS altered. SQL> -- example 03: table and column level annotations SQL> CREATE TABLE employees 2 ( 3 id NUMBER(5) 4 ANNOTATIONS ( 5 identity, 6 display_as 'Employee ID', 7 group_name 'Emp_Info'), 8 name VARCHAR2(50) 9 ANNOTATIONS ( 10 display_as 'Employee Name', 11 group_name 'Emp_Info'), 12 salary NUMBER 13 ANNOTATIONS ( 14 display_as 'Employee Salary', UI_hidden) 15 ) 16 ANNOTATIONS ( 17 display_as 'Employee Table' 18 ) 19 / Table EMPLOYEES created. SQL> -- example 04: query the dictionary for annotation usage SQL> SELECT 2 object_name, 4 column_name, 5 annotation_name, 6 annotation_value 7 FROM 8 user_annotations_usage 9 ORDER BY 10 object_name, 11 column_name 12 / OBJECT_NAME COLUMN_NAME ANNOTATION_NAME ANNOTATION_VALUE ______________ ________________ __________________ ___________________ CUSTOMERS EMAIL_ADDRESS SENSITIVITY highest CUSTOMERS DEPARTMENTS sales, delivery CUSTOMERS FRONTOFFICE CUSTOMERS SENSITIVITY high EMPLOYEES ID IDENTITY EMPLOYEES ID GROUP_NAME Emp_Info EMPLOYEES ID DISPLAY_AS Employee ID EMPLOYEES NAME DISPLAY_AS Employee Name EMPLOYEES NAME GROUP_NAME Emp_Info EMPLOYEES SALARY DISPLAY_AS Employee Salary EMPLOYEES SALARY UI_HIDDEN EMPLOYEES DISPLAY_AS Employee Table 12 rows selected. Annotating the data model with metadata provides additional data integrity, consistency and data model documentation benefits. Your applications can store user-defined metadata for database objects and table columns that other applications or users can retrieve and use. Storing the metadata along with the data guarantees consistency and universal accessibility to any user or application that uses the data. Availability: All Offerings Database Concepts Guide Database Development Guide","title":"Annotations","component":"guide","version":"latest","name":"annotations","url":"/guide/latest/versions/23.2/sql/annotations.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"146":{"id":146,"text":"Version 23.2 Categories SQL The BOOLEAN data type enables the storage and processing of TRUE and FALSE values. Boolean values can be used as table column values or inside SQL query expressions. To declare a table column of type BOOLEAN, either use the BOOLEAN or BOOL keyword. This feature is part of the ISO SQL:1999 standard. -- Create a new table containing two boolean columns CREATE TABLE email_addresses ( user_id NUMBER NOT NULL, email VARCHAR2(255) NOT NULL, active BOOLEAN NOT NULL, primary BOOL NOT NULL ); -- Insert values into the table INSERT INTO email_addresses (user_id, active, primary, email) VALUES ( 1, true, true, 'jon.doe@example.com'), ( 2, true, true, 'jane.smith@gmail.com'), ( 2, false, false, 'jsmith@gmail.com'), ( 3, true, true, 'max.well@example.com'), ( 3, true, false, 'mwell@gmail.com'); COMMIT; -- Select all email addresses that are active SELECT email FROM email_addresses WHERE active; -- Select all email addresses that are active but not primary SELECT email FROM email_addresses WHERE active AND NOT primary; Result SQL> -- Create a new table containing two boolean columns SQL> CREATE TABLE email_addresses ( user_id NUMBER NOT NULL, email VARCHAR2(255) NOT NULL, active BOOLEAN NOT NULL, primary BOOL NOT NULL ); Table created. SQL> -- Insert values into the table SQL> INSERT INTO email_addresses (user_id, active, primary, email) VALUES ( 1, true, true, 'jon.doe@example.com'), ( 2, true, true, 'jane.smith@gmail.com'), ( 2, false, false, 'jsmith@gmail.com'), ( 3, true, true, 'max.well@example.com'), ( 3, true, false, 'mwell@gmail.com'); 5 rows created. SQL> COMMIT; Commit complete. SQL> -- Select all email addresses that are active SQL> SELECT email FROM email_addresses WHERE active; EMAIL -------------------------------------------------------------------------------- jon.doe@example.com jane.smith@gmail.com max.well@example.com mwell@gmail.com SQL> -- Select all email addresses that are active but not primary SQL> SELECT email FROM email_addresses WHERE active AND NOT primary; EMAIL -------------------------------------------------------------------------------- mwell@gmail.com The BOOLEAN data type standardizes the storage of \"Yes\" and \"No\" values. Availability: All Offerings Documentation Example","title":"Boolean data type","component":"guide","version":"latest","name":"boolean","url":"/guide/latest/versions/23.2/sql/boolean.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"147":{"id":147,"text":"Version 23.2 Categories SQL You can now pass DATE, TIMESTAMP, and INTERVAL values to the CEIL and FLOOR functions. These functions include an optional second argument to specify a rounding unit. You can also pass INTERVAL values to ROUND and TRUNC functions. with vals as ( select interval '+123-5' year(9) to month ymi, interval '+0 12:34:56' day to second dsi, to_date ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) dt, to_timestamp ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) ts ) select -- CEIL rounds up values ceil ( ymi ) as year_ceil, ceil ( dsi ) as day_ceil, ceil ( dt ) as dt_day_ceil, ceil ( ts ) as ts_day_ceil, -- FLOOR rounds down the datetime value to the units in the second paramter floor ( ymi, 'year' ) as ymi_year_floor, floor ( dsi, 'hh24' ) as dsi_hour_floor, floor ( dt, 'hh24' ) as dt_hour_floor, floor ( ts, 'hh24' ) as ts_hour_floor, -- ROUND now supports INTERVALs round ( dsi, 'mi' ) as dsi_minute_round from vals; Result SQL> with vals as ( 2 select 3 interval '+123-5' year(9) to month ymi, 4 interval '+0 12:34:56' day to second dsi, 5 to_date ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) dt, 6 to_timestamp ( '12-APR-2023 12:34:56', 'DD-MON-YYYY HH24:MI:SS' ) ts 7 ) 8 select 9 -- CEIL rounds up values 10 ceil ( ymi ) as year_ceil, 11 ceil ( dsi ) as day_ceil, 12 ceil ( dt ) as dt_day_ceil, 13 ceil ( ts ) as ts_day_ceil, 14 -- FLOOR rounds down the datetime value to the units in the second paramter 15 floor ( ymi, 'year' ) as ymi_year_floor, 16 floor ( dsi, 'hh24' ) as dsi_hour_floor, 17 floor ( dt, 'hh24' ) as dt_hour_floor, 18 floor ( ts, 'hh24' ) as ts_hour_floor, 19 -- ROUND now supports INTERVALs 20 round ( dsi, 'mi' ) as dsi_minute_round 21 from vals; YEAR_CE DAY_CEIL DT_DAY_CEIL TS_DAY_CEIL YMI_YEA DSI_HOUR_FLOOR DT_HOUR_FLOOR TS_HOUR_FLOOR DSI_MINUTE_ROUND ------- ------------------- ----------------- ----------------- ------- ------------------- ----------------- ----------------- ------------------- +124-00 +01 00:00:00.000000 13-APR-2023 00:00 13-APR-2023 00:00 +123-00 +00 12:00:00.000000 12-APR-2023 12:00 12-APR-2023 12:00 +00 12:35:00.000000 These functions make it easy to find the upper and lower bounds for date and time values for a specified unit. Availability: All Offerings CEIL, FLOOR, ROUND, and TRUNC Date Functions Documentation","title":"CEIL, FLOOR, and ROUND for datetime data types","component":"guide","version":"latest","name":"ceil-floor-round-for-datetime-types","url":"/guide/latest/versions/23.2/sql/ceil-floor-round-for-datetime-types.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"148":{"id":148,"text":"Version 23.2 Categories SQL You can specify a default value when updating a column to NULL. The database assigns the default value to the column instead of NULL. create table default_values ( id integer, c1 number default extract ( second from systimestamp ), c2 number default on null extract ( second from systimestamp ), c3 number default on null for insert only extract ( second from systimestamp ), c4 number default on null for insert and update extract ( second from systimestamp ) ); -- For the columns with DEFAULT ON NULL, the database replaces NULL with the timestamp value insert into default_values values ( 1, null, null, null, null ); select * from default_values; -- The standard DEFAULT clause has no impact on UPDATEs, so C1 remains NULL update default_values set c1 = null; -- DEFAULT ON NULL adds an implicit NOT NULL constraint to the column -- The default only applies on insert, so this raises an ORA-01407 error update default_values set c2 = null; -- DEFAULT ON NULL FOR INSERT ONLY is equivalent to DEFAULT ON NULL -- So this also raises an ORA-01407 error update default_values set c3 = null; -- C4 is DEFAULT ON NULL FOR INSERT AND UPDATE -- So the database replaces NULL with its default value update default_values set c4 = null; -- The value of C4 has changed; all other columns retain their INSERT value select * from default_values; Result SQL> create table default_values ( 2 id integer, 3 c1 number default extract ( second from systimestamp ), 4 c2 number default on null extract ( second from systimestamp ), 5 c3 number default on null for insert only extract ( second from systimestamp ), 6 c4 number default on null for insert and update extract ( second from systimestamp ) 7 ); Table created. SQL> SQL> -- For the columns with DEFAULT ON NULL, the database replaces NULL with the timestamp value SQL> insert into default_values 2 values ( 1, null, null, null, null ); 1 row created. SQL> SQL> select * from default_values; ID C1 C2 C3 C4 ---------- ---------- ---------- ---------- ---------- 1 1.585189 1.585189 1.585189 SQL> SQL> -- The standard DEFAULT clause has no impact on UPDATEs, so C1 remains NULL SQL> update default_values 2 set c1 = null; 1 row updated. SQL> SQL> -- DEFAULT ON NULL adds an implicit NOT NULL constraint to the column SQL> -- The default only applies on insert, so this raises an ORA-01407 error SQL> update default_values 2 set c2 = null; set c2 = null * ERROR at line 2: ORA-01407: cannot update (\"CHRIS\".\"DEFAULT_VALUES\".\"C2\") to NULL SQL> SQL> -- DEFAULT ON NULL FOR INSERT ONLY is equivalent to DEFAULT ON NULL SQL> -- So this also raises an ORA-01407 error SQL> update default_values 2 set c3 = null; set c3 = null * ERROR at line 2: ORA-01407: cannot update (\"CHRIS\".\"DEFAULT_VALUES\".\"C3\") to NULL SQL> SQL> -- C4 is DEFAULT ON NULL FOR INSERT AND UPDATE SQL> -- So the database replaces NULL with its default value SQL> update default_values 2 set c4 = null; 1 row updated. SQL> SQL> -- The value of C4 has changed; all other columns retain their INSERT value SQL> select * from default_values; ID C1 C2 C3 C4 ---------- ---------- ---------- ---------- ---------- 1 1.585189 1.585189 1.608401 Providing a default value for NULL on UPDATE simplifies code to map NULL to a non NULL value when changing data. Availability: All Offerings CREATE TABLE Documentation","title":"Default ON NULL for UPDATE statements","component":"guide","version":"latest","name":"default-on-null-update","url":"/guide/latest/versions/23.2/sql/default-on-null-update.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"149":{"id":149,"text":"Version 23.2 Categories SQL The FUZZY_MATCH operator enables you to compare strings for similarity using algorithms such as Jaro-Winkler and Levenshtein distance. /* Compare the team names to \"Champions City\" with the different fuzzy matching algorithms */ with teams as ( select * from ( values ( 'Champions United' ), ( 'Runner-up City' ), ( 'Midtable Town' ), ( 'Underdogs United' ), ( 'Upstart FC' ), ( 'Relegated Athletic' ) ) t ( team_name ) ), match_value as ( select 'Champions City' match_team ) select team_name, match_team, fuzzy_match ( levenshtein, team_name, match_team ) as levenshtein, fuzzy_match ( jaro_winkler, team_name, match_team ) as jaro_winkler, fuzzy_match ( bigram, team_name, match_team ) as bigram, fuzzy_match ( trigram, team_name, match_team ) as trigram, fuzzy_match ( whole_word_match, team_name, match_team ) as wwm, fuzzy_match ( longest_common_substring, team_name, match_team ) as lcs from teams cross join match_value; /* Find the team names that match \"Champions City\" with Jaro-Winkler score > 90 */ with teams as ( select * from ( values ( 'Champions United' ), ( 'Runner-up City' ), ( 'Midtable Town' ), ( 'Underdogs United' ), ( 'Upstart FC' ), ( 'Relegated Athletic' ) ) t ( team_name ) ), match_value as ( select 'Champions City' match_team ) select team_name, match_team from teams join match_value on fuzzy_match ( jaro_winkler, team_name, match_team ) > 90; Result SQL> /* Compare the team names to \"Champions City\" for the different fuzzy matching algorithms */ SQL> with teams as ( 2 select * from ( 3 values ( 'Champions United' ), 4 ( 'Runner-up City' ), 5 ( 'Midtable Town' ), 6 ( 'Underdogs United' ), 7 ( 'Upstart FC' ), 8 ( 'Relegated Athletic' ) 9 ) t ( team_name ) 10 ), match_value as ( 11 select 'Champions City' match_team 12 ) 13 select team_name, match_team, 14 fuzzy_match ( levenshtein, team_name, match_team ) as levenshtein, 15 fuzzy_match ( jaro_winkler, team_name, match_team ) as jaro_winkler, 16 fuzzy_match ( bigram, team_name, match_team ) as bigram, 17 fuzzy_match ( trigram, team_name, match_team ) as trigram, 18 fuzzy_match ( whole_word_match, team_name, match_team ) as wwm, 19 fuzzy_match ( longest_common_substring, team_name, match_team ) as lcs 20 from teams 21 cross join match_value; TEAM_NAME MATCH_TEAM LEVENSHTEIN JARO_WINKLER BIGRAM TRIGRAM WWM LCS ------------------ -------------- ----------- ------------ ---------- ---------- ---------- ---------- Champions United Champions City 75 92 66 57 50 62 Runner-up City Champions City 36 57 30 25 50 35 Midtable Town Champions City 8 44 0 0 0 7 Underdogs United Champions City 32 49 13 0 0 12 Upstart FC Champions City 8 56 0 0 0 7 Relegated Athletic Champions City 12 41 0 0 0 5 6 rows selected. SQL> SQL> /* Find the team names that match \"Champions City\" with Jaro-Winkler score > 90 */ SQL> with teams as ( 2 select * from ( 3 values ( 'Champions United' ), 4 ( 'Runner-up City' ), 5 ( 'Midtable Town' ), 6 ( 'Underdogs United' ), 7 ( 'Upstart FC' ), 8 ( 'Relegated Athletic' ) 9 ) t ( team_name ) 10 ), match_value as ( 11 select 'Champions City' match_team 12 ) 13 select team_name, match_team 14 from teams 15 join match_value 16 on fuzzy_match ( jaro_winkler, team_name, match_team ) > 90; TEAM_NAME MATCH_TEAM ------------------ -------------- Champions United Champions City This operator makes it easier to find similar strings with SQL. Availability: All Offerings FUZZY_MATCH Documentation","title":"FUZZY_MATCH operator","component":"guide","version":"latest","name":"fuzzy-match-operator","url":"/guide/latest/versions/23.2/sql/fuzzy-match-operator.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"150":{"id":150,"text":"Version 23.2 Categories SQL The GROUP BY column alias feature is a shorthand for not having to repeat lengthy expressions from the SELECT clause in the GROUP BY and/or HAVING clause but instead use the defined column alias. The GROUP BY position feature is a similar shorthand and great for ad-hoc queries by simply referring to the expression position in the SELECT clause. Caution is required when using this feature, however, as it can lead novices to wrong conclusions and unexpected results as they may be surprised by or not aware of that data is being grouped differently when the position of the expression in the SELECT clause changes. This is particularly important for GROUP BY ROLLUP() and other super-aggregate grouping functions, hence this functionality is guarded behind a session parameter group_by_position_enabled. Note the GROUP BY combined_name which refers to a column alias in the SELECT. SELECT CONCAT(r.name, ': ', co.name) AS combined_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY combined_name ORDER BY combined_name; Result SQL> SELECT CONCAT(r.name, ': ', co.name) AS combined_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY combined_name ORDER BY combined_name; COMBINED_NAME POPULATION_M ------------------------------ ------------ Oceania: Australia 23.47 Oceania: Fiji .926 Oceania: Kiribati .109 Oceania: Marshall Islands .076 Oceania: Micronesia .104 Oceania: Nauru .01 Oceania: New Zealand 4.546 Oceania: Palau .022 Oceania: Papua New Guinea 7.027 Oceania: Samoa .201 Oceania: Solomon Islands .66 Oceania: Tonga .106 Oceania: Tuvalu .011 Oceania: Vanuatu .288 South America: Argentina 44.694 South America: Bolivia 11.306 South America: Brazil 208.847 South America: Chile 17.925 South America: Colombia 48.169 South America: Ecuador 16.291 South America: Guyana .741 South America: Paraguay 7.026 South America: Peru 31.331 South America: Suriname .598 South America: Uruguay 3.369 South America: Venezuela 31.689 26 rows selected. Note the GROUP BY ROLLUP (1, 2) which refers to the first and second column in the SELECT. -- Enable the GROUP_BY_POSITION parameter for the session ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; SELECT r.name AS region_name, co.name AS country_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; Result SQL> -- Enable the GROUP_BY_POSITION parameter for the session SQL> ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; Session altered. SQL> SELECT r.name AS region_name, co.name AS country_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; REGION_NAME COUNTRY_NAME POPULATION_M ------------- ---------------- ------------ Oceania Australia 23.47 Oceania Fiji .926 Oceania Kiribati .109 Oceania Marshall Islands .076 Oceania Micronesia .104 Oceania Nauru .01 Oceania New Zealand 4.546 Oceania Palau .022 Oceania Papua New Guinea 7.027 Oceania Samoa .201 Oceania Solomon Islands .66 Oceania Tonga .106 Oceania Tuvalu .011 Oceania Vanuatu .288 Oceania 37.556 South America Argentina 44.694 South America Bolivia 11.306 South America Brazil 208.847 South America Chile 17.925 South America Colombia 48.169 South America Ecuador 16.291 South America Guyana .741 South America Paraguay 7.026 South America Peru 31.331 South America Suriname .598 South America Uruguay 3.369 South America Venezuela 31.689 South America 421.986 459.542 29 rows selected. Let’s assume that the report was supposed to list countries first and the region next to it instead of the current region first and the country next to it. If you change the columns in the SELECT but forget to amend the GROUP BY ROLLUP clause as well, because you are grouping by column position in the SELECT list, your results will be grouped differently and be no longer be the same. -- Enable the GROUP_BY_POSITION parameter for the session (only needed once per session) ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; Result SQL> -- Enable the GROUP_BY_POSITION parameter for the session (only needed once per session) SQL> ALTER SESSION SET GROUP_BY_POSITION_ENABLED=TRUE; Session altered. SQL> SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (1, 2) ORDER BY region_name; COUNTRY_NAME REGION_NAME POPULATION_M ---------------- ------------- ------------ Samoa Oceania .201 Fiji Oceania .926 Micronesia Oceania .104 Kiribati Oceania .109 Marshall Islands Oceania .076 Nauru Oceania .01 New Zealand Oceania 4.546 Papua New Guinea Oceania 7.027 Palau Oceania .022 Solomon Islands Oceania .66 Tonga Oceania .106 Tuvalu Oceania .011 Australia Oceania 23.47 Vanuatu Oceania .288 Argentina South America 44.694 Bolivia South America 11.306 Brazil South America 208.847 Chile South America 17.925 Colombia South America 48.169 Venezuela South America 31.689 Guyana South America .741 Peru South America 31.331 Paraguay South America 7.026 Suriname South America .598 Uruguay South America 3.369 Ecuador South America 16.291 Venezuela 31.689 Uruguay 3.369 Suriname .598 Paraguay 7.026 Peru 31.331 Guyana .741 Ecuador 16.291 Colombia 48.169 Chile 17.925 Brazil 208.847 Bolivia 11.306 Argentina 44.694 Samoa .201 Vanuatu .288 Tuvalu .011 Tonga .106 Solomon Islands .66 Palau .022 Papua New Guinea 7.027 New Zealand 4.546 Nauru .01 Marshall Islands .076 Kiribati .109 Micronesia .104 Fiji .926 459.542 Australia 23.47 53 rows selected. In comparison, this does not happen when using the column alias: SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (region_name, country_name) ORDER BY region_name; Result SQL> SELECT co.name AS country_name, r.name AS region_name, SUM(co.population/1000/1000) AS population_m FROM regions r, countries co WHERE r.region_id = co.region_id AND r.name IN ('Oceania', 'South America') GROUP BY ROLLUP (region_name, country_name) ORDER BY region_name; COUNTRY_NAME REGION_NAME POPULATION_M ---------------- ------------- ------------ Australia Oceania 23.47 Fiji Oceania .926 Kiribati Oceania .109 Marshall Islands Oceania .076 Micronesia Oceania .104 Nauru Oceania .01 New Zealand Oceania 4.546 Palau Oceania .022 Papua New Guinea Oceania 7.027 Samoa Oceania .201 Solomon Islands Oceania .66 Tonga Oceania .106 Tuvalu Oceania .011 Vanuatu Oceania .288 Oceania 37.556 Argentina South America 44.694 Bolivia South America 11.306 Brazil South America 208.847 Chile South America 17.925 Colombia South America 48.169 Ecuador South America 16.291 Guyana South America .741 Paraguay South America 7.026 Peru South America 31.331 Suriname South America .598 Uruguay South America 3.369 Venezuela South America 31.689 South America 421.986 459.542 29 rows selected. GROUP BY column alias and position are both convenient shorthands for writing concise ad-hoc SQL statements. Extra caution should be given when using GROUP BY column position as changing the column position in the SELECT part can have direct influence over the grouping of the data. Availability: All Offerings Documentation","title":"GROUP BY column alias or position","component":"guide","version":"latest","name":"group-by-alias-position","url":"/guide/latest/versions/23.2/sql/group-by-alias-position.html","titles":[{"text":"GROUP BY column alias","hash":"_group_by_column_alias","id":1},{"text":"GROUP BY column position","hash":"_group_by_column_position","id":2},{"text":"Caution","hash":"_caution","id":3},{"text":"Benefits","hash":"_benefits","id":4},{"text":"Further information","hash":"_further_information","id":5}]},"151":{"id":151,"text":"Version 23.2 Categories SQL The IF [NOT] EXISTS syntax can be used to ignore errors when dropping objects that do not exist or create objects that already exist. Objects can now be dropped via DROP IF EXISTS Objects can now be created via CREATE IF NOT EXISTS -- Drop table if left over from a previous incomplete test run -- (this will produce an error) DROP TABLE my_test; -- Recreate the table in a clean state CREATE TABLE my_test ( id NUMBER NOT NULL PRIMARY KEY, name VARCHAR2(255), created_tms DATE DEFAULT SYSDATE NOT NULL ); -- Execute INSERT INTO tests for default value INSERT INTO my_test (id, name) VALUES (1, 'Test'); -- Clean up test DROP TABLE my_test; -- -- Second test run -- -- Drop table if left over from a previous incomplete test run -- (the table has already been dropped in a previous test run, -- however, due to using IF EXISTS, no error will be raised) DROP TABLE IF EXISTS my_test; -- Recreate the table in a clean state CREATE TABLE my_test ( id NUMBER NOT NULL PRIMARY KEY, name VARCHAR2(255), created_tms DATE DEFAULT SYSDATE NOT NULL ); -- Execute INSERT INTO tests for default value of `created_tms` INSERT INTO my_test (id, name) VALUES (1, 'Test'); -- Clean up test DROP TABLE my_test; Result SQL> -- Drop table if left over from a previous incomplete test run SQL> -- (this will produce an error) SQL> DROP TABLE my_test; Error starting at line : 1 in command - DROP TABLE my_test Error report - ORA-00942: table or view does not exist SQL> SQL> -- Recreate the table in a clean state SQL> CREATE TABLE my_test 2 ( 3 id NUMBER NOT NULL PRIMARY KEY, 4 name VARCHAR2(255), 5 created_tms DATE DEFAULT SYSDATE NOT NULL 6 ); Table MY_TEST created. SQL> SQL> -- Execute INSERT INTO tests for default value of `created_tms` SQL> INSERT INTO my_test (id, name) VALUES (1, 'Test'); 1 row inserted. SQL> SQL> -- Clean up test SQL> DROP TABLE my_test; Table MY_TEST dropped. SQL> SQL> -- 2* -- Second test run SQL> -- 2* SQL> -- Drop table if left over from a previous incomplete test run SQL> -- (the table has already been dropped in a previous test run, SQL> -- however, due to using IF EXISTS, no error will be raised) SQL> DROP TABLE IF EXISTS my_test; Table MY_TEST dropped. SQL> SQL> -- Recreate the table in a clean state SQL> CREATE TABLE my_test 2 ( 3 id NUMBER NOT NULL PRIMARY KEY, 4 name VARCHAR2(255), 5 created_tms DATE DEFAULT SYSDATE NOT NULL 6 ); Table MY_TEST created. SQL> SQL> -- Execute INSERT INTO tests for default value SQL> INSERT INTO my_test (id, name) VALUES (1, 'Test'); 1 row inserted. SQL> SQL> -- Clean up test SQL> DROP TABLE my_test; Table MY_TEST dropped. Ignoring the error when dropping a non existing object or creating an object that already exists can be very useful especially in testing scripts that always want to ensure a clean state at the beginning of tests but not produce false positives by e.g. receiving an error when dropping an object that does not exist. Availability: All Offerings DROP TABLE documentation","title":"IF [NOT] EXISTS","component":"guide","version":"latest","name":"if-not-exists","url":"/guide/latest/versions/23.2/sql/if-not-exists.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"152":{"id":152,"text":"SQL is the set-based, high-level declarative (4GL) computer language with which all programs and users access data in a relational database. SQL unifies tasks such as the following in one consistent language: Creating, replacing, altering, and dropping objects Inserting, updating, and deleting table rows Querying and analyzing data Controlling access to the database and its objects Guaranteeing database consistency and integrity SQL became a standard of the American National Standards Institute (ANSI) in 1986 and of the International Organization for Standardization (ISO) in 1987. Oracle SQL includes many extensions to the ANSI/ISO standard SQL language, and Oracle Database tools and applications provide additional statements. For more information about SQL see SQL Language Reference.","title":"SQL","component":"guide","version":"latest","name":"index","url":"/guide/latest/versions/23.2/sql/index.html","titles":[]},"153":{"id":153,"text":"Version 23.2 Categories SQL JSON offers the flexibility of schemaless application design. Sometimes however, you might want some JSON data to conform to a schema. You might want to ensure that all data stored in a given column has the structure defined by a schema, or you might want to check whether a given JSON document has such a structure, before processing it. A JSON schema is a JSON document that respects the JSON Schema standard, which is a Request For Comments (RFC) draft. JSON schemas are in turn used to validate other JSON documents. Refer to the JSON schema website for more details. A JSON schema specifies the structure and the types of allowed values of JSON data that it considers valid. This example demonstrates how to query data in a relational table containing a JSON column and match it against a JSON schema. The following JSON schema ensures that only objects can be stored in the JSON column, containing both a firstName and lastName field with a minimum length of 1 character each. The numeric salary field is optional, however if defined, the salary must be greater than 10000. { \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"lastName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\", \"lastName\" ] } CREATE TABLE json_demo( id NUMBER GENERATED ALWAYS AS IDENTITY, CONSTRAINT pk_json_demo PRIMARY KEY(id), jcol JSON NOT NULL ); -- will result in an error: salary too low INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\", \"salary\": 9999 }') ); -- will result in an error: required lastName not present INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"salary\": 10001 }') ); -- will result in an error: lastName not spelled correctly INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"last_name\": \"King\", \"salary\": 10001 }') ); -- this record is fine INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\" }') ); -- fetch valid data SELECT jcol FROM json_demo WHERE jcol IS JSON VALIDATE '{ \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"lastName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\", \"lastName\" ] }'; Result SQL> CREATE TABLE json_demo( 2 id NUMBER 3 GENERATED ALWAYS AS IDENTITY, 4 CONSTRAINT pk_json_demo PRIMARY KEY(id), 5 jcol JSON NOT NULL 6 ); Table JSON_DEMO created. SQL> -- will result in an error: salary too low SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\", \"salary\": 9999 }') 5 ); 1 row inserted. SQL> -- will result in an error: required lastName not present SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"salary\": 10001 }') 5 ); 1 row inserted. SQL> -- will result in an error: lastName not spelled correctly SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"last_name\": \"King\", \"salary\": 10001 }') 5 ); 1 row inserted. SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Steven\", \"lastName\": \"King\" }') 5 ); 1 row inserted. SQL> -- fetch valid data SQL> SELECT 2 jcol 3 FROM 4 json_demo 5 WHERE 6 jcol IS JSON VALIDATE 7 '{ 8 \"type\": \"object\", 9 \"properties\": { 10 \"firstName\": { 11 \"type\": \"string\", 12 \"minLength\": 1 13 }, 14 \"lastName\": { 15 \"type\": \"string\", 16 \"minLength\": 1 17 }, 18 \"salary\": { 19 \"type\": \"number\", 20 \"minimum\": 10000 21 } 22 }, 23 \"required\": [ 24 \"firstName\", 25 \"lastName\" 26 ] 27 }'; JCOL ___________________________________________ {\"firstName\":\"Steven\",\"lastName\":\"King\"} JSON is a popular format for data exchange, however with flexibility comes the risk of working with incomplete or wrong records. JSON schema allows developers to ensure better data quality. Using the IS JSON VALIDATE clause allows developers to vet JSON data in a column using a JSON schema. The above SELECT statement is the perfect partner for an INSERT INTO table_name SELECT …​ IS JSON VALIDATE …​ Availability: All Offerings Documentation","title":"JSON Schema: validate rows in a table","component":"guide","version":"latest","name":"json-schema-validate-rows","url":"/guide/latest/versions/23.2/sql/json-schema-validate-rows.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"154":{"id":154,"text":"Version 23.2 Categories SQL JSON offers the flexibility of schemaless application design. Sometimes however, you might want some JSON data to conform to a schema. You might want to ensure that all data stored in a given column has the structure defined by a schema, or you might want to check whether a given JSON document has such a structure, before processing it. A JSON schema is a JSON document that respects the JSON Schema standard, which is a Request For Comments (RFC) draft. JSON schemas are in turn used to validate other JSON documents. Refer to the JSON schema website for more details. A JSON schema specifies the structure and the types of allowed values of JSON data that it considers valid. This example demonstrates how to create a JSON schema validation report. The following JSON schema ensures that only objects can be stored in the JSON column, containing at least a firstName field with a minimum length of 1 character. The numeric salary field is optional, however if defined, the salary must be greater than 10000. { \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\" ] } -- note the absence of any schema validation rules in the -- create table statement CREATE TABLE json_demo( id NUMBER GENERATED ALWAYS AS IDENTITY, CONSTRAINT pk_json_demo PRIMARY KEY(id), jcol JSON ); -- insert a few rows into the table INSERT INTO json_demo ( jcol ) values ( JSON('{ \"contents\": \"does not match JSON schema\" }') ); INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Martin\" }' ) ); INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Tom\", \"salary\": 9999 }') ); INSERT INTO json_demo ( jcol ) values ( JSON('{ \"firstName\": \"Emily\", \"salary\": 15000 }') ); COMMIT; -- validate the contents of the table DECLARE l_JSON_schema JSON := JSON( '{ \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\" ] }' ); l_validation_report JSON; BEGIN FOR i IN (select id, jcol from json_demo) loop SELECT DBMS_JSON_SCHEMA.validate_report( json_data => i.jcol, json_schema => l_JSON_schema ) INTO l_validation_report FROM json_demo WHERE id = i.id; DBMS_OUTPUT.put_line('validating row with ID ' || i.id); DBMS_OUTPUT.put_line( json_serialize(l_validation_report pretty) ); END LOOP; END; / -- extracting portions of the error message WITH validation AS ( SELECT id, DBMS_JSON_SCHEMA.validate_report( json_data => jcol, json_schema => JSON( '{ \"type\": \"object\", \"properties\": { \"firstName\": { \"type\": \"string\", \"minLength\": 1 }, \"salary\": { \"type\": \"number\", \"minimum\": 10000 } }, \"required\": [ \"firstName\" ] }' ) ) AS report FROM json_demo ) SELECT json_serialize( v.report.errors[*].error pretty ) FROM validation v WHERE v.id = 1 / Result SQL> -- note the absence of any schema validation rules in the SQL> -- create table statement SQL> CREATE TABLE json_demo( 2 id NUMBER 3 GENERATED ALWAYS AS IDENTITY, 4 CONSTRAINT pk_json_demo PRIMARY KEY(id), 5 jcol JSON 6 ); Table created. SQL> SQL> -- insert a few rows into the table SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"contents\": \"does not match JSON schema\" }') 5 ); 1 row created. SQL> SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Martin\" }' ) 5 ); 1 row created. SQL> SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Tom\", \"salary\": 9999 }') 5 ); 1 row created. SQL> SQL> INSERT INTO json_demo ( 2 jcol 3 ) values ( 4 JSON('{ \"firstName\": \"Emily\", \"salary\": 15000 }') 5 ); 1 row created. SQL> SQL> COMMIT; Commit complete. SQL> SQL> -- validate the contents of the table SQL> DECLARE 2 l_JSON_schema JSON := JSON( 3 '{ 4 \"type\": \"object\", 5 \"properties\": { 6 \"firstName\": { 7 \"type\": \"string\", 8 \"minLength\": 1 9 }, 10 \"salary\": { 11 \"type\": \"number\", 12 \"minimum\": 10000 13 } 14 }, 15 \"required\": [ 16 \"firstName\" 17 ] 18 }' 19 ); 20 l_validation_report JSON; 21 BEGIN 22 FOR i IN (select id, jcol from json_demo) loop 23 SELECT 24 DBMS_JSON_SCHEMA.validate_report( 25 json_data => i.jcol, 26 json_schema => l_JSON_schema 27 ) 28 INTO 29 l_validation_report 30 FROM 31 json_demo 32 WHERE 33 id = i.id; 34 DBMS_OUTPUT.put_line('validating row with ID ' || i.id); 35 DBMS_OUTPUT.put_line( 36 json_serialize(l_validation_report pretty) 37 ); 38 END LOOP; 39 END; 40 / validating row with ID 1 { \"valid\" : false, \"errors\" : [ { \"schemaPath\" : \"$\", \"instancePath\" : \"$\", \"code\" : \"JZN-00501\", \"error\" : \"JSON schema validation failed\" }, { \"schemaPath\" : \"$.required\", \"instancePath\" : \"$\", \"code\" : \"JZN-00515\", \"error\" : \"required properties not found: 'firstName'\" } ] } validating row with ID 2 { \"valid\" : true, \"errors\" : [ ] } validating row with ID 3 { \"valid\" : false, \"errors\" : [ { \"schemaPath\" : \"$\", \"instancePath\" : \"$\", \"code\" : \"JZN-00501\", \"error\" : \"JSON schema validation failed\" }, { \"schemaPath\" : \"$.properties\", \"instancePath\" : \"$\", \"code\" : \"JZN-00514\", \"error\" : \"invalid properties: 'salary'\" }, { \"schemaPath\" : \"$.properties.salary.minimum\", \"instancePath\" : \"$.salary\", \"code\" : \"JZN-00507\", \"error\" : \"value less than minimum value, actual: 9999, expected: 10000\" } ] } validating row with ID 4 { \"valid\" : true, \"errors\" : [ ] } PL/SQL procedure successfully completed. SQL> SQL> -- extracting portions of the error message SQL> WITH validation AS ( 2 SELECT 3 id, 4 DBMS_JSON_SCHEMA.validate_report( 5 json_data => jcol, 6 json_schema => JSON( 7 '{ 8 \"type\": \"object\", 9 \"properties\": { 10 \"firstName\": { 11 \"type\": \"string\", 12 \"minLength\": 1 13 }, 14 \"salary\": { 15 \"type\": \"number\", 16 \"minimum\": 10000 17 } 18 }, 19 \"required\": [ 20 \"firstName\" 21 ] 22 }' 23 ) 24 ) AS report 25 FROM 26 json_demo 27 ) 28 SELECT 29 json_serialize( 30 v.report.errors[*].error 31 pretty 32 ) errors 33 FROM 34 validation v 35 WHERE 36 v.id = 1 37 / ERRORS ----------------------------------------------------------------- [ \"JSON schema validation failed\", \"required properties not found: 'firstName'\" ] JSON is a popular format for data exchange, however with flexibility comes the risk of importing incomplete or otherwise incorrect records. JSON schema allows developers to ensure better data quality. Using validation reports contents of existing JSON columns can be checked against a schema. The validation function returns JSON, which can be parsed to only return specific parts of the validation report. Availability: All Offerings Documentation","title":"JSON Schema: check constraint","component":"guide","version":"latest","name":"json-schema-validation-report","url":"/guide/latest/versions/23.2/sql/json-schema-validation-report.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"155":{"id":155,"text":"Version 23.2 Categories SQL The PHONIC_ENCODE operator indexes words according to their English pronunciation using the metaphone or double metaphone algorithms. /* Get the phonic encoding of the team names The third parameter is the number of characters in the encoded string */ with teams as ( select * from ( values ( 'Champions United' ), ( 'Runner-up City' ), ( 'Midtable Town' ), ( 'Underdogs United' ), ( 'Upstart FC' ), ( 'Relegated Athletic' ) ) t ( team_name ) ) select team_name, phonic_encode ( double_metaphone, team_name, 1 ) as team_name_dm1, phonic_encode ( double_metaphone_alt, team_name, 1 ) as team_name_dm1_alt, phonic_encode ( double_metaphone, team_name, 6 ) as team_name_dm6, phonic_encode ( double_metaphone_alt, team_name, 6 ) as team_name_dm6_alt, phonic_encode ( double_metaphone, team_name, 12 ) as team_name_dm12, phonic_encode ( double_metaphone_alt, team_name, 12 ) as team_name_dm12_alt from teams; Result SQL> /* Get the phonic encoding of the team names SQL> The third parameter is the number of characters in the encoded string */ SQL> with teams as ( 2 select * from ( 3 values ( 'Champions United' ), 4 ( 'Runner-up City' ), 5 ( 'Midtable Town' ), 6 ( 'Underdogs United' ), 7 ( 'Upstart FC' ), 8 ( 'Relegated Athletic' ) 9 ) t ( team_name ) 10 ) 11 select team_name, 12 phonic_encode ( double_metaphone, team_name, 1 ) as team_name_dm1, 13 phonic_encode ( double_metaphone_alt, team_name, 1 ) as team_name_dm1_alt, 14 phonic_encode ( double_metaphone, team_name, 6 ) as team_name_dm6, 15 phonic_encode ( double_metaphone_alt, team_name, 6 ) as team_name_dm6_alt, 16 phonic_encode ( double_metaphone, team_name, 12 ) as team_name_dm12, 17 phonic_encode ( double_metaphone_alt, team_name, 12 ) as team_name_dm12_alt 18 from teams; TEAM_NAME TEAM_NAME_DM1 TEAM_NAME_DM1_ALT TEAM_NAME_DM6 TEAM_NAME_DM6_ALT TEAM_NAME_DM12 TEAM_NAME_DM12_ALT ------------------ ------------------------- ------------------------- ------------------------- ------------------------- ------------------------- ------------------------- Champions United X X XMPNSN XMPNSN XMPNSNTT XMPNSNTT Runner-up City R R RNRPST RNRPST RNRPST RNRPST Midtable Town M M MTPLTN MTPLTN MTPLTN MTPLTN Underdogs United A A ANTRTK ANTRTK ANTRTKSNTT ANTRTKSNTT Upstart FC A A APSTRT APSTRT APSTRTFK APSTRTFK Relegated Athletic R R RLKTT0 RLKTTT RLKTT0LTK RLKTTTLTK 6 rows selected. The PHONIC_ENCODE operator enables you to run data quality queries, comparing text based on how it’s spoken. Availability: All Offerings PHONIC_ENCODE Documentation","title":"PHONIC_ENCODE operator","component":"guide","version":"latest","name":"phonic-encode-operator","url":"/guide/latest/versions/23.2/sql/phonic-encode-operator.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"156":{"id":156,"text":"Version 23.2 Categories SQL The RETURNING INTO clause for INSERT, UPDATE, and DELETE statements are enhanced to report old and new values affected by the respective statement. This allows developers to use the same logic for each of these Data Manipulation Language (DML) types to obtain values pre- and post-statement execution. The following rules apply: UPDATE statements report old and new values. INSERT statements only report new values. DELETE statements only report old values. -- example 01: returning old and new values for a single-row update var l_old_salary number var l_new_salary number UPDATE employees SET salary = salary * 1.07 WHERE employee_id = 103 RETURNING old salary, new salary INTO :l_old_salary, :l_new_salary; SELECT :l_old_salary, :l_new_salary; ROLLBACK; -- example 02: returning old and new values for a multi-row update -- and storing the values in an audit table DROP TABLE IF EXISTS employees_history; CREATE TABLE employees_history ( employee_id NUMBER(6) NOT NULL, old_salary NUMBER(8, 2) NOT NULL, new_salary NUMBER(8, 2) NOT NULL, changed_on DATE NOT NULL ); DECLARE TYPE t_change_rec IS RECORD ( old_salary employees_history.old_salary%TYPE, new_salary employees_history.new_salary%TYPE, employee_id employees_history.employee_id%TYPE ); TYPE t_change_details IS TABLE OF t_change_rec; l_changes t_change_details; BEGIN UPDATE employees e SET salary = salary * 1.07 FROM departments d WHERE d.department_id = e.department_id AND d.department_name = 'IT' RETURNING OLD salary, NEW salary, employee_id BULK COLLECT INTO l_changes; FORALL i IN 1..l_changes.count INSERT INTO employees_history ( employee_id, old_salary, new_salary, changed_on ) VALUES ( l_changes(i).employee_id, l_changes(i).old_salary, l_changes(i).new_salary, sysdate ); END; / SELECT employee_id, old_salary, new_salary, changed_on FROM employees_history; ROLLBACK; -- example 03: no \"old\" value returned by INSERT statements DROP TABLE IF EXISTS insert_demo; CREATE TABLE insert_demo ( id NUMBER GENERATED ALWAYS AS IDENTITY, vc VARCHAR2(100) NOT NULL, d DATE DEFAULT sysdate NOT NULL, CONSTRAINT pk_insert_demo PRIMARY KEY ( id ) ) / var l_old_id number var l_new_id number INSERT INTO insert_demo ( vc ) VALUES ( 'insert demo' ) RETURNING old id, new id INTO :l_old_id, :l_new_id; SELECT :l_old_id, :l_new_id; -- example 04: no \"new\" value returning by DELETE statements DELETE insert_demo WHERE id = :l_new_id RETURNING old id, new id INTO :l_old_id, :l_new_id; SELECT :l_old_id, :l_new_id; ROLLBACK; Result SQL> -- example 01: returning old and new values for a single-row update SQL> var l_old_salary number SQL> var l_new_salary number SQL> UPDATE employees 2 SET 3 salary = salary * 1.07 4 WHERE 5 employee_id = 103 6 RETURNING 7 old salary, new salary 8 INTO 9 :l_old_salary, :l_new_salary; 1 row updated. SQL> SELECT 2 :l_old_salary, 3 :l_new_salary; :L_OLD_SALARY :L_NEW_SALARY ------------- ------------- 9000 9630 SQL> ROLLBACK; Rollback complete. SQL> -- example 02: returning old and new values for a multi-row update SQL> -- and storing the values in an audit table SQL> DROP TABLE IF EXISTS employees_history; Table dropped. SQL> CREATE TABLE employees_history ( 2 employee_id NUMBER(6) NOT NULL, 3 old_salary NUMBER(8, 2) NOT NULL, 4 new_salary NUMBER(8, 2) NOT NULL, 5 changed_on DATE NOT NULL 6 ); Table created. SQL> DECLARE 2 TYPE t_change_rec IS RECORD ( 3 old_salary employees_history.old_salary%TYPE, 4 new_salary employees_history.new_salary%TYPE, 5 employee_id employees_history.employee_id%TYPE 6 ); 7 TYPE t_change_details IS 8 TABLE OF t_change_rec; 9 l_changes t_change_details; 10 BEGIN 11 UPDATE employees e 12 SET 13 salary = salary * 1.07 14 FROM departments d 15 WHERE 16 d.department_id = e.department_id 17 AND d.department_name = 'IT' 18 RETURNING 19 OLD salary, NEW salary, employee_id 20 BULK COLLECT INTO 21 l_changes; 22 23 FORALL i IN 1..l_changes.count 24 INSERT INTO employees_history ( 25 employee_id, 26 old_salary, 27 new_salary, 28 changed_on 29 ) VALUES ( 30 l_changes(i).employee_id, 31 l_changes(i).old_salary, 32 l_changes(i).new_salary, 33 sysdate 34 ); 35 END; 36 / PL/SQL procedure successfully completed. SQL> SELECT 2 employee_id, 3 old_salary, 4 new_salary, 5 changed_on 6 FROM 7 employees_history; EMPLOYEE_ID OLD_SALARY NEW_SALARY CHANGED_O ----------- ---------- ---------- --------- 103 9000 9630 22-JUN-23 104 6000 6420 22-JUN-23 105 4800 5136 22-JUN-23 106 4800 5136 22-JUN-23 107 4200 4494 22-JUN-23 SQL> ROLLBACK; Rollback complete. SQL> -- example 03: no \"old\" value returned by INSERT statements SQL> DROP TABLE IF EXISTS insert_demo; Table dropped. SQL> CREATE TABLE insert_demo ( 2 id NUMBER 3 GENERATED ALWAYS AS IDENTITY, 4 vc VARCHAR2(100) NOT NULL, 5 d DATE DEFAULT sysdate NOT NULL, 6 CONSTRAINT pk_insert_demo PRIMARY KEY ( id ) 7 ) 8 / Table created. SQL> var l_old_id number SQL> var l_new_id number SQL> INSERT INTO insert_demo ( 2 vc 3 ) VALUES ( 4 'insert demo' 5 ) 6 RETURNING 7 old id, 8 new id 9 INTO 10 :l_old_id, 11 :l_new_id; 1 row created. SQL> SELECT 2 :l_old_id, 3 :l_new_id; :L_OLD_ID :L_NEW_ID ---------- ---------- 1 SQL> -- example 04: no \"new\" value returning by DELETE statements SQL> DELETE 2 insert_demo 3 WHERE 4 id = :l_new_id 5 RETURNING 6 old id, new id 7 INTO 8 :l_old_id, 9 :l_new_id; 1 row deleted. SQL> SELECT 2 :l_old_id, 3 :l_new_id; :L_OLD_ID :L_NEW_ID ---------- ---------- 1 SQL> ROLLBACK; Rollback complete. The ability to obtain old and new values affected by INSERT, UPDATE, and DELETE statements, as part of the SQL command’s execution, offers developers a uniform approach to reading these values and reduces the amount of work the database must perform. Availability: All Offerings SQL Language Reference: DELETE SQL Language Reference: INSERT SQL Language Reference: UPDATE","title":"Enhanced Returning-Into Clause","component":"guide","version":"latest","name":"returning-into","url":"/guide/latest/versions/23.2/sql/returning-into.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"157":{"id":157,"text":"Version 23.2 Categories SQL Schema privileges enable you to grant a user access to every object of the specified type in another schema. For example, to allow one user to query every table in another schema. -- create user to own tables create user data_owner no authentication; -- create user to query the tables grant create session to reporting_user identified by reporting_user; -- This gives reporting_user query privileges on every current & future table owned by data_owner grant read any table on schema data_owner to reporting_user; -- reporting_user automatically gets access to this table create table data_owner.tab ( c1 int ); conn reporting_user/reporting_user@23cfree select count(*) from data_owner.tab; Result SQL> create user data_owner 2 no authentication; User DATA_OWNER created. SQL> SQL> -- create user to query the tables SQL> grant create session to reporting_user 2 identified by reporting_user; Grant succeeded. SQL> SQL> -- This gives reporting_user query privileges on every current & future table owned by data_owner SQL> grant read any table 2 on schema data_owner 3 to reporting_user; Grant succeeded. SQL> SQL> -- reporting_user automatically gets access to this table SQL> create table data_owner.tab ( c1 int ); Table DATA_OWNER.TAB created. SQL> conn reporting_user/reporting_user@23cfree Connected. SQL> SQL> select count(*) from data_owner.tab; COUNT(*) ---------- 0 Schema privileges simplify data access controls. Availability: All Offerings GRANT Documentation","title":"Schema Level Privileges","component":"guide","version":"latest","name":"schema-level-privileges","url":"/guide/latest/versions/23.2/sql/schema-level-privileges.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"158":{"id":158,"text":"Version 23.2 Categories SQL You can now concatenate an unlimited number of parameters via the CONCAT() function. SELECT CONCAT('Hello World! It currently is ', TO_CHAR(sysdate,'YYYY-MM-DD HH24:MI:SS'), ' here in Vienna.') AS my_string; Result SQL> SELECT CONCAT('Hello World! It currently is ', TO_CHAR(sysdate,'YYYY-MM-DD HH24:MI:SS'), ' here in Vienna.') AS my_string; MY_STRING ___________________________________________________________________ Hello World! It currently is 2024-06-13 16:50:50 here in Vienna. Not having to nest multiple concatenations in multiple CONCAT() calls aids the readability and maintainability of code. Availability: All Offerings CONCAT Documentation","title":"Seamless concatenation via Varargs","component":"guide","version":"latest","name":"seamless-concat","url":"/guide/latest/versions/23.2/sql/seamless-concat.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"159":{"id":159,"text":"Version 23.2 Categories SQL You can now run SELECT expression-only queries without a FROM clause, e.g. adding from dual is no longer needed in such cases. The DUAL table has not disappeared, all queries that use it will continue to work as expected. select 2 * 3; select to_char( sysdate, 'dd.mm.yyyy' ) as today; select sysdate; Result SQL> select 2 2 * 3; 2*3 ---------- 6 SQL> select 2 to_char( 3 sysdate, 4 'dd.mm.yyyy' 5 ) as today; TODAY ---------- 20.06.2023 SQL> select 2 sysdate; SYSDATE --------- 20-JUN-23 Making the from dual clause optional in expression-only SQL statements improves SQL code portability and ease of use for developers. Availability: All Offerings Documentation","title":"SELECT without FROM clause","component":"guide","version":"latest","name":"select-without-from","url":"/guide/latest/versions/23.2/sql/select-without-from.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"160":{"id":160,"text":"Version 23.2 Categories SQL, PL/SQL The SQL Transpiler automatically and wherever possible converts (transpiles) PL/SQL functions within SQL into SQL expressions, without user intervention. create table employees ( employee_id integer primary key, first_name varchar2(100), last_name varchar2(100), hire_date date ); insert into employees (employee_id,first_name,last_name,hire_date) values (100,'Steven','King',to_date('17-JUN-2013 00:00','DD-MON-YYYY HH24:MI')), (101,'Neena','Yang',to_date('21-SEP-2015 00:00','DD-MON-YYYY HH24:MI')), (102,'Lex','Garcia',to_date('13-JAN-2011 00:00','DD-MON-YYYY HH24:MI')), (103,'Alexander','James',to_date('03-JAN-2016 00:00','DD-MON-YYYY HH24:MI')), (104,'Bruce','Miller',to_date('21-MAY-2017 00:00','DD-MON-YYYY HH24:MI')), (105,'David','Williams',to_date('25-JUN-2015 00:00','DD-MON-YYYY HH24:MI')), (106,'Valli','Jackson',to_date('05-FEB-2016 00:00','DD-MON-YYYY HH24:MI')), (107,'Diana','Nguyen',to_date('07-FEB-2017 00:00','DD-MON-YYYY HH24:MI')), (108,'Nancy','Gruenberg',to_date('17-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), (109,'Daniel','Faviet',to_date('16-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), (110,'John','Chen',to_date('28-SEP-2015 00:00','DD-MON-YYYY HH24:MI')); create or replace function get_year ( dt date ) return number as begin return extract ( year from dt ); end get_year; / set serveroutput off -- This disables the transpiler; it is disabled by default alter session set sql_transpiler = 'OFF'; select count (*) from employees where get_year ( hire_date ) = 2015; -- With the transpiler disabled, the predicate is the function call GET_YEAR select * from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); -- Enable the automatic SQL transpiler alter session set sql_transpiler = 'ON'; -- With the transpiler enabled, the expression in the function is extracted -- the predicate is now EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\")) -- => no SQL <> PL/SQL runtime context switch select count (*) from employees where get_year ( hire_date ) = 2017; select * from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); Result SQL> create table employees ( 2 employee_id integer primary key, 3 first_name varchar2(100), 4 last_name varchar2(100), 5 hire_date date 6 ); Table EMPLOYEES created. SQL> SQL> insert into employees (employee_id,first_name,last_name,hire_date) 2 values (100,'Steven','King',to_date('17-JUN-2013 00:00','DD-MON-YYYY HH24:MI')), 3 (101,'Neena','Yang',to_date('21-SEP-2015 00:00','DD-MON-YYYY HH24:MI')), 4 (102,'Lex','Garcia',to_date('13-JAN-2011 00:00','DD-MON-YYYY HH24:MI')), 5 (103,'Alexander','James',to_date('03-JAN-2016 00:00','DD-MON-YYYY HH24:MI')), 6 (104,'Bruce','Miller',to_date('21-MAY-2017 00:00','DD-MON-YYYY HH24:MI')), 7 (105,'David','Williams',to_date('25-JUN-2015 00:00','DD-MON-YYYY HH24:MI')), 8 (106,'Valli','Jackson',to_date('05-FEB-2016 00:00','DD-MON-YYYY HH24:MI')), 9 (107,'Diana','Nguyen',to_date('07-FEB-2017 00:00','DD-MON-YYYY HH24:MI')), 10 (108,'Nancy','Gruenberg',to_date('17-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), 11 (109,'Daniel','Faviet',to_date('16-AUG-2012 00:00','DD-MON-YYYY HH24:MI')), 12 (110,'John','Chen',to_date('28-SEP-2015 00:00','DD-MON-YYYY HH24:MI')); 11 rows inserted. SQL> SQL> SQL> create or replace function get_year ( dt date ) 2 return number as 3 begin 4 return extract ( year from dt ); 5 end get_year; 6 / Function GET_YEAR compiled SQL> SQL> set serveroutput off SQL> -- This disables the transpiler; it is disabled by default SQL> alter session set sql_transpiler = 'OFF'; Session altered. SQL> SQL> select count (*) from employees 2 where get_year ( hire_date ) = 2015; COUNT(*) ---------- 3 SQL> SQL> -- With the transpiler disabled, the predicate is the function call GET_YEAR SQL> select * 2 from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); PLAN_TABLE_OUTPUT ---------------------------------------------------------------------------- EXPLAINED SQL STATEMENT: ------------------------ select count (*) from employees where get_year ( hire_date ) = 2015 Plan hash value: 1756381138 ---------------------------------------- | Id | Operation | Name | ---------------------------------------- | 0 | SELECT STATEMENT | | | 1 | SORT AGGREGATE | | |* 2 | TABLE ACCESS FULL| EMPLOYEES | ---------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 2 - filter(\"GET_YEAR\"(\"HIRE_DATE\")=2015) 19 rows selected. SQL> SQL> -- Enable the automatic SQL transpiler SQL> alter session set sql_transpiler = 'ON'; Session altered. SQL> SQL> -- With the transpiler enabled, the expression in the function is extracted SQL> -- the predicate is now EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\")) SQL> -- => no SQL <> PL/SQL runtime context switch SQL> select count (*) from employees 2 where get_year ( hire_date ) = 2017; COUNT(*) ---------- 2 SQL> SQL> select * 2 from dbms_xplan.display_cursor( format => 'BASIC LAST +PREDICATE'); PLAN_TABLE_OUTPUT -------------------------------------------------------------------------- EXPLAINED SQL STATEMENT: ------------------------ select count (*) from employees where get_year ( hire_date ) = 2017 Plan hash value: 1756381138 ---------------------------------------- | Id | Operation | Name | ---------------------------------------- | 0 | SELECT STATEMENT | | | 1 | SORT AGGREGATE | | |* 2 | TABLE ACCESS FULL| EMPLOYEES | ---------------------------------------- Predicate Information (identified by operation id): --------------------------------------------------- 2 - filter(EXTRACT(YEAR FROM INTERNAL_FUNCTION(\"HIRE_DATE\"))=2017) 19 rows selected. The conversion operation is transparent to users and can improve performance by reducing overhead accrued from switching between the SQL and PL/SQL runtime. Availability: All Offerings SQL Tuning Guide","title":"SQL Transpiler","component":"guide","version":"latest","name":"sql-transpiler","url":"/guide/latest/versions/23.2/sql/sql-transpiler.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"161":{"id":161,"text":"Version 23.2 Categories SQL You can pass INTERVAL datatypes to the SUM and AVG aggregate and analytic functions. with rws as ( select interval '0' hour + numtodsinterval ( level, 'hour' ) dsi connect by level with rws as ( 2 select interval '0' hour + numtodsinterval ( level, 'hour' ) dsi 3 connect by level <= 10 4 ) 5 select sum ( dsi ) total_duration, 6 avg ( dsi ) mean_duration 7 from rws; TOTAL_DURATION MEAN_DURATION ------------------- ------------------- +02 07:00:00.000000 +00 05:30:00.000000 This enhancement makes it easier for developers to calculate totals and averages over INTERVAL values. Availability: All Offerings AVG Documentation SUM Documentation","title":"SUM and AVG over INTERVAL data types","component":"guide","version":"latest","name":"sum-and-avg-over-interval-types","url":"/guide/latest/versions/23.2/sql/sum-and-avg-over-interval-types.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"162":{"id":162,"text":"Version 23.2 Categories SQL The Table Value Constructor can be used to generate multiple table values (e.g. rows) in a single invocation. This feature is part of the ISO SQL:1992 standard. -- Table to demonstrate the table value constructor CREATE TABLE bookings ( id NUMBER, location VARCHAR2(25), type VARCHAR2(25) ); -- Insert multiple rows with a single insert statement INSERT INTO bookings VALUES (12113, 'Vienna', 'Family'), (62361, 'San Francisco', 'Business'), (38172, 'Berlin', 'Leisure'); -- Retrieve newly inserted rows SELECT * FROM bookings; -- Generate multiple rows using the table value constructor SELECT employee_id, first_name FROM ( VALUES (1,'Scott'), (2,'James'), (3,'John') ) employees (employee_id, first_name); Result SQL> -- Table to demonstrate the table value constructor SQL> CREATE TABLE bookings 2 ( 3 id NUMBER, 4 location VARCHAR2(25), 5 type VARCHAR2(25) 6 ); Table BOOKINGS created. SQL> -- Insert multiple rows with a single insert statement SQL> INSERT INTO bookings 2 VALUES (12113, 'Vienna', 'Family'), 3 (62361, 'San Francisco', 'Business'), 4 (38172, 'Berlin', 'Leisure'); 3 rows inserted. SQL> -- Retrieve newly inserted rows SQL> SELECT * FROM bookings; ID LOCATION TYPE -------- ---------------- -------- 12113 Vienna Family 62361 San Francisco Business 38172 Berlin Leisure SQL> -- Generate multiple rows using the table value constructor SQL> SELECT employee_id, first_name 2 FROM ( 3 VALUES (1,'Scott'), 4 (2,'James'), 5 (3,'John') 6 ) employees (employee_id, first_name); EMPLOYEE_ID FIRST_NAME -------------- ---------- 1 Scott 2 James 3 John The table value constructor enables users to insert multiple rows within a single INSERT operation. This avoids unnecessary additional INSERT executions and roundtrips from and to the client for inserting multiple rows. Using this feature can make SQL scripts more concise and readable. Using this feature can save time when writing INSERT statements manually. The table value constructor provides a convenient and concise way to generate multiple rows with values. Availability: All Offerings Multi-row INSERT and VALUES row generation documentation Multi-row INSERT and VALUES row generation example","title":"Table Value Constructor","component":"guide","version":"latest","name":"table-value-constructor","url":"/guide/latest/versions/23.2/sql/table-value-constructor.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"163":{"id":163,"text":"Version 23.2 Categories SQL UPDATE and DELETE statements can leverage join conditions on other tables to determine which rows to modify or delete in the source table. -- Get current salary for all employees in the IT department SELECT e.first_name, e.last_name, e.salary FROM employees e, departments d WHERE e.department_id=d.department_id AND d.department_name = 'IT'; -- Increase salary by 50% for all employees in the IT department UPDATE employees e SET e.salary=e.salary*1.5 FROM departments d WHERE e.department_id=d.department_id AND d.department_name = 'IT'; -- Verify changes SELECT e.first_name, e.last_name, e.salary FROM employees e, departments d WHERE e.department_id=d.department_id AND d.department_name = 'IT'; -- Commit changes COMMIT; -- Get all Sales Reps who were hired before the 1st of January 2016 SELECT e.first_name, e.last_name, e.hire_date FROM employees e, departments d, jobs j WHERE e.department_id=d.department_id AND d.department_name = 'Sales' AND e.job_id=j.job_id AND j.job_title = 'Sales Representative' AND e.hire_date -- Get current salary for all employees in the IT department SQL> SELECT e.first_name, e.last_name, e.salary 2 FROM employees e, departments d 3 WHERE e.department_id=d.department_id 4* AND d.department_name = 'IT'; FIRST_NAME LAST_NAME SALARY _____________ ____________ _________ Alexander James 9000 Bruce Miller 6000 David Williams 4800 Valli Jackson 4800 Diana Nguyen 4200 SQL> SQL> -- Increase salary by 50% for all employees in the IT department SQL> UPDATE employees e SET e.salary=e.salary*1.5 2 FROM departments d 3 WHERE e.department_id=d.department_id 4* AND d.department_name = 'IT'; 5 rows updated. SQL> SQL> -- Verify changes SQL> SELECT e.first_name, e.last_name, e.salary 2 FROM employees e, departments d 3 WHERE e.department_id=d.department_id 4* AND d.department_name = 'IT'; FIRST_NAME LAST_NAME SALARY _____________ ____________ _________ Alexander James 13500 Bruce Miller 9000 David Williams 7200 Valli Jackson 7200 Diana Nguyen 6300 SQL> SQL> -- Commit changes SQL> COMMIT; Commit complete. SQL> -- Get all Sales Reps who were hired before the 1st of January 2016 SQL> SELECT e.first_name, e.last_name, e.hire_date 2 FROM employees e, departments d, jobs j 3 WHERE e.department_id=d.department_id 4 AND d.department_name = 'Sales' 5 AND e.job_id=j.job_id 6 AND j.job_title = 'Sales Representative' 7* AND e.hire_date SQL> -- Delete all Sales Reps who were hired before the 1st of January 2016 SQL> DELETE FROM employees e 2 FROM departments d, jobs j 3 WHERE e.department_id=d.department_id 4 AND d.department_name = 'Sales' 5 AND e.job_id=j.job_id 6 AND j.job_title = 'Sales Representative' 7* AND e.hire_date SQL> -- Verify changes SQL> SELECT e.first_name, e.last_name, e.hire_date 2 FROM employees e, departments d, jobs j 3 WHERE e.department_id=d.department_id 4 AND d.department_name = 'Sales' 5 AND e.job_id=j.job_id 6 AND j.job_title = 'Sales Representative' 7* AND e.hire_date SQL> -- Commit changes SQL> COMMIT; Commit complete. Leveraging joins as part of UPDATE and DELETE statements makes writing, executing and reading data manipulation statements easier. Availability: All Offerings UPDATE statement and DELETE statement","title":"UPDATE/DELETE via JOIN","component":"guide","version":"latest","name":"update-delete-via-join","url":"/guide/latest/versions/23.2/sql/update-delete-via-join.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]},"164":{"id":164,"text":"Version 23.2 Categories SQL The maximum number of columns allowed in a database table or view has been increased to 4096. This feature allows you to build applications that can store attributes in a single table with more than the previous 1000-column limit. Some applications, such as Machine Learning and streaming IoT application workloads, may require the use of de-normalized tables with more than 1000 columns. The majority of existing database applications might not need extra-wide tables. Before you can create tables with more than 1000 columns you must ensure that the following initialization parameters are set to the required values: The value of the compatible parameter must be set to 23.0.0 or higher Once compatible is set accordingly you must change max_columns to extended Please refer to the Database Upgrade Guide for more details about the compatible initialization parameter and the implications of changing it. Typing a create table statement featuring 4096 columns would result in a very long statement. The example simplifies the process using Native Dynamic SQL; it assumes that the above mentioned prerequisites are met. DECLARE l_sql CLOB; c_num_cols CONSTANT PLS_INTEGER := 4096; BEGIN -- construct the `create table` statement and store it as a CLOB l_sql := 'create table demotable (' || chr(13) || ' c0001 number' || chr(13); FOR i IN 2..c_num_cols LOOP l_sql := l_sql || ',c' || lpad(i, 4, 0) || ' number' || chr(13); END LOOP; l_sql := l_sql || ')'; -- create the table EXECUTE IMMEDIATE l_sql; EXCEPTION -- notify of errors WHEN OTHERS THEN raise_application_error( -20000, 'an unexpected error occurred ' || ' (' || sqlerrm || ')' ); END; / -- validate the number of columns in the table SELECT count(*) FROM user_tab_columns WHERE table_name = 'DEMOTABLE'; Result SQL> DECLARE 2 l_sql CLOB; 3 c_num_cols CONSTANT PLS_INTEGER := 4096; 4 BEGIN 5 -- construct the `create table` statement and store it as a CLOB 6 l_sql := 'create table demotable (' || chr(13) || ' c0001 number' || chr(13); 7 FOR i IN 2..c_num_cols LOOP 8 l_sql := l_sql || ',c' || lpad(i, 4, 0) || ' number' || chr(13); 9 END LOOP; 10 l_sql := l_sql || ')'; 11 12 -- create the table 13 EXECUTE IMMEDIATE l_sql; 14 EXCEPTION 15 -- notify of errors 16 WHEN OTHERS THEN 17 raise_application_error( 18 -20000, 19 'an unexpected error occurred ' 20 || ' (' 21 || sqlerrm 22 || ')' 23 ); 24 END; 25 / PL/SQL procedure successfully completed. SQL> -- validate the number of columns in the table SQL> SELECT 2 count(*) 3 FROM 4 user_tab_columns 5 WHERE 6 table_name = 'DEMOTABLE'; COUNT(*) ---------- 4096 Whilst most database applications should be fine with the existing limit of 1000 columns per table or view, certain IoT (Internet of Things) or Machine Learning workloads might require wider tables. In such cases you can make use of the wide tables offered by Oracle Database 23c. Availability: All Offerings Database Reference: max_columns initialization parameter Database Reference: compatible initialization parameter Blog post discussing wide tables on blogs.oracle.com","title":"4096 table columns","component":"guide","version":"latest","name":"wide-tables","url":"/guide/latest/versions/23.2/sql/wide-tables.html","titles":[{"text":"Benefits","hash":"_benefits","id":1},{"text":"Further information","hash":"_further_information","id":2}]}},"components":{},"componentVersions":{"guide/latest":{"displayVersion":"latest","title":"Oracle SQL Features","version":"latest","name":"guide","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Oracle SQL Features","site-url":"https://oracle-sql-features.github.io","icon_req_y":"icon:check[role=\"green\"]","icon_req_n":"icon:times[role=\"red\"]","icon_req_c":"icon:exclamation-triangle[role=\"yellow\"]"},"sourcemap":false,"extensions":[{}]},"url":"/guide/latest/index.html","navigation":[{"items":[{"content":"Categories","url":"/guide/latest/categories/index.html","urlType":"internal","items":[{"content":"JavaScript","url":"/guide/latest/categories/javascript/index.html","urlType":"internal","items":[{"content":"All","items":[{"content":"Inline JavaScript Procedures","url":"/guide/latest/categories/javascript/features/inline-javascript.html","urlType":"internal"},{"content":"JavaScript Call Specifications","url":"/guide/latest/categories/javascript/features/javascript-call-specifications.html","urlType":"internal"},{"content":"JavaScript Environments","url":"/guide/latest/categories/javascript/features/javascript-environments.html","urlType":"internal"},{"content":"JavaScript Modules","url":"/guide/latest/categories/javascript/features/javascript-modules.html","urlType":"internal"}]},{"content":"23.2","url":"/guide/latest/categories/javascript/23.2/index.html","urlType":"internal","items":[{"content":"Inline JavaScript Procedures","url":"/guide/latest/categories/javascript/23.2/inline-javascript.html","urlType":"internal"},{"content":"JavaScript Call Specifications","url":"/guide/latest/categories/javascript/23.2/javascript-call-specifications.html","urlType":"internal"},{"content":"JavaScript Environments","url":"/guide/latest/categories/javascript/23.2/javascript-environments.html","urlType":"internal"},{"content":"JavaScript Modules","url":"/guide/latest/categories/javascript/23.2/javascript-modules.html","urlType":"internal"}]}]},{"content":"PL/SQL","url":"/guide/latest/categories/plsql/index.html","urlType":"internal","items":[{"content":"All","items":[{"content":"Extended CASE Controls","url":"/guide/latest/categories/plsql/features/extended-case-controls.html","urlType":"internal"},{"content":"PL/SQL Function in SQL","url":"/guide/latest/categories/plsql/features/plsql-function-in-sql.html","urlType":"internal"},{"content":"PL/SQL and JSON type conversions","url":"/guide/latest/categories/plsql/features/json-plsql-type-conversions.html","urlType":"internal"},{"content":"SQL Transpiler","url":"/guide/latest/categories/plsql/features/sql-transpiler.html","urlType":"internal"}]},{"content":"12.1.0.1","url":"/guide/latest/categories/plsql/12.1.0.1/index.html","urlType":"internal","items":[{"content":"PL/SQL Function in SQL","url":"/guide/latest/categories/plsql/12.1.0.1/plsql-function-in-sql.html","urlType":"internal"}]},{"content":"23.2","url":"/guide/latest/categories/plsql/23.2/index.html","urlType":"internal","items":[{"content":"Extended CASE Controls","url":"/guide/latest/categories/plsql/23.2/extended-case-controls.html","urlType":"internal"},{"content":"PL/SQL and JSON type conversions","url":"/guide/latest/categories/plsql/23.2/json-plsql-type-conversions.html","urlType":"internal"},{"content":"SQL Transpiler","url":"/guide/latest/categories/plsql/23.2/sql-transpiler.html","urlType":"internal"}]}]},{"content":"SQL","url":"/guide/latest/categories/sql/index.html","urlType":"internal","items":[{"content":"All","items":[{"content":"4096 table columns","url":"/guide/latest/categories/sql/features/wide-tables.html","urlType":"internal"},{"content":"Annotations","url":"/guide/latest/categories/sql/features/annotations.html","urlType":"internal"},{"content":"Boolean data type","url":"/guide/latest/categories/sql/features/boolean.html","urlType":"internal"},{"content":"CEIL, FLOOR, and ROUND for datetime data types","url":"/guide/latest/categories/sql/features/ceil-floor-round-for-datetime-types.html","urlType":"internal"},{"content":"Default ON NULL for UPDATE statements","url":"/guide/latest/categories/sql/features/default-on-null-update.html","urlType":"internal"},{"content":"Enhanced Returning-Into Clause","url":"/guide/latest/categories/sql/features/returning-into.html","urlType":"internal"},{"content":"FUZZY_MATCH operator","url":"/guide/latest/categories/sql/features/fuzzy-match-operator.html","urlType":"internal"},{"content":"GROUP BY column alias or position","url":"/guide/latest/categories/sql/features/group-by-alias-position.html","urlType":"internal"},{"content":"IF [NOT] EXISTS","url":"/guide/latest/categories/sql/features/if-not-exists.html","urlType":"internal"},{"content":"Identity Columns","url":"/guide/latest/categories/sql/features/identity-columns.html","urlType":"internal"},{"content":"JSON Schema: check constraint","url":"/guide/latest/categories/sql/features/json-schema-validation-report.html","urlType":"internal"},{"content":"JSON Schema: validate rows in a table","url":"/guide/latest/categories/sql/features/json-schema-validate-rows.html","urlType":"internal"},{"content":"Native SQL Support for Query Row Limits and Row Offsets","url":"/guide/latest/categories/sql/features/query-row-limits-and-offsets.html","urlType":"internal"},{"content":"PHONIC_ENCODE operator","url":"/guide/latest/categories/sql/features/phonic-encode-operator.html","urlType":"internal"},{"content":"PL/SQL Function in SQL","url":"/guide/latest/categories/sql/features/plsql-function-in-sql.html","urlType":"internal"},{"content":"SELECT without FROM clause","url":"/guide/latest/categories/sql/features/select-without-from.html","urlType":"internal"},{"content":"SQL Transpiler","url":"/guide/latest/categories/sql/features/sql-transpiler.html","urlType":"internal"},{"content":"SUM and AVG over INTERVAL data types","url":"/guide/latest/categories/sql/features/sum-and-avg-over-interval-types.html","urlType":"internal"},{"content":"Schema Level Privileges","url":"/guide/latest/categories/sql/features/schema-level-privileges.html","urlType":"internal"},{"content":"Seamless concatenation via Varargs","url":"/guide/latest/categories/sql/features/seamless-concat.html","urlType":"internal"},{"content":"Table Value Constructor","url":"/guide/latest/categories/sql/features/table-value-constructor.html","urlType":"internal"},{"content":"UPDATE/DELETE via JOIN","url":"/guide/latest/categories/sql/features/update-delete-via-join.html","urlType":"internal"},{"content":"WINDOW clause","url":"/guide/latest/categories/sql/features/window-clause.html","urlType":"internal"},{"content":"Window functions GROUPS frame","url":"/guide/latest/categories/sql/features/window-functions-groups-frame.html","urlType":"internal"},{"content":"Window functions frame exclusion","url":"/guide/latest/categories/sql/features/window-functions-exclusion-frame.html","urlType":"internal"}]},{"content":"12.1.0.1","url":"/guide/latest/categories/sql/12.1.0.1/index.html","urlType":"internal","items":[{"content":"Identity Columns","url":"/guide/latest/categories/sql/12.1.0.1/identity-columns.html","urlType":"internal"},{"content":"Native SQL Support for Query Row Limits and Row Offsets","url":"/guide/latest/categories/sql/12.1.0.1/query-row-limits-and-offsets.html","urlType":"internal"},{"content":"PL/SQL Function in SQL","url":"/guide/latest/categories/sql/12.1.0.1/plsql-function-in-sql.html","urlType":"internal"}]},{"content":"23.2","url":"/guide/latest/categories/sql/23.2/index.html","urlType":"internal","items":[{"content":"4096 table columns","url":"/guide/latest/categories/sql/23.2/wide-tables.html","urlType":"internal"},{"content":"Annotations","url":"/guide/latest/categories/sql/23.2/annotations.html","urlType":"internal"},{"content":"Boolean data type","url":"/guide/latest/categories/sql/23.2/boolean.html","urlType":"internal"},{"content":"CEIL, FLOOR, and ROUND for datetime data types","url":"/guide/latest/categories/sql/23.2/ceil-floor-round-for-datetime-types.html","urlType":"internal"},{"content":"Default ON NULL for UPDATE statements","url":"/guide/latest/categories/sql/23.2/default-on-null-update.html","urlType":"internal"},{"content":"Enhanced Returning-Into Clause","url":"/guide/latest/categories/sql/23.2/returning-into.html","urlType":"internal"},{"content":"FUZZY_MATCH operator","url":"/guide/latest/categories/sql/23.2/fuzzy-match-operator.html","urlType":"internal"},{"content":"GROUP BY column alias or position","url":"/guide/latest/categories/sql/23.2/group-by-alias-position.html","urlType":"internal"},{"content":"IF [NOT] EXISTS","url":"/guide/latest/categories/sql/23.2/if-not-exists.html","urlType":"internal"},{"content":"JSON Schema: check constraint","url":"/guide/latest/categories/sql/23.2/json-schema-validation-report.html","urlType":"internal"},{"content":"JSON Schema: validate rows in a table","url":"/guide/latest/categories/sql/23.2/json-schema-validate-rows.html","urlType":"internal"},{"content":"PHONIC_ENCODE operator","url":"/guide/latest/categories/sql/23.2/phonic-encode-operator.html","urlType":"internal"},{"content":"SELECT without FROM clause","url":"/guide/latest/categories/sql/23.2/select-without-from.html","urlType":"internal"},{"content":"SQL Transpiler","url":"/guide/latest/categories/sql/23.2/sql-transpiler.html","urlType":"internal"},{"content":"SUM and AVG over INTERVAL data types","url":"/guide/latest/categories/sql/23.2/sum-and-avg-over-interval-types.html","urlType":"internal"},{"content":"Schema Level Privileges","url":"/guide/latest/categories/sql/23.2/schema-level-privileges.html","urlType":"internal"},{"content":"Seamless concatenation via Varargs","url":"/guide/latest/categories/sql/23.2/seamless-concat.html","urlType":"internal"},{"content":"Table Value Constructor","url":"/guide/latest/categories/sql/23.2/table-value-constructor.html","urlType":"internal"},{"content":"UPDATE/DELETE via JOIN","url":"/guide/latest/categories/sql/23.2/update-delete-via-join.html","urlType":"internal"}]},{"content":"21.3","url":"/guide/latest/categories/sql/21.3/index.html","urlType":"internal","items":[{"content":"WINDOW clause","url":"/guide/latest/categories/sql/21.3/window-clause.html","urlType":"internal"},{"content":"Window functions GROUPS frame","url":"/guide/latest/categories/sql/21.3/window-functions-groups-frame.html","urlType":"internal"},{"content":"Window functions frame exclusion","url":"/guide/latest/categories/sql/21.3/window-functions-exclusion-frame.html","urlType":"internal"}]}]}]}],"root":true,"order":1},{"items":[{"content":"Versions","url":"/guide/latest/versions/index.html","urlType":"internal","items":[{"content":"12.1.0.1","url":"/guide/latest/versions/12.1.0.1/index.html","urlType":"internal","items":[{"content":"All","items":[{"content":"Identity Columns","url":"/guide/latest/versions/12.1.0.1/features/identity-columns.html","urlType":"internal"},{"content":"Native SQL Support for Query Row Limits and Row Offsets","url":"/guide/latest/versions/12.1.0.1/features/query-row-limits-and-offsets.html","urlType":"internal"},{"content":"PL/SQL Function in SQL","url":"/guide/latest/versions/12.1.0.1/features/plsql-function-in-sql.html","urlType":"internal"}]},{"content":"PL/SQL","url":"/guide/latest/versions/12.1.0.1/plsql/index.html","urlType":"internal","items":[{"content":"PL/SQL Function in SQL","url":"/guide/latest/versions/12.1.0.1/plsql/plsql-function-in-sql.html","urlType":"internal"}]},{"content":"SQL","url":"/guide/latest/versions/12.1.0.1/sql/index.html","urlType":"internal","items":[{"content":"Identity Columns","url":"/guide/latest/versions/12.1.0.1/sql/identity-columns.html","urlType":"internal"},{"content":"Native SQL Support for Query Row Limits and Row Offsets","url":"/guide/latest/versions/12.1.0.1/sql/query-row-limits-and-offsets.html","urlType":"internal"},{"content":"PL/SQL Function in SQL","url":"/guide/latest/versions/12.1.0.1/sql/plsql-function-in-sql.html","urlType":"internal"}]}]},{"content":"21.3","url":"/guide/latest/versions/21.3/index.html","urlType":"internal","items":[{"content":"All","items":[{"content":"WINDOW clause","url":"/guide/latest/versions/21.3/features/window-clause.html","urlType":"internal"},{"content":"Window functions GROUPS frame","url":"/guide/latest/versions/21.3/features/window-functions-groups-frame.html","urlType":"internal"},{"content":"Window functions frame exclusion","url":"/guide/latest/versions/21.3/features/window-functions-exclusion-frame.html","urlType":"internal"}]},{"content":"SQL","url":"/guide/latest/versions/21.3/sql/index.html","urlType":"internal","items":[{"content":"WINDOW clause","url":"/guide/latest/versions/21.3/sql/window-clause.html","urlType":"internal"},{"content":"Window functions GROUPS frame","url":"/guide/latest/versions/21.3/sql/window-functions-groups-frame.html","urlType":"internal"},{"content":"Window functions frame exclusion","url":"/guide/latest/versions/21.3/sql/window-functions-exclusion-frame.html","urlType":"internal"}]}]},{"content":"23.2","url":"/guide/latest/versions/23.2/index.html","urlType":"internal","items":[{"content":"All","items":[{"content":"4096 table columns","url":"/guide/latest/versions/23.2/features/wide-tables.html","urlType":"internal"},{"content":"Annotations","url":"/guide/latest/versions/23.2/features/annotations.html","urlType":"internal"},{"content":"Boolean data type","url":"/guide/latest/versions/23.2/features/boolean.html","urlType":"internal"},{"content":"CEIL, FLOOR, and ROUND for datetime data types","url":"/guide/latest/versions/23.2/features/ceil-floor-round-for-datetime-types.html","urlType":"internal"},{"content":"Default ON NULL for UPDATE statements","url":"/guide/latest/versions/23.2/features/default-on-null-update.html","urlType":"internal"},{"content":"Enhanced Returning-Into Clause","url":"/guide/latest/versions/23.2/features/returning-into.html","urlType":"internal"},{"content":"Extended CASE Controls","url":"/guide/latest/versions/23.2/features/extended-case-controls.html","urlType":"internal"},{"content":"FUZZY_MATCH operator","url":"/guide/latest/versions/23.2/features/fuzzy-match-operator.html","urlType":"internal"},{"content":"GROUP BY column alias or position","url":"/guide/latest/versions/23.2/features/group-by-alias-position.html","urlType":"internal"},{"content":"IF [NOT] EXISTS","url":"/guide/latest/versions/23.2/features/if-not-exists.html","urlType":"internal"},{"content":"Inline JavaScript Procedures","url":"/guide/latest/versions/23.2/features/inline-javascript.html","urlType":"internal"},{"content":"JSON Schema: check constraint","url":"/guide/latest/versions/23.2/features/json-schema-validation-report.html","urlType":"internal"},{"content":"JSON Schema: validate rows in a table","url":"/guide/latest/versions/23.2/features/json-schema-validate-rows.html","urlType":"internal"},{"content":"JavaScript Call Specifications","url":"/guide/latest/versions/23.2/features/javascript-call-specifications.html","urlType":"internal"},{"content":"JavaScript Environments","url":"/guide/latest/versions/23.2/features/javascript-environments.html","urlType":"internal"},{"content":"JavaScript Modules","url":"/guide/latest/versions/23.2/features/javascript-modules.html","urlType":"internal"},{"content":"PHONIC_ENCODE operator","url":"/guide/latest/versions/23.2/features/phonic-encode-operator.html","urlType":"internal"},{"content":"PL/SQL and JSON type conversions","url":"/guide/latest/versions/23.2/features/json-plsql-type-conversions.html","urlType":"internal"},{"content":"SELECT without FROM clause","url":"/guide/latest/versions/23.2/features/select-without-from.html","urlType":"internal"},{"content":"SQL Transpiler","url":"/guide/latest/versions/23.2/features/sql-transpiler.html","urlType":"internal"},{"content":"SUM and AVG over INTERVAL data types","url":"/guide/latest/versions/23.2/features/sum-and-avg-over-interval-types.html","urlType":"internal"},{"content":"Schema Level Privileges","url":"/guide/latest/versions/23.2/features/schema-level-privileges.html","urlType":"internal"},{"content":"Seamless concatenation via Varargs","url":"/guide/latest/versions/23.2/features/seamless-concat.html","urlType":"internal"},{"content":"Table Value Constructor","url":"/guide/latest/versions/23.2/features/table-value-constructor.html","urlType":"internal"},{"content":"UPDATE/DELETE via JOIN","url":"/guide/latest/versions/23.2/features/update-delete-via-join.html","urlType":"internal"}]},{"content":"JavaScript","url":"/guide/latest/versions/23.2/javascript/index.html","urlType":"internal","items":[{"content":"Inline JavaScript Procedures","url":"/guide/latest/versions/23.2/javascript/inline-javascript.html","urlType":"internal"},{"content":"JavaScript Call Specifications","url":"/guide/latest/versions/23.2/javascript/javascript-call-specifications.html","urlType":"internal"},{"content":"JavaScript Environments","url":"/guide/latest/versions/23.2/javascript/javascript-environments.html","urlType":"internal"},{"content":"JavaScript Modules","url":"/guide/latest/versions/23.2/javascript/javascript-modules.html","urlType":"internal"}]},{"content":"PL/SQL","url":"/guide/latest/versions/23.2/plsql/index.html","urlType":"internal","items":[{"content":"Extended CASE Controls","url":"/guide/latest/versions/23.2/plsql/extended-case-controls.html","urlType":"internal"},{"content":"PL/SQL and JSON type conversions","url":"/guide/latest/versions/23.2/plsql/json-plsql-type-conversions.html","urlType":"internal"},{"content":"SQL Transpiler","url":"/guide/latest/versions/23.2/plsql/sql-transpiler.html","urlType":"internal"}]},{"content":"SQL","url":"/guide/latest/versions/23.2/sql/index.html","urlType":"internal","items":[{"content":"4096 table columns","url":"/guide/latest/versions/23.2/sql/wide-tables.html","urlType":"internal"},{"content":"Annotations","url":"/guide/latest/versions/23.2/sql/annotations.html","urlType":"internal"},{"content":"Boolean data type","url":"/guide/latest/versions/23.2/sql/boolean.html","urlType":"internal"},{"content":"CEIL, FLOOR, and ROUND for datetime data types","url":"/guide/latest/versions/23.2/sql/ceil-floor-round-for-datetime-types.html","urlType":"internal"},{"content":"Default ON NULL for UPDATE statements","url":"/guide/latest/versions/23.2/sql/default-on-null-update.html","urlType":"internal"},{"content":"Enhanced Returning-Into Clause","url":"/guide/latest/versions/23.2/sql/returning-into.html","urlType":"internal"},{"content":"FUZZY_MATCH operator","url":"/guide/latest/versions/23.2/sql/fuzzy-match-operator.html","urlType":"internal"},{"content":"GROUP BY column alias or position","url":"/guide/latest/versions/23.2/sql/group-by-alias-position.html","urlType":"internal"},{"content":"IF [NOT] EXISTS","url":"/guide/latest/versions/23.2/sql/if-not-exists.html","urlType":"internal"},{"content":"JSON Schema: check constraint","url":"/guide/latest/versions/23.2/sql/json-schema-validation-report.html","urlType":"internal"},{"content":"JSON Schema: validate rows in a table","url":"/guide/latest/versions/23.2/sql/json-schema-validate-rows.html","urlType":"internal"},{"content":"PHONIC_ENCODE operator","url":"/guide/latest/versions/23.2/sql/phonic-encode-operator.html","urlType":"internal"},{"content":"SELECT without FROM clause","url":"/guide/latest/versions/23.2/sql/select-without-from.html","urlType":"internal"},{"content":"SQL Transpiler","url":"/guide/latest/versions/23.2/sql/sql-transpiler.html","urlType":"internal"},{"content":"SUM and AVG over INTERVAL data types","url":"/guide/latest/versions/23.2/sql/sum-and-avg-over-interval-types.html","urlType":"internal"},{"content":"Schema Level Privileges","url":"/guide/latest/versions/23.2/sql/schema-level-privileges.html","urlType":"internal"},{"content":"Seamless concatenation via Varargs","url":"/guide/latest/versions/23.2/sql/seamless-concat.html","urlType":"internal"},{"content":"Table Value Constructor","url":"/guide/latest/versions/23.2/sql/table-value-constructor.html","urlType":"internal"},{"content":"UPDATE/DELETE via JOIN","url":"/guide/latest/versions/23.2/sql/update-delete-via-join.html","urlType":"internal"}]}]}]}],"root":true,"order":2}]}}}})